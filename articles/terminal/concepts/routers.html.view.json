{
  "conceptual": "\n<p sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"2\">The <code sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"2\">OneImx.Terminal</code> framework uses routers to direct commands from users or services. This article summarizes the terminal routers designed to abstract and simplify the integration of various communication protocols within .NET for <code sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"2\">OneImx.Terminal</code> applications.</p>\n<h2 id=\"terminal-console-router\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"4\">Terminal Console Router</h2>\n<p sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"5\">The framework supports <xref href=\"OneImlx.Terminal.Runtime.TerminalConsoleRouter\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Runtime.TerminalConsoleRouter\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"5\"></xref> that allows end-users to manually enter commands into your terminal application. It ensures that commands entered by the user are routed to the appropriate command runners for execution.</p>\n<p sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"7\"><strong sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"7\">Note:</strong> In this context, <code sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"7\">console</code> refers to an abstraction of console routing, meaning the console can be a standard system console, a desktop application, or a web-based console.</p>\n<pre><code class=\"lang-csharp\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"9\">// Setup the terminal context and run the router indefinitely as a console.\nTerminalStartContext terminalStartContext = new(TerminalStartMode.Console, terminalTokenSource.Token, commandTokenSource.Token);\nTerminalConsoleRouterContext consoleRouterContext = new(terminalStartContext);\nawait host.RunTerminalRouterAsync&lt;TerminalConsoleRouter, TerminalConsoleRouterContext&gt;(consoleRouterContext);\n</code></pre>\n<p sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"16\">Console-based routing is particularly useful in environments where manual input and immediate command execution are necessary, offering a direct interface for administrators or users to interact with the system.</p>\n<pre><code class=\"lang-mermaid\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"18\">graph LR;\n    user(User) -- Manual --&gt; server(Terminal Server)\n    server --&gt; router(Terminal Router)\n    router --&gt; crouter(Command Router)\n    crouter --&gt; crunner1(Runner 1)\n    crouter --&gt; crunner2(Runner 2)\n    crouter --&gt; crunnerN(Runner N)\n    \n    %% Adding a note to the Terminal Server\n    oneimlxnote[OneImx.Terminal Framework] --&gt; server\n\n    classDef user fill:#f9f,stroke:#333,stroke-width:2px;\n    classDef server fill:#bbf,stroke:#333,stroke-width:4px;\n    classDef router fill:#fbb,stroke:#333,stroke-width:2px;\n    classDef service fill:#dfd,stroke:#333,stroke-width:2px;\n    classDef note fill:#ffffcc,stroke:#333,stroke-width:1px,stroke-dasharray: 5, 5;\n\n    class user user;\n    class server server;\n    class router,crouter router;\n    class crunner1,crunner2,crunnerN service;\n    class oneimlxnote note;\n</code></pre>\n<h2 id=\"terminal-tcp-router\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"43\">Terminal TCP Router</h2>\n<p sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"44\">The framework supports <xref href=\"OneImlx.Terminal.Runtime.TerminalTcpRouter\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Runtime.TerminalTcpRouter\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"44\"></xref> that allows terminal applications to function as servers, capable of receiving commands over TCP/IP from multiple clients concurrently. It ensures that commands are efficiently routed to the appropriate terminal runners, enabling effective command processing and response handling back to clients.&quot;</p>\n<pre><code class=\"lang-csharp\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"46\">// Setup the terminal context and run the router as a TCP server indefinitely\nTerminalStartContext terminalStartContext = new(TerminalStartMode.Tcp, terminalTokenSource.Token, commandTokenSource.Token);\nTerminalConsoleRouterContext consoleRouterContext = new(terminalStartContext);\nawait host.RunTerminalRouterAsync&lt;TerminalTcpRouter, TerminalTcpRouterContext&gt;(consoleRouterContext);\n</code></pre>\n<p sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"53\">The standard <a href=\"https://learn.microsoft.com/en-us/dotnet/fundamentals/networking/sockets/tcp-classes\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"53\">.NET TCP/IP classes</a> provide the infrastructure for reliable delivery of streams of data between applications. This makes it suitable for applications that require robust communication capabilities, such as those involving hardware interfaces, client-server or service-service architectures.</p>\n<pre><code class=\"lang-mermaid\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"55\">graph LR;\n    client1(Client 1) -- TCP/IP --&gt; server(Terminal Server)\n    client2(Client 2) -- TCP/IP --&gt; server\n    client3(Client 3) -- TCP/IP --&gt; server\n    client4(Client N) -- TCP/IP --&gt; server\n\n    server --&gt; router(Terminal Router)\n    router --&gt; crouter(Command Router)\n    crouter --&gt; crunner1(Runner 1)\n    crouter --&gt; crunner2(Runner 2)\n    crouter --&gt; crunnerN(Runner N)\n\n    %% Adding a note to the Terminal Server\n    oneimlxnote[OneImx.Terminal Framework] --&gt; server\n    \n    classDef client fill:#f9f,stroke:#333,stroke-width:2px;\n    classDef server fill:#bbf,stroke:#333,stroke-width:4px;\n    classDef router fill:#fbb,stroke:#333,stroke-width:2px;\n    classDef service fill:#dfd,stroke:#333,stroke-width:2px;\n    classDef note fill:#ffffcc,stroke:#333,stroke-width:1px,stroke-dasharray: 5, 5;\n\n    class client1,client2,client3,client4 client;\n    class server server;\n    class router,crouter router;\n    class crunner1,crunner2,crunnerN service;\n    class oneimlxnote note;\n</code></pre>\n<h2 id=\"terminal-udp-router\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"84\">Terminal UDP Router</h2>\n<p sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"85\">The framework supports <xref href=\"OneImlx.Terminal.Runtime.TerminalUdpRouter\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Runtime.TerminalUdpRouter\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"85\"></xref> that allows terminal applications to function as servers, capable of receiving commands over UDP from multiple clients concurrently. It ensures that commands are efficiently routed to the appropriate terminal runners.</p>\n<pre><code class=\"lang-csharp\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"87\">// Setup the terminal context and run the router as a UDP server indefinitely\nTerminalStartContext terminalStartContext = new(TerminalStartMode.Udp, terminalTokenSource.Token, commandTokenSource.Token);\nTerminalConsoleRouterContext consoleRouterContext = new(terminalStartContext);\nawait host.RunTerminalRouterAsync&lt;TerminalUdpRouter, TerminalUdpRouterContext&gt;(consoleRouterContext);\n</code></pre>\n<p sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"94\">The standard <a href=\"https://learn.microsoft.com/en-us/dotnet/framework/network-programming/using-udp-services\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"94\">.NET UDP classes</a> provide the infrastructure for datagram-based communications that do not require a connection before data is sent. This makes it suitable for applications that require lightweight, low-latency communication, such as real-time data feeds or multimedia streaming.</p>\n<pre><code class=\"lang-mermaid\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"96\">graph LR;\n    client1(Client 1) -- UDP --&gt; server(Terminal Server)\n    client2(Client 2) -- UDP --&gt; server\n    client3(Client 3) -- UDP --&gt; server\n    client4(Client N) -- UDP --&gt; server\n\n    server --&gt; router(Terminal Router)\n    router --&gt; crouter(Command Router)\n    crouter --&gt; crunner1(Runner 1)\n    crouter --&gt; crunner2(Runner 2)\n    crouter --&gt; crunnerN(Runner N)\n\n    %% Adding a note to the Terminal Server\n    oneimlxnote[OneImx.Terminal Framework] --&gt; server\n    \n    classDef client fill:#f9f,stroke:#333,stroke-width:2px;\n    classDef server fill:#bbf,stroke:#333,stroke-width:4px;\n    classDef router fill:#fbb,stroke:#333,stroke-width:2px;\n    classDef service fill:#dfd,stroke:#333,stroke-width:2px;\n    classDef note fill:#ffffcc,stroke:#333,stroke-width:1px,stroke-dasharray: 5, 5;\n\n    class client1,client2,client3,client4 client;\n    class server server;\n    class router,crouter router;\n    class crunner1,crunner2,crunnerN service;\n    class oneimlxnote note;\n</code></pre>\n<h2 id=\"terminal-custom-router\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"125\">Terminal Custom Router</h2>\n<p sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"126\">The <code sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"126\">OneImx.Terminal</code> framework also supports custom routers via <xref href=\"OneImlx.Terminal.Runtime.TerminalCustomRouter\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Runtime.TerminalCustomRouter\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"126\"></xref>, allowing for specialized routing logic that may not be covered by standard TCP, UDP, or console routers. This flexibility supports unique application-specific routing needs that require customized behavior beyond standard protocol handling.</p>\n<pre><code class=\"lang-csharp\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"128\">// Setup the terminal context and run a custom router based on specific requirements\nTerminalStartContext terminalStartContext = new(TerminalStartMode.Custom, terminalTokenSource.Token, commandTokenSource.Token);\nTerminalCustomRouterContext customRouterContext = new(terminalStartContext);\nawait host.RunTerminalRouterAsync&lt;MyTerminalCustomRouter, MyTerminalCustomRouterContext&gt;(customRouterContext);\n</code></pre>\n<h2 id=\"mixed-mode-terminal-router\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"135\">Mixed Mode Terminal Router</h2>\n<p sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"136\">The framework support a mixed mode terminal router that allows developers to create terminals with multiple operational modes. Using startup arguments, terminals can be configured to operate in console mode for user interactions, as a TCP/UDP server for handling network commands, or a custom router tailored to specific needs.</p>\n<p sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"138\">Developers can pass the desired operational mode using startup arguments during the application launch. The <code sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"138\">Main</code> method of the terminal application then processes these arguments to initiate the appropriate mode.</p>\n<p sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"140\">For instance, a terminal application can be configured to start in console mode directly by a user to execute commands manually. Alternatively, when started in TCP or UDP mode, it enables the application to accept commands remotely from other services or networked clients, effectively serving as a backend server.</p>\n<blockquote sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"142\">\n<p sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"142\"><strong sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"142\">Important:</strong> Once the terminal router is configured at startup, it cannot be changed during runtime.</p>\n</blockquote>\n<pre><code class=\"lang-mermaid\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"144\">graph TD;\n    A[Start Terminal] --&gt; B{Check Mode}\n    B --&gt;|Console| C[Console Router]\n    B --&gt;|TCP| D[TCP Router]\n    B --&gt;|UDP| E[UDP Router]\n    B --&gt;|Custom| F[Custom Router]\n\n    classDef default fill:#f9f,stroke:#333,stroke-width:2px;\n    classDef user fill:#ffc,stroke:#333,stroke-width:2px;\n    classDef server fill:#bbf,stroke:#333,stroke-width:4px;\n    classDef router fill:#fbb,stroke:#333,stroke-width:2px;\n    classDef service fill:#dfd,stroke:#333,stroke-width:2px;\n\n    class A user;\n    class B server;\n    class C,D,E,F router;\n</code></pre>\n<h2 id=\"selecting-a-router\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"163\">Selecting a Router</h2>\n<p sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"164\">Choosing the right router depends on your application's specific communication needs, including factors such as reliability, speed, bidirectional communication, and message brokering capabilities. Each router in the <code sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"164\">OneImx.Terminal</code> framework abstracts the underlying protocol complexities, providing a simplified interface for developers to integrate network communication features seamlessly into their applications.</p>\n",
  "type": "Conceptual",
  "source": {
    "remote": {
      "path": "docfx_project/articles/terminal/concepts/routers.md",
      "branch": "main",
      "repo": "https://github.com/perpetualintelligence/docs"
    },
    "startLine": 0,
    "endLine": 0
  },
  "path": "articles/terminal/concepts/routers.md",
  "documentation": {
    "remote": {
      "path": "docfx_project/articles/terminal/concepts/routers.md",
      "branch": "main",
      "repo": "https://github.com/perpetualintelligence/docs"
    },
    "startLine": 0,
    "endLine": 0
  },
  "_appFaviconPath": "images/favicon.ico",
  "_appFooter": "Copyright &copy; 2019-2025. Perpetual Intelligence&reg; L.L.C. All Rights Reserved.",
  "_appLogoPath": "images/logo.ico",
  "_enableSearch": true,
  "pdf": false,
  "pdfCoverPage": "pdf/cover.html",
  "pdfFileName": "oneimlx.pdf",
  "pdfTocPage": true,
  "_systemKeys": [
    "conceptual",
    "type",
    "source",
    "path",
    "documentation",
    "title",
    "rawTitle",
    "wordCount"
  ],
  "rawTitle": "<h1 id=\"terminal-routers\" sourcefile=\"articles/terminal/concepts/routers.md\" sourcestartlinenumber=\"1\">Terminal Routers</h1>",
  "title": "Terminal Routers",
  "wordCount": 935,
  "_key": "articles/terminal/concepts/routers.md",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../../toc.html",
  "_path": "articles/terminal/concepts/routers.html",
  "_rel": "../../../",
  "_tocKey": "~/articles/toc.yml",
  "_tocPath": "articles/toc.html",
  "_tocRel": "../../toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  },
  "_disableToc": false,
  "docurl": "https://github.com/perpetualintelligence/docs/blob/main/docfx_project/articles/terminal/concepts/routers.md/#L1"
}