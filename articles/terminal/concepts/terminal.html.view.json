{
  "conceptual": "<h2 id=\"terminal\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"1\"><a href=\"xref:OneImlx.Terminal.Runtime.Terminal\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"1\">Terminal</a></h2>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"2\">In <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"2\">OneImlx.Terminal</code> framework, a terminal is a Unicode text-based construct designed for executing commands, automating workflows, and processing scripts. Each terminal session is uniquely identified, allowing for clear differentiation and management of multiple instances.</p>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"4\">A terminal is not just a console; it's a logical construct designed to execute commands and automate tasks. It can be implemented as a console, server, browser-based interface, or any other UX format, making it adaptable for various development environments.</p>\n<h2 id=\"hosting\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"6\"><a href=\"xref:OneImlx.Terminal.Hosting\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"6\">Hosting</a></h2>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"7\">The <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"7\">OneImlx.Terminal</code> framework uses extension methods like <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"7\">&lt;AddTerminal*&gt;</code> or <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"7\">&lt;Add*&gt;</code> for easy setup and terminal customization. It deploys dependency injection at its core to setup and run the terminal host. Developers can utilize the <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"7\">TerminalHostedService</code> to configure services, customize terminal behavior, and ensure smooth execution throughout the terminal's lifecycle. For details refer <a href=\"~/articles/terminal/configuration/services.md\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"7\">services</a>.</p>\n<h2 id=\"configuration\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"9\"><a href=\"xref:OneImlx.Terminal.Configuration.Options.TerminalOptions\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"9\">Configuration</a></h2>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"10\">The <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"10\">OneImlx.Terminal</code> supports flexible configuration via Dependency Injection and the options pattern, enabling customization of terminal behaviors and settings through code, or configuration files. For comprehensive setup instructions, see the <a href=\"~/articles/terminal/configuration/intro.md\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"10\">configuration documentation</a>.</p>\n<h2 id=\"router\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"12\"><a href=\"xref:OneImlx.Terminal.Runtime.ITerminalRouter%601\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"12\">Router</a></h2>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"13\">Terminal router orchestrates the execution within the application context. It starts the host and runs indefinitely until the application stops or a cancellation token is received. Developers can implement the <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"13\">ITerminalRouting&lt;TContext&gt;</code> interface and define the <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"13\">RunAsync</code> method to establish the custom routing logic.</p>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"15\">The framework provides the following ready-to-use router implementations:</p>\n<ul sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"17\">\n<li sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"17\"><xref href=\"OneImlx.Terminal.Runtime.TerminalConsoleRouter\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Runtime.TerminalConsoleRouter\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"17\"></xref>: Suitable for standalone terminal or CLI applications.</li>\n<li sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"18\"><xref href=\"OneImlx.Terminal.Runtime.TerminalTcpRouter\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Runtime.TerminalTcpRouter\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"18\"></xref>: Designed for server terminals managing commands from multiple clients concurrently over TCP/IP.</li>\n<li sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"19\"><xref href=\"OneImlx.Terminal.Runtime.TerminalUdpRouter\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Runtime.TerminalUdpRouter\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"19\"></xref>: Designed for server terminals managing commands from multiple clients concurrently over UDP.</li>\n<li sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"20\"><xref href=\"OneImlx.Terminal.Runtime.TerminalCustomRouter\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Runtime.TerminalCustomRouter\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"20\"></xref>: Allows for custom router strategies.</li>\n</ul>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"22\"><strong sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"22\">Note:</strong> Future versions of the framework will introduce <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"22\">gRPC</code>, <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"22\">HTTP</code> and <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"22\">Apache Pulsar</code> terminal routers.</p>\n<h2 id=\"driver\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"24\"><a href=\"xref:OneImlx.Terminal.Configuration.Options.DriverOptions\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"24\">Driver</a></h2>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"25\">In native console environments, a terminal may act as a driver, allowing for direct command execution, similar to <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"25\">dotnet.exe</code> in the .NET CLI.</p>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"27\">Consider executing the command <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"27\">dotnet build test.csproj --configuration Release</code> directly from the native command prompt:</p>\n<ol sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"29\">\n<li sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"29\">Identify Executable and Root Command: The framework recognizes <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"29\">dotnet.exe</code> as the driver and <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"29\">dotnet</code> as the root command.</li>\n<li sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"30\">Pass Command Line Arguments: The entire string <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"30\">build test.csproj --configuration Release</code> is passed as command line arguments.</li>\n<li sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"31\">Parse Arguments and Options: The framework parses these arguments and options.</li>\n<li sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"32\">Execute Command: Ultimately, the <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"32\">build</code> command is executed with the specified project file and configuration.</li>\n</ol>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"34\">To enable this functionality, configure the <xref href=\"OneImlx.Terminal.Configuration.Options.DriverOptions\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Configuration.Options.DriverOptions\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"34\"></xref> in your terminal settings. Utilize the <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"34\">Enabled</code> property to toggle the driver functionality on or off.</p>\n<blockquote sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"36\">\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"36\"><strong sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"36\">Note</strong>: This feature is an enhancement and being tracked by <a href=\"https://github.com/perpetualintelligence/terminal/issues/107\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"36\">github issue</a>.</p>\n</blockquote>\n<h2 id=\"events\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"38\"><a href=\"xref:OneImlx.Terminal.Events.ITerminalEventHandler\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"38\">Events</a></h2>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"39\">Events play an important role in extending and customizing the behavior of the terminal to meet specific application requirements. Events are hooks that allow developers to inject custom logic and asynchronous operations at various stages of command routing.</p>\n<ul sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"41\">\n<li sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"41\"><code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"41\">BeforeCommandRouteAsync</code>: Called before the command routing process begins.</li>\n<li sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"42\"><code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"42\">AfterCommandRouteAsync</code>: Called after the command routing process completes.</li>\n<li sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"43\"><code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"43\">BeforeCommandRunAsync</code>: Called before a command starts execution.</li>\n<li sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"44\"><code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"44\">AfterCommandRunAsync</code>: Called after a command finishes execution.</li>\n<li sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"45\"><code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"45\">BeforeCommandCheckAsync</code>: Called before a command's integrity check.</li>\n<li sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"46\"><code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"46\">AfterCommandCheckAsync</code>: Called after a command's integrity check completes.</li>\n</ul>\n<h2 id=\"integration\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"48\"><a href=\"xref:OneImlx.Terminal.Integration\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"48\">Integration</a></h2>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"49\">The <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"49\">OneImlx.Terminal</code> framework enables developers to seamlessly integrate both first-party and third-party command sources. A command source is a provider of terminal commands. It can be a local or remote source. By default, the framework supports assembly loader command source that dynamically loads DLLs containing command runners.</p>\n<h2 id=\"stores\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"51\"><a href=\"xref:OneImlx.Terminal.Stores\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"51\">Stores</a></h2>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"52\">The <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"52\">OneImlx.Terminal</code> framework manages <xref href=\"OneImlx.Terminal.Commands.CommandDescriptor\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Commands.CommandDescriptor\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"52\"></xref> instances through stores. The <xref href=\"OneImlx.Terminal.Stores.ITerminalCommandStore\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Stores.ITerminalCommandStore\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"52\"></xref> interface provides methods for adding, finding, and retrieving command descriptors asynchronously.</p>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"54\">Developers can use the default <xref href=\"OneImlx.Terminal.Stores.TerminalInMemoryCommandStore\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Stores.TerminalInMemoryCommandStore\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"54\"></xref> or create custom store implementations to meet specific requirements.</p>\n<h2 id=\"internationalization\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"56\"><a href=\"xref:OneImlx.Terminal.Runtime.ITerminalTextHandler\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"56\">Internationalization</a></h2>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"57\">The <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"57\">OneImlx.Terminal</code> framework supports internationalization with <xref href=\"OneImlx.Terminal.Runtime.ITerminalTextHandler\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Runtime.ITerminalTextHandler\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"57\"></xref>, offering Unicode and ASCII encoding options. This interface handles text comparisons and encoding, simplifying the development of applications that require multilingual support. See the <xref href=\"OneImlx.Terminal.Runtime.TerminalUnicodeTextHandler\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Runtime.TerminalUnicodeTextHandler\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"57\"></xref> and <xref href=\"OneImlx.Terminal.Runtime.TerminalAsciiTextHandler\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Runtime.TerminalAsciiTextHandler\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"57\"></xref> for more details.</p>\n<h2 id=\"exception-handling\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"59\"><a href=\"xref:OneImlx.Terminal.Runtime.ITerminalExceptionHandler\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"59\">Exception Handling</a></h2>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"60\">The <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"60\">OneImlx.Terminal</code> provides exception handling through the <xref href=\"OneImlx.Terminal.Runtime.ITerminalExceptionHandler\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Runtime.ITerminalExceptionHandler\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"60\"></xref>. The default implementation <xref href=\"OneImlx.Terminal.Runtime.TerminalExceptionHandler\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Runtime.TerminalExceptionHandler\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"60\"></xref> logs the exception based on severity.</p>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"62\">Developers can implement the interface to create custom exception handlers, enabling tailored error management and logging in their applications.</p>\n<h2 id=\"console-abstraction\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"64\"><a href=\"xref:OneImlx.Terminal.Runtime.ITerminalConsole\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"64\">Console Abstraction</a></h2>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"65\">The <code sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"65\">OneImlx.Terminal</code> framework provides console abstraction <xref href=\"OneImlx.Terminal.Runtime.ITerminalConsole\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Runtime.ITerminalConsole\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"65\"></xref>. It enables developers to create custom console implementations such as web-based or multi-platform consoles.</p>\n<p sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"67\">The framework offers default implementations <xref href=\"OneImlx.Terminal.Runtime.TerminalSystemConsole\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Runtime.TerminalSystemConsole\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"67\"></xref> for standard .NET System Console, and <xref href=\"OneImlx.Terminal.Runtime.TerminalNoConsole\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Runtime.TerminalNoConsole\" sourcefile=\"articles/terminal/concepts/terminal.md\" sourcestartlinenumber=\"67\"></xref> for non-interactive console.</p>\n",
  "type": "Conceptual",
  "source": {
    "remote": {
      "path": "docfx_project/articles/terminal/concepts/terminal.md",
      "branch": "main",
      "repo": "https://github.com/perpetualintelligence/docs"
    },
    "startLine": 0,
    "endLine": 0
  },
  "path": "articles/terminal/concepts/terminal.md",
  "documentation": {
    "remote": {
      "path": "docfx_project/articles/terminal/concepts/terminal.md",
      "branch": "main",
      "repo": "https://github.com/perpetualintelligence/docs"
    },
    "startLine": 0,
    "endLine": 0
  },
  "_appFaviconPath": "images/favicon.ico",
  "_appFooter": "Copyright &copy; 2019-2025. Perpetual Intelligence&reg; L.L.C. All Rights Reserved.",
  "_appLogoPath": "images/logo.ico",
  "_enableSearch": true,
  "pdf": false,
  "pdfCoverPage": "pdf/cover.html",
  "pdfFileName": "oneimlx.pdf",
  "pdfTocPage": true,
  "_systemKeys": [
    "conceptual",
    "type",
    "source",
    "path",
    "documentation",
    "title",
    "rawTitle",
    "wordCount"
  ],
  "rawTitle": "",
  "title": null,
  "wordCount": 673,
  "_key": "articles/terminal/concepts/terminal.md",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../../toc.html",
  "_path": "articles/terminal/concepts/terminal.html",
  "_rel": "../../../",
  "_tocKey": "~/articles/toc.yml",
  "_tocPath": "articles/toc.html",
  "_tocRel": "../../toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  },
  "_disableToc": false,
  "docurl": "https://github.com/perpetualintelligence/docs/blob/main/docfx_project/articles/terminal/concepts/terminal.md/#L1"
}