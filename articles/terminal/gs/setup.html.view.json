{
  "conceptual": "\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"2\">Ensure you have your license file ready. Follow these steps to set up your terminal application with the <code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"2\">OneImlx.Terminal</code> framework.</p>\n<h2 id=\"test-application\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"4\">Test Application</h2>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"5\">Our test application demonstrates the <code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"5\">OneImlx.Terminal</code> framework. It's suitable for learning and building terminal applications.</p>\n<h3 id=\"summary\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"7\">Summary</h3>\n<ol sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"8\">\n<li sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"8\">Browse <a href=\"https://github.com/perpetualintelligence/terminal/apps\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"8\">test application</a></li>\n<li sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"9\">Clone the <code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"9\">apps</code> folder</li>\n<li sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"10\">Replace our internal development license with your demo or commercial license.</li>\n<li sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"11\">Remove the conditional <code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"11\">&lt;ProjectReference&gt;</code> in .csproj and use NuGet <code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"11\">&lt;PackageReference&gt;</code>.</li>\n<li sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"12\">Build and test the code</li>\n</ol>\n<h2 id=\"details\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"14\">Details</h2>\n<h3 id=\"1-install-nuget-packages\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"16\">1. Install NuGet Packages</h3>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"17\">You install the framework through NuGet packages. The core functionality is available via the <code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"17\">OneImlx.Terminal</code> package. For scenarios requiring secured command execution, the <code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"17\">OneImlx.Terminal.Authentication</code> package extends the framework with authentication capabilities. You may choose either package based on your needs.</p>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"19\"><a href=\"https://www.nuget.org/packages/OneImlx.Terminal\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"19\"><img src=\"https://img.shields.io/nuget/vpre/OneImlx.Terminal?label=OneImlx.Terminal\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"19\" alt=\"NuGet\"></a>\n<a href=\"https://www.nuget.org/packages/OneImlx.Terminal.Authentication\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"20\"><img src=\"https://img.shields.io/nuget/vpre/OneImlx.Terminal?label=OneImlx.Terminal.Authentication\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"20\" alt=\"NuGet\"></a></p>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"22\">Apart from that you will need the following NuGet packages:</p>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"24\"><a href=\"https://www.nuget.org/packages/Microsoft.Extensions.Hosting\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"24\"><img src=\"https://img.shields.io/nuget/v/Microsoft.Extensions.Hosting?label=Microsoft.Extensions.Hosting\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"24\" alt=\"NuGet\"></a></p>\n<blockquote sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"26\">\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"26\"><strong sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"26\">Note</strong>: Remove the entire <code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"26\">DEV CONFIG:</code> from the the .csproj file and add our NuGet package directly. The <code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"26\">&lt;ProjectReference&gt;</code> is for our internal development.</p>\n</blockquote>\n<pre><code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"28\">    &lt;!--\n        DEV CONFIG: REMOVE THIS SECTION IN YOUR APP AND ONLY ADD NUGET PACKAGE REFERENCE\n    --&gt;\n    &lt;Choose&gt;\n        &lt;When Condition=&quot;'$(PI_CI_REFERENCE)'=='cross'&quot;&gt;\n            &lt;ItemGroup&gt;\n                &lt;ProjectReference Include=&quot;..\\..\\src\\OneImlx.Terminal.Authentication\\OneImlx.Terminal.Authentication.csproj&quot; /&gt;\n            &lt;/ItemGroup&gt;\n        &lt;/When&gt;\n        &lt;Otherwise&gt;\n            &lt;ItemGroup&gt;\n                &lt;PackageReference Include=&quot;OneImlx.Terminal.Authentication&quot; Version=&quot;5.10.1-rc.114243041&quot; /&gt;\n            &lt;/ItemGroup&gt;\n        &lt;/Otherwise&gt;\n    &lt;/Choose&gt;\n</code></pre>\n<h3 id=\"2-add-hosted-service\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"46\">2. Add Hosted Service</h3>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"47\">The <xref href=\"OneImlx.Terminal.Hosting.TerminalHostedService\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Hosting.TerminalHostedService\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"47\"></xref> is a hosted service that manages terminal lifetime, performs licensing and configuration checks, and enables terminal UX customization.</p>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"49\">The below image shows the default console view when you run the test application.\n<img src=\"~/images/terminal/apps/add-hosted-service.png\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"50\" alt=\"HostedService\"></p>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"52\">You can customize the terminal behavior by overriding the methods from <xref href=\"OneImlx.Terminal.Hosting.TerminalHostedService\" data-throw-if-not-resolved=\"False\" data-raw-source=\"@OneImlx.Terminal.Hosting.TerminalHostedService\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"52\"></xref>.</p>\n<pre><code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"53\">using Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing OneImlx.Terminal.Configuration.Options;\nusing OneImlx.Terminal.Hosting;\nusing OneImlx.Terminal.Licensing;\nusing OneImlx.Terminal.Runtime;\n\nnamespace OneImlx.Terminal.Apps.TestApp\n{\n    /// &lt;summary&gt;\n    /// The &lt;see cref=&quot;TerminalHostedService&quot;/&gt; for the test app.\n    /// &lt;/summary&gt;\n    public sealed class TestAppHostedService : TerminalHostedService\n    {\n        /// &lt;summary&gt;\n        /// Initializes a new instance.\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;serviceProvider&quot;&gt;The DI service provider.&lt;/param&gt;\n        /// &lt;param name=&quot;options&quot;&gt;The terminal configuration options.&lt;/param&gt;\n        /// &lt;param name=&quot;terminalConsole&quot;&gt;The terminal console.&lt;/param&gt;\n        /// &lt;param name=&quot;logger&quot;&gt;The logger.&lt;/param&gt;\n        public TestAppHostedService(\n            IServiceProvider serviceProvider,\n            TerminalOptions options,\n            ITerminalConsole terminalConsole,\n            ILogger&lt;TerminalHostedService&gt; logger) : base(serviceProvider, options, terminalConsole, logger)\n        {\n        }\n\n        /// &lt;summary&gt;\n        /// Perform custom configuration option checks at startup.\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;options&quot;&gt;&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        protected override Task CheckHostApplicationConfigurationAsync(TerminalOptions options)\n        {\n            return Task.CompletedTask;\n        }\n\n        /// &lt;summary&gt;\n        /// The &lt;see cref=&quot;IHostApplicationLifetime.ApplicationStarted&quot;/&gt; handler.\n        /// &lt;/summary&gt;\n        protected override void OnStarted()\n        {\n            // These are async calls, but we are blocking here for as the  of the test.\n            TerminalConsole.WriteLineAsync(&quot;Application started on {0}.&quot;, DateTime.UtcNow.ToLocalTime().ToString()).Wait();\n        }\n\n        /// &lt;summary&gt;\n        /// The &lt;see cref=&quot;IHostApplicationLifetime.ApplicationStopped&quot;/&gt; handler.\n        /// &lt;/summary&gt;\n        protected override void OnStopped()\n        {\n            TerminalConsole.WriteLineColorAsync(ConsoleColor.Red, &quot;Application stopped on {0}.&quot;, DateTime.UtcNow.ToLocalTime().ToString()).Wait();\n        }\n\n        /// &lt;summary&gt;\n        /// The &lt;see cref=&quot;IHostApplicationLifetime.ApplicationStopping&quot;/&gt; handler.\n        /// &lt;/summary&gt;\n        protected override void OnStopping()\n        {\n            TerminalConsole.WriteLineAsync(&quot;Stopping application...&quot;).Wait();\n        }\n\n        /// &lt;summary&gt;\n        /// Print &lt;c&gt;cli&lt;/c&gt; terminal header.\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        protected override async Task PrintHostApplicationHeaderAsync()\n        {\n            await TerminalConsole.WriteLineAsync(&quot;---------------------------------------------------------------------------------------------&quot;);\n            await TerminalConsole.WriteLineAsync(&quot;Copyright (c) Test App. All Rights Reserved.&quot;);\n            await TerminalConsole.WriteLineAsync(&quot;For license, terms, and data policies, go to:&quot;);\n            await TerminalConsole.WriteLineAsync(&quot;https://mytestapp.com&quot;);\n            await TerminalConsole.WriteLineAsync(&quot;---------------------------------------------------------------------------------------------&quot;);\n\n            await TerminalConsole.WriteLineAsync(&quot;Starting application...&quot;);\n        }\n\n        /// &lt;summary&gt;\n        /// Print host application licensing information.\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;license&quot;&gt;The extracted license.&lt;/param&gt;\n        /// &lt;returns&gt;&lt;/returns&gt;\n        protected override Task PrintHostApplicationLicensingAsync(License license)\n        {\n            // Print custom licensing info or remove it completely.\n            return base.PrintHostApplicationLicensingAsync(license);\n        }\n    }\n}\n</code></pre>\n<h3 id=\"3-setup-programcs\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"147\">3. Setup Program.cs</h3>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"149\">The Main method in Program.cs sets up the <code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"149\">OneImlx.Terminal</code> framework and initiates the default console router, which then asynchronously processes and executes user-issued commands. It also configures cancellation tokens to terminate specific commands or the entire application as needed.</p>\n<pre><code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"151\">private static async Task Main(string[] args)\n{\n    // Allow cancellation for the entire terminal or individual commands.\n    CancellationTokenSource terminaTokenSource = new();\n    CancellationTokenSource commandTokenSource = new();\n\n    // Setup and start the host builder.\n    // Note: The host should only start, the terminal framework will run the router separately.\n    IHostBuilder hostBuilder = CreateHostBuilder(args);\n    hostBuilder.ConfigureServices(ConfigureServicesDelegate);\n    hostBuilder.ConfigureLogging(ConfigureLoggingDelegate);\n    IHost host = hostBuilder.Start();\n\n    // Setup the terminal context and run the console router indefinitely.\n    TerminalStartContext terminalStartContext = new(TerminalStartMode.Console, terminaTokenSource.Token, commandTokenSource.Token);\n    TerminalConsoleRouterContext consoleRouterContext = new(terminalStartContext);\n    await host.RunTerminalRouterAsync&lt;TerminalConsoleRouter, TerminalConsoleRouterContext&gt;(consoleRouterContext);\n}\n</code></pre>\n<blockquote sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"172\">\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"172\">Note:\nYou can also configure your terminal as a server that employs TCP or UDP routers to process and execute commands in a service-to-service architecture.</p>\n</blockquote>\n<h3 id=\"4-configure-services-and-options\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"175\">4. Configure Services and Options</h3>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"176\">The <code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"176\">OneImlx.Terminal</code> framework leverages the modern Dependency Injection (DI) and Options pattern to streamline setup and customization.</p>\n<h4 id=\"configure-logging\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"178\">Configure Logging</h4>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"179\"><code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"179\">ConfigureLoggingDelegate</code> acts as a customizable method for setting up logging. Below is an example showing how to configure <a href=\"https://serilog.net/\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"179\">Serilog</a> as the logging solution.</p>\n<pre><code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"181\">private static void ConfigureLoggingDelegate(HostBuilderContext context, ILoggingBuilder builder)\n{\n    // Clear all providers\n    builder.ClearProviders();\n\n    // Configure logging of your choice, here we are configuring Serilog\n    var loggerConfig = new LoggerConfiguration();\n    loggerConfig.MinimumLevel.Error();\n    loggerConfig.WriteTo.Console();\n    Log.Logger = loggerConfig.CreateLogger();\n    builder.AddSerilog(Log.Logger);\n}\n</code></pre>\n<h4 id=\"configure-services\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"196\">Configure Services</h4>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"197\"><code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"197\">ConfigureServicesDelegate</code> acts as a customizable method for integrating all necessary services for your terminal application. To specifically configure the <code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"197\">OneImlx.Terminal</code> framework, utilize the <code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"197\">ConfigureOneImlxTerminal</code> method.</p>\n<pre><code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"199\">private static void ConfigureServicesDelegate(HostBuilderContext context, IServiceCollection services)\n{\n    // Disable hosting status message\n    services.Configure&lt;ConsoleLifetimeOptions&gt;(options =&gt;\n    {\n        options.SuppressStatusMessages = true;\n    });\n\n    // Configure OneImlx.Terminal services\n    ConfigureOneImlxTerminal(services);\n            \n    // Configure other services\n}\n</code></pre>\n<h4 id=\"configure-framework\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"215\">Configure Framework</h4>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"216\"><code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"216\">ConfigureOneImlxTerminal</code> configures the <code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"216\">OneImlx.Terminal</code> framework for console mode with a demo license. It registers a hosted service to manage the terminal's lifecycle, initializes HTTP client for demo license, and sets the licensed application identifier, license file path, and command prompt symbol.</p>\n<blockquote sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"218\">\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"218\"><strong sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"218\">Note:</strong> Please ensure you set your application identifier and the path to your demo license.</p>\n</blockquote>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"220\">For more information, see all the supported <a href=\"~/articles/terminal/configuration/services.md\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"220\">terminal services</a>, <a href=\"~/articles/terminal/configuration/options.md\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"220\">configuration options</a> and <a href=\"~/articles/terminal/concepts/routers.md\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"220\">terminal routers</a></p>\n<pre><code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"222\">private static void ConfigureOneImlxTerminal(IServiceCollection collection)\n{\n    // Configure the hosted service\n    collection.AddHostedService&lt;TestAppHostedService&gt;();\n\n    // We are using online license so configure HTTP client\n    collection.AddHttpClient(&quot;demo-http&quot;);\n\n    // Specific your demo or commercial license file.\n    // Note: Replace with your license file.\n    ITerminalBuilder terminalBuilder = collection.AddTerminalConsole&lt;TerminalInMemoryCommandStore, TerminalUnicodeTextHandler, TerminalHelpConsoleProvider, TerminalSystemConsole&gt;(new TerminalUnicodeTextHandler(),\n        options =&gt;\n        {\n            options.Id = TerminalIdentifiers.TestApplicationId;\n            options.Licensing.LicenseFile = &quot;C:\\\\lic\\\\demo.json&quot;;\n            options.Router.Caret = &quot;&gt; &quot;;\n        }\n    );\n\n    // Add commands using declarative syntax\n    terminalBuilder.AddDeclarativeAssembly&lt;TestRunner&gt;();\n}\n</code></pre>\n<h3 id=\"5-add-descriptors-and-runners\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"247\">5. Add Descriptors and Runners</h3>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"248\">The test application includes a Runners folder that defines all the runners. Each runner defines a command descriptor, arguments, and options or flags.</p>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"250\">You can use declarative syntax to define the descriptor's attributes directly on each command runner, or you can use explicit extension methods to register the command descriptor and runners.</p>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"252\"><img src=\"~/images/terminal/apps/runners.png\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"252\" alt=\"Runners\"></p>\n<h3 id=\"6-start-terminal-router\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"254\">6. Start Terminal Router</h3>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"255\">Building and launching the test application with the terminal console router completes the setup, a task already accomplished in the Main method.</p>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"257\">The following image displays executing a test command from the user-entered command string.</p>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"259\"><img src=\"~/images/terminal/apps/start-router.png\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"259\" alt=\"StartRouter\"></p>\n<h3 id=\"7-stop-terminal-router\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"261\">7. Stop Terminal Router</h3>\n<p sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"262\">You have several methods to stop the terminal router, either explicitly or programmatically:</p>\n<ul sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"263\">\n<li sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"263\">Send the standard <code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"263\">CTRL+C</code> signal to the hosted service/console.</li>\n<li sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"264\">Define an <code sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"264\">exit</code> command that triggers cancellation.</li>\n<li sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"265\">Issue a cancellation token programmatically from within the application.</li>\n</ul>\n",
  "type": "Conceptual",
  "source": {
    "remote": {
      "path": "docfx_project/articles/terminal/gs/setup.md",
      "branch": "main",
      "repo": "https://github.com/perpetualintelligence/docs"
    },
    "startLine": 0,
    "endLine": 0
  },
  "path": "articles/terminal/gs/setup.md",
  "documentation": {
    "remote": {
      "path": "docfx_project/articles/terminal/gs/setup.md",
      "branch": "main",
      "repo": "https://github.com/perpetualintelligence/docs"
    },
    "startLine": 0,
    "endLine": 0
  },
  "_appFaviconPath": "images/favicon.ico",
  "_appFooter": "Copyright &copy; 2019-2025. Perpetual Intelligence&reg; L.L.C. All Rights Reserved.",
  "_appLogoPath": "images/logo.ico",
  "_enableSearch": true,
  "pdf": false,
  "pdfCoverPage": "pdf/cover.html",
  "pdfFileName": "oneimlx.pdf",
  "pdfTocPage": true,
  "_systemKeys": [
    "conceptual",
    "type",
    "source",
    "path",
    "documentation",
    "title",
    "rawTitle",
    "wordCount"
  ],
  "rawTitle": "<h1 id=\"setup\" sourcefile=\"articles/terminal/gs/setup.md\" sourcestartlinenumber=\"1\">Setup</h1>",
  "title": "Setup",
  "wordCount": 1059,
  "_key": "articles/terminal/gs/setup.md",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../../toc.html",
  "_path": "articles/terminal/gs/setup.html",
  "_rel": "../../../",
  "_tocKey": "~/articles/toc.yml",
  "_tocPath": "articles/toc.html",
  "_tocRel": "../../toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  },
  "_disableToc": false,
  "docurl": "https://github.com/perpetualintelligence/docs/blob/main/docfx_project/articles/terminal/gs/setup.md/#L1"
}