{
  "README.html": {
    "href": "README.html",
    "title": "README",
    "summary": "README The DocFX project powers the creation of the documentation website for our managed services, cross-platform frameworks, and developer tools. Audience This README.md documentation is intended for our internal developers. Setup Download the source repositories before proceeding with the DocFX setup. To set up DocFX on your local development machine, follow these steps. Visit DocFX's official website. Navigate to the Download page and select the latest stable release (e.g., Version 2.70.x). Download the docfx.zip file and extract its contents to a designated folder, which will become your DocFX root directory. Copy all scripts from the ../build/scripts folder to your DocFX root directory. Add your DocFX root directory to your system's %PATH% environment variable. Download and install the latest stable release of wkhtmltopdf. Add the wkhtmltopdf executable's folder (e.g., C:\\Program Files\\wkhtmltopdf\\bin) to your %PATH% environment variable. You can now use DocFX commands within Visual Studio's Terminal to build (b), generate metadata (m), start a local server (s), or build and start (bs) the documentation website on your localhost. Note: These scripts assume that your documentation project resides within the docfx_project directory. CICD The ../.github/workflows directory contains actions for building and publishing the documentation. Important: Deploying the documentation is a manual process. We build the documentation site from both public and private GitHub repositories. Consequently, we cannot configure a CICD pipeline that accommodates all contributors. The build and deployment processes include: build-test-publish: This manually triggered pipeline builds the documentation and pushes the contents of the _site directory to the gh-pages branch. Automated Pipeline: GitHub's automated pipeline builds from the gh-pages branch and deploys the static content to docs.perpetualintelligence.com. Each build and deployment will trigger an approval process. Feedback For any issues, suggestions, or feature requests, please submit them via our GitHub issues page."
  },
  "about.html": {
    "href": "about.html",
    "title": "About Us",
    "summary": "About Us Microsoft Partner Our Mission Delivering adaptable frameworks and solutions across diverse platforms and programming languages within the .NET ecosystem. Who We Are Perpetual Intelligence® L.L.C. is a team of developers and designers committed to providing the .NET ecosystem with adaptable frameworks, aiding the development community in building robust applications on various platforms. Feedback Your input is invaluable to us and the wider development community. For questions, feedback, or support, feel free to raise an issue or submit a feature request on our GitHub repository. Copyright © 2023 Perpetual Intelligence® L.L.C. All Rights Reserved. Terms | Website | Consumer Portal | GitHub"
  },
  "api/OneImlx.Shared.Attributes.ActionAttribute.html": {
    "href": "api/OneImlx.Shared.Attributes.ActionAttribute.html",
    "title": "Class ActionAttribute",
    "summary": "Class ActionAttribute Namespace OneImlx.Shared.Attributes Assembly OneImlx.Shared.dll An actionable attribute. public abstract class ActionAttribute : Attribute Inheritance object Attribute ActionAttribute Derived ArchitectureAttribute ConceptAttribute FutureAttribute PerformanceAttribute RefactorAttribute WriteApiAttribute WriteDocumentationAttribute WriteIntegrationTestAttribute WriteUnitTestAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ActionAttribute() Initialize a new instance. protected ActionAttribute() ActionAttribute(string) Initialize a new instance. protected ActionAttribute(string description) Parameters description string Exceptions ArgumentNullException Properties Assignee The action assignee. public string? Assignee { get; set; } Property Value string Description The description. public string? Description { get; set; } Property Value string Severity The severity. public string? Severity { get; set; } Property Value string Version The version to address an action. public string? Version { get; set; } Property Value string"
  },
  "api/OneImlx.Shared.Attributes.ArchitectureAttribute.html": {
    "href": "api/OneImlx.Shared.Attributes.ArchitectureAttribute.html",
    "title": "Class ArchitectureAttribute",
    "summary": "Class ArchitectureAttribute Namespace OneImlx.Shared.Attributes Assembly OneImlx.Shared.dll Specifies that the target has an architectural comment that may be resolved in future releases. Applications can use the target element, but the design may change in future releases including breaking changes. [AttributeUsage(AttributeTargets.All, Inherited = false, AllowMultiple = true)] public sealed class ArchitectureAttribute : ActionAttribute Inheritance object Attribute ActionAttribute ArchitectureAttribute Inherited Members ActionAttribute.Assignee ActionAttribute.Description ActionAttribute.Severity ActionAttribute.Version Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ArchitectureAttribute(string) Initialize a new instance. public ArchitectureAttribute(string description) Parameters description string The description."
  },
  "api/OneImlx.Shared.Attributes.ConceptAttribute.html": {
    "href": "api/OneImlx.Shared.Attributes.ConceptAttribute.html",
    "title": "Class ConceptAttribute",
    "summary": "Class ConceptAttribute Namespace OneImlx.Shared.Attributes Assembly OneImlx.Shared.dll Indicates that the target element represents a concept. [AttributeUsage(AttributeTargets.All, AllowMultiple = true, Inherited = false)] public sealed class ConceptAttribute : ActionAttribute Inheritance object Attribute ActionAttribute ConceptAttribute Inherited Members ActionAttribute.Assignee ActionAttribute.Description ActionAttribute.Severity ActionAttribute.Version Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ConceptAttribute(string) Initialize a new instance. public ConceptAttribute(string description) Parameters description string Additional description."
  },
  "api/OneImlx.Shared.Attributes.FutureAttribute.html": {
    "href": "api/OneImlx.Shared.Attributes.FutureAttribute.html",
    "title": "Class FutureAttribute",
    "summary": "Class FutureAttribute Namespace OneImlx.Shared.Attributes Assembly OneImlx.Shared.dll Indicates a future capability or a feature request. [AttributeUsage(AttributeTargets.All, AllowMultiple = true, Inherited = false)] public sealed class FutureAttribute : ActionAttribute Inheritance object Attribute ActionAttribute FutureAttribute Inherited Members ActionAttribute.Assignee ActionAttribute.Description ActionAttribute.Severity ActionAttribute.Version Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors FutureAttribute(string) Initialize a new instance. public FutureAttribute(string description) Parameters description string Additional description."
  },
  "api/OneImlx.Shared.Attributes.InternalInfrastructureAttribute.html": {
    "href": "api/OneImlx.Shared.Attributes.InternalInfrastructureAttribute.html",
    "title": "Class InternalInfrastructureAttribute",
    "summary": "Class InternalInfrastructureAttribute Namespace OneImlx.Shared.Attributes Assembly OneImlx.Shared.dll Indicates that the target is part of the internal infrastructure. Application should not use the target directly. [AttributeUsage(AttributeTargets.All, Inherited = false, AllowMultiple = true)] public sealed class InternalInfrastructureAttribute : Attribute Inheritance object Attribute InternalInfrastructureAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors InternalInfrastructureAttribute(string?) Initializes a new instance. public InternalInfrastructureAttribute(string? description = null) Parameters description string Additional description. Properties Description Additional description. public string? Description { get; set; } Property Value string"
  },
  "api/OneImlx.Shared.Attributes.PerformanceAttribute.html": {
    "href": "api/OneImlx.Shared.Attributes.PerformanceAttribute.html",
    "title": "Class PerformanceAttribute",
    "summary": "Class PerformanceAttribute Namespace OneImlx.Shared.Attributes Assembly OneImlx.Shared.dll Specifies that the target has a performance comment that may be resolved in future releases. Applications can use the target element, but the design may change in future releases including breaking changes. [AttributeUsage(AttributeTargets.All, Inherited = false, AllowMultiple = true)] public sealed class PerformanceAttribute : ActionAttribute Inheritance object Attribute ActionAttribute PerformanceAttribute Inherited Members ActionAttribute.Assignee ActionAttribute.Description ActionAttribute.Severity ActionAttribute.Version Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PerformanceAttribute(string) Initialize a new instance. public PerformanceAttribute(string description) Parameters description string"
  },
  "api/OneImlx.Shared.Attributes.RefactorAttribute.html": {
    "href": "api/OneImlx.Shared.Attributes.RefactorAttribute.html",
    "title": "Class RefactorAttribute",
    "summary": "Class RefactorAttribute Namespace OneImlx.Shared.Attributes Assembly OneImlx.Shared.dll Specifies that the target should be re-factored. Applications can use the target element, but the design may change in future releases including breaking changes. [AttributeUsage(AttributeTargets.All, Inherited = false, AllowMultiple = true)] public sealed class RefactorAttribute : ActionAttribute Inheritance object Attribute ActionAttribute RefactorAttribute Inherited Members ActionAttribute.Assignee ActionAttribute.Description ActionAttribute.Severity ActionAttribute.Version Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors RefactorAttribute(string) Initialize a new instance. public RefactorAttribute(string description) Parameters description string"
  },
  "api/OneImlx.Shared.Attributes.Validation.EmailListAttribute.html": {
    "href": "api/OneImlx.Shared.Attributes.Validation.EmailListAttribute.html",
    "title": "Class EmailListAttribute",
    "summary": "Class EmailListAttribute Namespace OneImlx.Shared.Attributes.Validation Assembly OneImlx.Shared.dll Specifies that a data field value is a list of well formed emails. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field|AttributeTargets.Parameter, AllowMultiple = false)] public class EmailListAttribute : ValidationAttribute Inheritance object Attribute ValidationAttribute EmailListAttribute Inherited Members ValidationAttribute.FormatErrorMessage(string) ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.ErrorMessageString ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsValid(object?) public override bool IsValid(object? value) Parameters value object Returns bool IsValid(object?, ValidationContext) Validates the specified value with respect to the current validation attribute. protected override ValidationResult? IsValid(object? value, ValidationContext validationContext) Parameters value object The value to validate. validationContext ValidationContext The context information about the validation operation. Returns ValidationResult An instance of the ValidationResult."
  },
  "api/OneImlx.Shared.Attributes.Validation.OneOfAttribute.html": {
    "href": "api/OneImlx.Shared.Attributes.Validation.OneOfAttribute.html",
    "title": "Class OneOfAttribute",
    "summary": "Class OneOfAttribute Namespace OneImlx.Shared.Attributes.Validation Assembly OneImlx.Shared.dll Specifies the allowed values for a property or a field. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false, Inherited = false)] public sealed class OneOfAttribute : ValidationAttribute Inheritance object Attribute ValidationAttribute OneOfAttribute Inherited Members ValidationAttribute.FormatErrorMessage(string) ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.IsValid(object) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OneOfAttribute(params object?[]) Initializes a new instance with the specified allowed values. public OneOfAttribute(params object?[] allowedValues) Parameters allowedValues object[] Allowed values Properties AllowedValues The allowed values. public object?[] AllowedValues { get; } Property Value object[] Methods IsValid(object?, ValidationContext) Validates the specified value with respect to the current validation attribute. protected override ValidationResult? IsValid(object? value, ValidationContext validationContext) Parameters value object The value to validate. validationContext ValidationContext The context information about the validation operation. Returns ValidationResult An instance of the ValidationResult."
  },
  "api/OneImlx.Shared.Attributes.Validation.SelectItemAttribute.html": {
    "href": "api/OneImlx.Shared.Attributes.Validation.SelectItemAttribute.html",
    "title": "Class SelectItemAttribute",
    "summary": "Class SelectItemAttribute Namespace OneImlx.Shared.Attributes.Validation Assembly OneImlx.Shared.dll Specifies the allowed string values on the property. [AttributeUsage(AttributeTargets.Property, AllowMultiple = true, Inherited = false)] [Refactor(\"Move this to rendering.\")] public class SelectItemAttribute : Attribute Inheritance object Attribute SelectItemAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SelectItemAttribute(string, string?) public SelectItemAttribute(string name, string? value) Parameters name string value string Properties Description Item display description. public string? Description { get; set; } Property Value string Disabled Item disability. public bool Disabled { get; } Property Value bool Name Item display name. public string Name { get; } Property Value string Obsolete The item value is obsolete. public bool Obsolete { get; set; } Property Value bool Value Item value. public string? Value { get; } Property Value string"
  },
  "api/OneImlx.Shared.Attributes.Validation.StringLengthListAttribute.html": {
    "href": "api/OneImlx.Shared.Attributes.Validation.StringLengthListAttribute.html",
    "title": "Class StringLengthListAttribute",
    "summary": "Class StringLengthListAttribute Namespace OneImlx.Shared.Attributes.Validation Assembly OneImlx.Shared.dll Specifies the minimum and maximum length of characters that are allowed in each data field of a list. public class StringLengthListAttribute : StringLengthAttribute Inheritance object Attribute ValidationAttribute StringLengthAttribute StringLengthListAttribute Inherited Members StringLengthAttribute.FormatErrorMessage(string) StringLengthAttribute.MaximumLength StringLengthAttribute.MinimumLength ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.ErrorMessageString ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StringLengthListAttribute(int) Initialize a new instance. public StringLengthListAttribute(int maximumLength) Parameters maximumLength int The maximum length of each data field of a list. Methods IsValid(object?) Determines whether a specified value is valid. public override bool IsValid(object? value) Parameters value object The value to check. Returns bool true if the specified value is valid; otherwise, false. IsValid(object?, ValidationContext) Validates the specified value with respect to the current validation attribute. protected override ValidationResult? IsValid(object? value, ValidationContext validationContext) Parameters value object The value to validate. validationContext ValidationContext The context information about the validation operation. Returns ValidationResult An instance of the ValidationResult."
  },
  "api/OneImlx.Shared.Attributes.Validation.UrlListAttribute.html": {
    "href": "api/OneImlx.Shared.Attributes.Validation.UrlListAttribute.html",
    "title": "Class UrlListAttribute",
    "summary": "Class UrlListAttribute Namespace OneImlx.Shared.Attributes.Validation Assembly OneImlx.Shared.dll Specifies that a data field value is a list of well formed URL. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field|AttributeTargets.Parameter, AllowMultiple = false)] public class UrlListAttribute : ValidationAttribute Inheritance object Attribute ValidationAttribute UrlListAttribute Inherited Members ValidationAttribute.FormatErrorMessage(string) ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.IsValid(object, ValidationContext) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.ErrorMessageString ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsValid(object?) public override bool IsValid(object? value) Parameters value object Returns bool"
  },
  "api/OneImlx.Shared.Attributes.Validation.html": {
    "href": "api/OneImlx.Shared.Attributes.Validation.html",
    "title": "Namespace OneImlx.Shared.Attributes.Validation",
    "summary": "Namespace OneImlx.Shared.Attributes.Validation Classes EmailListAttribute Specifies that a data field value is a list of well formed emails. OneOfAttribute Specifies the allowed values for a property or a field. SelectItemAttribute Specifies the allowed string values on the property. StringLengthListAttribute Specifies the minimum and maximum length of characters that are allowed in each data field of a list. UrlListAttribute Specifies that a data field value is a list of well formed URL."
  },
  "api/OneImlx.Shared.Attributes.WriteApiAttribute.html": {
    "href": "api/OneImlx.Shared.Attributes.WriteApiAttribute.html",
    "title": "Class WriteApiAttribute",
    "summary": "Class WriteApiAttribute Namespace OneImlx.Shared.Attributes Assembly OneImlx.Shared.dll Indicates that the target element should add the relevant back-end API. [AttributeUsage(AttributeTargets.All, AllowMultiple = true, Inherited = false)] public sealed class WriteApiAttribute : ActionAttribute Inheritance object Attribute ActionAttribute WriteApiAttribute Inherited Members ActionAttribute.Assignee ActionAttribute.Description ActionAttribute.Severity ActionAttribute.Version Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors WriteApiAttribute(string) Initialize a new instance. public WriteApiAttribute(string description) Parameters description string Additional description."
  },
  "api/OneImlx.Shared.Attributes.WriteDocumentationAttribute.html": {
    "href": "api/OneImlx.Shared.Attributes.WriteDocumentationAttribute.html",
    "title": "Class WriteDocumentationAttribute",
    "summary": "Class WriteDocumentationAttribute Namespace OneImlx.Shared.Attributes Assembly OneImlx.Shared.dll Indicates that the target element requires documentation. [AttributeUsage(AttributeTargets.All, AllowMultiple = true, Inherited = false)] public sealed class WriteDocumentationAttribute : ActionAttribute Inheritance object Attribute ActionAttribute WriteDocumentationAttribute Inherited Members ActionAttribute.Assignee ActionAttribute.Description ActionAttribute.Severity ActionAttribute.Version Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors WriteDocumentationAttribute(string) Initialize a new instance. public WriteDocumentationAttribute(string description) Parameters description string Additional description."
  },
  "api/OneImlx.Shared.Attributes.WriteIntegrationTestAttribute.html": {
    "href": "api/OneImlx.Shared.Attributes.WriteIntegrationTestAttribute.html",
    "title": "Class WriteIntegrationTestAttribute",
    "summary": "Class WriteIntegrationTestAttribute Namespace OneImlx.Shared.Attributes Assembly OneImlx.Shared.dll Indicates that the target element should have integration tests. [AttributeUsage(AttributeTargets.All, AllowMultiple = true, Inherited = false)] public sealed class WriteIntegrationTestAttribute : ActionAttribute Inheritance object Attribute ActionAttribute WriteIntegrationTestAttribute Inherited Members ActionAttribute.Assignee ActionAttribute.Description ActionAttribute.Severity ActionAttribute.Version Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors WriteIntegrationTestAttribute(string) Initialize a new instance with description. public WriteIntegrationTestAttribute(string description) Parameters description string Additional description."
  },
  "api/OneImlx.Shared.Attributes.WriteUnitTestAttribute.html": {
    "href": "api/OneImlx.Shared.Attributes.WriteUnitTestAttribute.html",
    "title": "Class WriteUnitTestAttribute",
    "summary": "Class WriteUnitTestAttribute Namespace OneImlx.Shared.Attributes Assembly OneImlx.Shared.dll Indicates that the target element should have unit tests. [AttributeUsage(AttributeTargets.All, AllowMultiple = true, Inherited = false)] public sealed class WriteUnitTestAttribute : ActionAttribute Inheritance object Attribute ActionAttribute WriteUnitTestAttribute Inherited Members ActionAttribute.Assignee ActionAttribute.Description ActionAttribute.Severity ActionAttribute.Version Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors WriteUnitTestAttribute(string) Initialize a new instance with description. public WriteUnitTestAttribute(string description) Parameters description string Additional description."
  },
  "api/OneImlx.Shared.Attributes.html": {
    "href": "api/OneImlx.Shared.Attributes.html",
    "title": "Namespace OneImlx.Shared.Attributes",
    "summary": "Namespace OneImlx.Shared.Attributes Classes ActionAttribute An actionable attribute. ArchitectureAttribute Specifies that the target has an architectural comment that may be resolved in future releases. Applications can use the target element, but the design may change in future releases including breaking changes. ConceptAttribute Indicates that the target element represents a concept. FutureAttribute Indicates a future capability or a feature request. InternalInfrastructureAttribute Indicates that the target is part of the internal infrastructure. Application should not use the target directly. PerformanceAttribute Specifies that the target has a performance comment that may be resolved in future releases. Applications can use the target element, but the design may change in future releases including breaking changes. RefactorAttribute Specifies that the target should be re-factored. Applications can use the target element, but the design may change in future releases including breaking changes. WriteApiAttribute Indicates that the target element should add the relevant back-end API. WriteDocumentationAttribute Indicates that the target element requires documentation. WriteIntegrationTestAttribute Indicates that the target element should have integration tests. WriteUnitTestAttribute Indicates that the target element should have unit tests."
  },
  "api/OneImlx.Shared.Authorization.AuthEndpoints.html": {
    "href": "api/OneImlx.Shared.Authorization.AuthEndpoints.html",
    "title": "Class AuthEndpoints",
    "summary": "Class AuthEndpoints Namespace OneImlx.Shared.Authorization Assembly OneImlx.Shared.dll The MSAL authorization endpoints. [Architecture(\"Remove this and move it to Marketplace and Terminal framework.\")] [InternalInfrastructure(\"This is an internal infrastructure.\")] public static class AuthEndpoints Inheritance object AuthEndpoints Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MsalIssuer The MSAL V2 Issuer. public const string MsalIssuer = \"https://login.microsoftonline.com/{0}/v2.0\" Field Value string MsalIssuerB2C The MSAL B2C V2 authority. public const string MsalIssuerB2C = \"https://{0}.b2clogin.com/{1}/v2.0/\" Field Value string MsalOpenIdConfiguration The MSAL V2 Open ID Connect configuration. public const string MsalOpenIdConfiguration = \"https://login.microsoftonline.com/{0}/v2.0/.well-known/openid-configuration\" Field Value string MsalOpenIdConfigurationB2C The MSAL B2C V2 Open ID Connect configuration. public const string MsalOpenIdConfigurationB2C = \"https://{0}.b2clogin.com/{0}.onmicrosoft.com/{1}/v2.0/.well-known/openid-configuration\" Field Value string PiB2CTenantName The Perpetual Intelligence B2C Tenant name. public const string PiB2CTenantName = \"perpetualintelligenceb2c\" Field Value string PiIssuerB2C The Perpetual Intelligence V2 Open ID Connect configuration. public const string PiIssuerB2C = \"https://login.perpetualintelligence.com/{0}/v2.0\" Field Value string Methods MsalB2CIssuer(string, string) Returns the MSAL B2C based issuer. public static string MsalB2CIssuer(string tenantName, string tenantId) Parameters tenantName string The B2C tenant name. tenantId string The B2C tenant id. Returns string MsalB2COpenIdConfiguration(string, string) Returns the MSAL B2C based OpenID Connect configuration. public static string MsalB2COpenIdConfiguration(string tenantName, string policy) Parameters tenantName string The B2C tenant name. policy string The B2C policy. Returns string MsalTenantIssuer(string) Returns the MSAL tenant based issuer. public static string MsalTenantIssuer(string tenantId) Parameters tenantId string The tenant id. Returns string MsalTenantOpenIdConfiguration(string) Returns the MSAL tenant based OpenID Connect configuration. public static string MsalTenantOpenIdConfiguration(string tenantId) Parameters tenantId string The tenant id. Returns string PiB2CIssuer(string) Returns the Perpetual Intelligence B2C based issuer. public static string PiB2CIssuer(string tenantId) Parameters tenantId string The B2C tenant id. Returns string"
  },
  "api/OneImlx.Shared.Authorization.html": {
    "href": "api/OneImlx.Shared.Authorization.html",
    "title": "Namespace OneImlx.Shared.Authorization",
    "summary": "Namespace OneImlx.Shared.Authorization Classes AuthEndpoints The MSAL authorization endpoints."
  },
  "api/OneImlx.Shared.Constants.html": {
    "href": "api/OneImlx.Shared.Constants.html",
    "title": "Class Constants",
    "summary": "Class Constants Namespace OneImlx.Shared Assembly OneImlx.Shared.dll The Perpetual Intelligence L.L.C. well known constants. public static class Constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Issuer The registered issuer claim for all Perpetual Intelligence L.L.C. managed services, cross-platform frameworks, and developer tools. public const string Issuer = \"https://api.perpetualintelligence.com\" Field Value string Licensing The Perpetual Intelligence L.L.C. pi-lic licensing managed service. public const string Licensing = \"licensing\" Field Value string LicensingUrn The Perpetual Intelligence L.L.C. licensing licensing managed service urn. public const string LicensingUrn = \"urn:oneimlx:licensing\" Field Value string OneImlx The Perpetual Intelligence L.L.C. oneimlx protocol. public const string OneImlx = \"oneimlx\" Field Value string OneImlxUrn The Perpetual Intelligence L.L.C. oneimlx protocol urn. public const string OneImlxUrn = \"urn:oneimlx\" Field Value string Terminal The Perpetual Intelligence L.L.C. terminal framework. public const string Terminal = \"terminal\" Field Value string TerminalUrn The Perpetual Intelligence L.L.C. terminal framework urn. public const string TerminalUrn = \"urn:oneimlx:terminal\" Field Value string"
  },
  "api/OneImlx.Shared.Extensions.StringExtensions.html": {
    "href": "api/OneImlx.Shared.Extensions.StringExtensions.html",
    "title": "Class StringExtensions",
    "summary": "Class StringExtensions Namespace OneImlx.Shared.Extensions Assembly OneImlx.Shared.dll string extension methods. public static class StringExtensions Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EmptyIfNull(string?) Returns an empty string if this string is null. public static string EmptyIfNull(this string? self) Parameters self string The string to check. Returns string true if string is not null or white space, otherwise false. IsNotNullOrWhiteSpace(string?) Determines if the string is not null or white space. public static bool IsNotNullOrWhiteSpace(this string? self) Parameters self string The string to check. Returns bool true if string is not null or white space, otherwise false. IsNullOrEmpty(string?) Determines if the string is null or empty. public static bool IsNullOrEmpty(this string? self) Parameters self string The string to check. Returns bool true if string is null or empty, otherwise false. IsNullOrWhiteSpace(string?) Determines if the string is null or white space. public static bool IsNullOrWhiteSpace(this string? self) Parameters self string The string to check. Returns bool true if string is null or empty, otherwise false. JoinByComma(IEnumerable<string>?) Joins the string collection with a , separator. public static string JoinByComma(this IEnumerable<string>? list) Parameters list IEnumerable<string> A collection of string to join. Returns string A joined string. JoinByNewline(IEnumerable<string>?) Joins the string collection with a NewLine separator. public static string JoinByNewline(this IEnumerable<string>? list) Parameters list IEnumerable<string> A collection of string to join. Returns string A joined string. JoinBySpace(IEnumerable<string>?) Joins the string collection with a space separator. public static string JoinBySpace(this IEnumerable<string>? list) Parameters list IEnumerable<string> A collection of string to join. Returns string A joined string. NotNull(string?) Returns a non null string. public static string NotNull(this string? self) Parameters self string The string to check. Returns string true if string is not null or white space, otherwise false. Repeat(string, int) Repeats the string for the specified times. public static string Repeat(this string value, int count) Parameters value string The value to repeat. count int The count. Returns string New repeated string. SplitByComma(string?) Splits the string with a , separator. public static string[] SplitByComma(this string? self) Parameters self string The string to split. Returns string[] An array of string split by , separator. SplitByNewline(string?) Splits the string with a NewLine. public static string[] SplitByNewline(this string? self) Parameters self string The string to split. Returns string[] An array of string split by newline separator. SplitBySpace(string?) Splits the string with a space separator. public static string[] SplitBySpace(this string? self) Parameters self string The string to split. Returns string[] An array of string split by space separator. TrimEnd(string, string?, StringComparison) Removes the trailing occurrence of a string recursively. public static string TrimEnd(this string self, string? trim, StringComparison stringComparison) Parameters self string The string to trim. trim string The string to trim from start. stringComparison StringComparison The string comparison. Returns string TrimStart(string, string?, StringComparison) Removes the leading occurrence of a string recursively. public static string TrimStart(this string self, string? trim, StringComparison stringComparison) Parameters self string The string to trim. trim string The string to trim from start. stringComparison StringComparison The string comparison. Returns string"
  },
  "api/OneImlx.Shared.Extensions.html": {
    "href": "api/OneImlx.Shared.Extensions.html",
    "title": "Namespace OneImlx.Shared.Extensions",
    "summary": "Namespace OneImlx.Shared.Extensions Classes StringExtensions string extension methods."
  },
  "api/OneImlx.Shared.Infrastructure.Error.html": {
    "href": "api/OneImlx.Shared.Infrastructure.Error.html",
    "title": "Class Error",
    "summary": "Class Error Namespace OneImlx.Shared.Infrastructure Assembly OneImlx.Shared.dll The generic error. public sealed class Error Inheritance object Error Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Error() Initializes a new instance. public Error() Error(string, string, params object?[]) Initialize a new instance. public Error(string errorCode, string errorDescription, params object?[] args) Parameters errorCode string The error code. errorDescription string The error description. args object[] The error description format arguments. Error(string, string, object?[]?, string?, string?) Initialize a new instance. public Error(string errorCode, string errorDescription, object?[]? args = null, string? errorUri = null, string? requestId = null) Parameters errorCode string The error code. errorDescription string The error description. args object[] The error description format arguments./ errorUri string The error URI. requestId string The request id. Properties Args The error description format arguments. [JsonPropertyName(\"args\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public object?[]? Args { get; set; } Property Value object[] ErrorCode The error_code code. [JsonPropertyName(\"error_code\")] public string ErrorCode { get; set; } Property Value string ErrorDescription The error_description. [JsonPropertyName(\"error_description\")] public string ErrorDescription { get; set; } Property Value string ErrorUri The error_uri. [JsonPropertyName(\"error_uri\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string? ErrorUri { get; set; } Property Value string RequestId The request identifier request_id. [JsonPropertyName(\"request_id\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string? RequestId { get; set; } Property Value string Methods FormatDescription() Format the ErrorDescription with the Args. public string FormatDescription() Returns string Formatted error description. FormatError() Creates a new Error instance with formatted ErrorDescription with the Args. public Error FormatError() Returns Error Formatted error instance. SetError(string, string, object?[]?, string?, string?) Set an error. public void SetError(string errorCode, string errorDescription, object?[]? args = null, string? errorUri = null, string? requestId = null) Parameters errorCode string errorDescription string args object[] errorUri string requestId string"
  },
  "api/OneImlx.Shared.Infrastructure.ErrorException.html": {
    "href": "api/OneImlx.Shared.Infrastructure.ErrorException.html",
    "title": "Class ErrorException",
    "summary": "Class ErrorException Namespace OneImlx.Shared.Infrastructure Assembly OneImlx.Shared.dll The exception that represents an error. public class ErrorException : Exception, ISerializable Inheritance object Exception ErrorException Implements ISerializable Derived TerminalException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ErrorException(Error) Initialize a new instance. public ErrorException(Error error) Parameters error Error The error. ErrorException(string, string) Initialize a new instance. public ErrorException(string error, string errorDescription) Parameters error string The error code. errorDescription string The error description. ErrorException(string, string, params object?[]) Initializes a new error exception. public ErrorException(string error, string errorDescription, params object?[] args) Parameters error string The error code. errorDescription string The error description. args object[] The error description format arguments. Properties Error The error. public Error Error { get; set; } Property Value Error Message The exception message. public override string Message { get; } Property Value string Remarks This method returns the formatted description using FormatDescription()."
  },
  "api/OneImlx.Shared.Infrastructure.MultiErrorException.html": {
    "href": "api/OneImlx.Shared.Infrastructure.MultiErrorException.html",
    "title": "Class MultiErrorException",
    "summary": "Class MultiErrorException Namespace OneImlx.Shared.Infrastructure Assembly OneImlx.Shared.dll The exception that represents multiple errors. public class MultiErrorException : Exception, ISerializable Inheritance object Exception MultiErrorException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MultiErrorException() Initializes a new instance. public MultiErrorException() MultiErrorException(Error[], string) Initialize a new instance with the specified errors and an exception message. public MultiErrorException(Error[] errors, string message) Parameters errors Error[] The errors. message string The consolidated exception message. MultiErrorException(IEnumerable<Error>) Initialize a new instance with the specified errors. public MultiErrorException(IEnumerable<Error> errors) Parameters errors IEnumerable<Error> The errors. Properties Errors The errors in this exception. public IEnumerable<Error> Errors { get; } Property Value IEnumerable<Error>"
  },
  "api/OneImlx.Shared.Infrastructure.TryResultOrError-1.html": {
    "href": "api/OneImlx.Shared.Infrastructure.TryResultOrError-1.html",
    "title": "Class TryResultOrError<T>",
    "summary": "Class TryResultOrError<T> Namespace OneImlx.Shared.Infrastructure Assembly OneImlx.Shared.dll The generic result of a trying method. The trying method must return an error or a valid result. Both Error and Result cannot be null. public sealed class TryResultOrError<T> where T : class Type Parameters T The result type. Inheritance object TryResultOrError<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TryResultOrError(Error) Initialize a new instance. public TryResultOrError(Error error) Parameters error Error TryResultOrError(T) Initialize a new instance. public TryResultOrError(T result) Parameters result T Properties Error The result of a try. public Error? Error { get; } Property Value Error Result The result of a try. public T? Result { get; } Property Value T"
  },
  "api/OneImlx.Shared.Infrastructure.html": {
    "href": "api/OneImlx.Shared.Infrastructure.html",
    "title": "Namespace OneImlx.Shared.Infrastructure",
    "summary": "Namespace OneImlx.Shared.Infrastructure Classes Error The generic error. ErrorException The exception that represents an error. MultiErrorException The exception that represents multiple errors. TryResultOrError<T> The generic result of a trying method. The trying method must return an error or a valid result. Both Error and Result cannot be null."
  },
  "api/OneImlx.Shared.Json.DictionaryStringObjectPrimitiveJsonConverter.html": {
    "href": "api/OneImlx.Shared.Json.DictionaryStringObjectPrimitiveJsonConverter.html",
    "title": "Class DictionaryStringObjectPrimitiveJsonConverter",
    "summary": "Class DictionaryStringObjectPrimitiveJsonConverter Namespace OneImlx.Shared.Json Assembly OneImlx.Shared.dll The JsonConverter<T> for dictionary of string and object. The value must be primitive, null, string or DateTime. public class DictionaryStringObjectPrimitiveJsonConverter : JsonConverter<Dictionary<string, object?>> Inheritance object JsonConverter JsonConverter<Dictionary<string, object>> DictionaryStringObjectPrimitiveJsonConverter Inherited Members JsonConverter<Dictionary<string, object>>.CanConvert(Type) JsonConverter<Dictionary<string, object>>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<Dictionary<string, object>>.Write(Utf8JsonWriter, Dictionary<string, object>, JsonSerializerOptions) JsonConverter<Dictionary<string, object>>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<Dictionary<string, object>>.WriteAsPropertyName(Utf8JsonWriter, Dictionary<string, object>, JsonSerializerOptions) JsonConverter<Dictionary<string, object>>.HandleNull JsonConverter<Dictionary<string, object>>.Type JsonConverter.CanConvert(Type) JsonConverter.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type Dictionary<string, object>. public override Dictionary<string, object?> Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns Dictionary<string, object> The converted value. Write(Utf8JsonWriter, Dictionary<string, object?>, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, Dictionary<string, object?> value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. value Dictionary<string, object> The value to convert to JSON. options JsonSerializerOptions An object that specifies serialization options to use. See Also https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-converters-how-to?pivots=dotnet-6-0#sample-factory-pattern-converter"
  },
  "api/OneImlx.Shared.Json.html": {
    "href": "api/OneImlx.Shared.Json.html",
    "title": "Namespace OneImlx.Shared.Json",
    "summary": "Namespace OneImlx.Shared.Json Classes DictionaryStringObjectPrimitiveJsonConverter The JsonConverter<T> for dictionary of string and object. The value must be primitive, null, string or DateTime."
  },
  "api/OneImlx.Shared.Licensing.LicenseCheck.html": {
    "href": "api/OneImlx.Shared.Licensing.LicenseCheck.html",
    "title": "Class LicenseCheck",
    "summary": "Class LicenseCheck Namespace OneImlx.Shared.Licensing Assembly OneImlx.Shared.dll The license check. public sealed class LicenseCheck Inheritance object LicenseCheck Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Application The Authorized application. [JsonPropertyName(\"application\")] public string Application { get; set; } Property Value string Audience The audience. [JsonPropertyName(\"audience\")] public string Audience { get; set; } Property Value string AuthorizedParty The Authorized party. [JsonPropertyName(\"authorized_party\")] public string AuthorizedParty { get; set; } Property Value string Deployment The license mode. [JsonPropertyName(\"deployment\")] public string? Deployment { get; set; } Property Value string Id The license identifier. [JsonPropertyName(\"id\")] public string Id { get; set; } Property Value string Issuer The issuer. [JsonPropertyName(\"issuer\")] public string Issuer { get; set; } Property Value string LicenseKey The key to check. [JsonPropertyName(\"lkey\")] public string LicenseKey { get; set; } Property Value string Mode The license mode. [JsonPropertyName(\"mode\")] public string Mode { get; set; } Property Value string TenantId The consumer tenant id. [JsonPropertyName(\"tenant_id\")] public string TenantId { get; set; } Property Value string ValidationKey The validation public key to check the license LicenseKey. [JsonPropertyName(\"vkey\")] public string? ValidationKey { get; set; } Property Value string"
  },
  "api/OneImlx.Shared.Licensing.LicenseClaims.html": {
    "href": "api/OneImlx.Shared.Licensing.LicenseClaims.html",
    "title": "Class LicenseClaims",
    "summary": "Class LicenseClaims Namespace OneImlx.Shared.Licensing Assembly OneImlx.Shared.dll The generic license claims. public sealed class LicenseClaims Inheritance object LicenseClaims Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors LicenseClaims() Initialize a new instance. This constructor is part of the internal infrastructure. Please do not use it directly in the application code. To create a new instance from claims please use Create(IDictionary<string, object>). public LicenseClaims() Properties AcrValues The acr claim values. [JsonPropertyName(\"acr_values\")] public string AcrValues { get; set; } Property Value string Applications The apps claim. [JsonPropertyName(\"applications\")] public string Applications { get; set; } Property Value string Audience The aud claim. [JsonPropertyName(\"audience\")] public string Audience { get; set; } Property Value string AuthorizedParty The azp claim. [JsonPropertyName(\"authorized_party\")] public string AuthorizedParty { get; set; } Property Value string Custom The custom claims. [JsonPropertyName(\"custom\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] [JsonConverter(typeof(DictionaryStringObjectPrimitiveJsonConverter))] public Dictionary<string, object>? Custom { get; set; } Property Value Dictionary<string, object> Deployment The deployment claim. [JsonPropertyName(\"deployment\")] public string? Deployment { get; set; } Property Value string ExpiryAt The exp claim. [JsonPropertyName(\"expiry_at\")] public DateTimeOffset ExpiryAt { get; set; } Property Value DateTimeOffset Id The oid claim. [JsonPropertyName(\"id\")] public string Id { get; set; } Property Value string IssuedAt The iat claim. [JsonPropertyName(\"issued_at\")] public DateTimeOffset IssuedAt { get; set; } Property Value DateTimeOffset Issuer The iss claim. [JsonPropertyName(\"issuer\")] public string Issuer { get; set; } Property Value string Jti The jti claim. [JsonPropertyName(\"jti\")] public string Jti { get; set; } Property Value string Mode The mode claim. [JsonPropertyName(\"mode\")] public string Mode { get; set; } Property Value string NotBefore The nbf claim. [JsonPropertyName(\"not_before\")] public DateTimeOffset NotBefore { get; set; } Property Value DateTimeOffset Subject The sub claim. [JsonPropertyName(\"subject\")] public string Subject { get; set; } Property Value string TenantCountry The country claim. [JsonPropertyName(\"tenant_country\")] public string TenantCountry { get; set; } Property Value string TenantId The tid claim. [JsonPropertyName(\"tenant_id\")] public string TenantId { get; set; } Property Value string TenantName The name claim. [JsonPropertyName(\"tenant_name\")] public string TenantName { get; set; } Property Value string Methods Create(IDictionary<string, object>) Creates a new instance of LicenseClaims based on the specified claims dictionary. public static LicenseClaims Create(IDictionary<string, object> claims) Parameters claims IDictionary<string, object> The source claims. Returns LicenseClaims"
  },
  "api/OneImlx.Shared.Licensing.LicenseFile.html": {
    "href": "api/OneImlx.Shared.Licensing.LicenseFile.html",
    "title": "Class LicenseFile",
    "summary": "Class LicenseFile Namespace OneImlx.Shared.Licensing Assembly OneImlx.Shared.dll The generic license file. public sealed class LicenseFile Inheritance object LicenseFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Deployment The deployment. [JsonPropertyName(\"deployment\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string? Deployment { get; set; } Property Value string ExpiryAt The expiry at timestamp. [JsonPropertyName(\"expiry_at\")] public DateTimeOffset ExpiryAt { get; set; } Property Value DateTimeOffset Id The identifier. [JsonPropertyName(\"id\")] public string Id { get; set; } Property Value string IssuedAt The issued at timestamp. [JsonPropertyName(\"issued_at\")] public DateTimeOffset IssuedAt { get; set; } Property Value DateTimeOffset LicenseKey The license key to check. [JsonPropertyName(\"lkey\")] public string LicenseKey { get; set; } Property Value string Mode The mode. [JsonPropertyName(\"mode\")] public string Mode { get; set; } Property Value string TenantId The consumer tenant id. [JsonPropertyName(\"tenant_id\")] public string TenantId { get; set; } Property Value string TenantName The consumer tenant id. [JsonPropertyName(\"tenant_name\")] public string TenantName { get; set; } Property Value string ValidationKey The validation public key to check the license LicenseKey. [JsonPropertyName(\"vkey\")] [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public string? ValidationKey { get; set; } Property Value string"
  },
  "api/OneImlx.Shared.Licensing.LicenseUsage.html": {
    "href": "api/OneImlx.Shared.Licensing.LicenseUsage.html",
    "title": "Class LicenseUsage",
    "summary": "Class LicenseUsage Namespace OneImlx.Shared.Licensing Assembly OneImlx.Shared.dll The standard license usage. public class LicenseUsage Inheritance object LicenseUsage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields CommercialBusiness The commercial usage for an organization or business account. public const string CommercialBusiness = \"urn:oneimlx:lic:usage:org\" Field Value string CommercialSolo The commercial usage for a solo account. public const string CommercialSolo = \"urn:oneimlx:lic:usage:solo\" Field Value string Educational The community usage for educational account. public const string Educational = \"urn:oneimlx:lic:usage:edu\" Field Value string RnD The community usage for research and development. public const string RnD = \"urn:oneimlx:lic:usage:rnd\" Field Value string Methods IsValid(string) Determines if the usage is valid. public static bool IsValid(string usage) Parameters usage string Returns bool true if the usage is valid; otherwise, false."
  },
  "api/OneImlx.Shared.Licensing.LicenseX509Service.html": {
    "href": "api/OneImlx.Shared.Licensing.LicenseX509Service.html",
    "title": "Class LicenseX509Service",
    "summary": "Class LicenseX509Service Namespace OneImlx.Shared.Licensing Assembly OneImlx.Shared.dll The licensing services around X509Certificate2. public sealed class LicenseX509Service Inheritance object LicenseX509Service Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods FromJwtValidationKey(string, out X509Certificate2) Returns the public validation key and certificate from a JWT token. public static string FromJwtValidationKey(string jwtVKey, out X509Certificate2 x509Certificate) Parameters jwtVKey string The JWT from which the public validation key is extracted. x509Certificate X509Certificate2 Outputs the X509Certificate2 created from the extracted public key. Returns string The extracted public validation key. Exceptions ErrorException Thrown if the JWT does not contain a pkey claim indicating the public validation key, or if the generated certificate inadvertently contains a private key, indicating unauthorized access. ToJwtValidationKey(X509Certificate2) Returns an unsigned JWT token containing the public key of a given certificate. public static string ToJwtValidationKey(X509Certificate2 certificate) Parameters certificate X509Certificate2 The certificate containing the public key to be distributed. Returns string An unsigned JWT token with the public key in the payload. Remarks The method exports the public key from the provided X509Certificate2 object, encodes it in Base64, and constructs an unsigned JWT token with the public key included in the payload under the pkey claim. This JWT token does not contain a signature or expiration, making it suitable for public distribution. ToSigningCertificate(string, string?) Returns the signing certificate. public static X509Certificate2 ToSigningCertificate(string cert, string? pwd = null) Parameters cert string pwd string Returns X509Certificate2"
  },
  "api/OneImlx.Shared.Licensing.TerminalLicensePlans.html": {
    "href": "api/OneImlx.Shared.Licensing.TerminalLicensePlans.html",
    "title": "Class TerminalLicensePlans",
    "summary": "Class TerminalLicensePlans Namespace OneImlx.Shared.Licensing Assembly OneImlx.Shared.dll The terminal framework license plans. public sealed class TerminalLicensePlans Inheritance object TerminalLicensePlans Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Corporate The corporate license pricing plan. public const string Corporate = \"urn:oneimlx:terminal:plan:corporate\" Field Value string Custom The custom license pricing plan. public const string Custom = \"urn:oneimlx:terminal:plan:custom\" Field Value string Demo The demo license pricing plan. public const string Demo = \"urn:oneimlx:terminal:plan:demo\" Field Value string Enterprise The enterprise license pricing plan. public const string Enterprise = \"urn:oneimlx:terminal:plan:enterprise\" Field Value string Micro The micro license pricing plan. public const string Micro = \"urn:oneimlx:terminal:plan:micro\" Field Value string Smb The SMB license pricing plan. public const string Smb = \"urn:oneimlx:terminal:plan:smb\" Field Value string Solo The solo license pricing plan. public const string Solo = \"urn:oneimlx:terminal:plan:solo\" Field Value string Methods IsValidPlan(string) Determines if the plan is valid for terminal. public static bool IsValidPlan(string plan) Parameters plan string Returns bool true if the plan is valid; otherwise, false."
  },
  "api/OneImlx.Shared.Licensing.html": {
    "href": "api/OneImlx.Shared.Licensing.html",
    "title": "Namespace OneImlx.Shared.Licensing",
    "summary": "Namespace OneImlx.Shared.Licensing Classes LicenseCheck The license check. LicenseClaims The generic license claims. LicenseFile The generic license file. LicenseUsage The standard license usage. LicenseX509Service The licensing services around X509Certificate2. TerminalLicensePlans The terminal framework license plans."
  },
  "api/OneImlx.Shared.Security.Certificates.X509Store.html": {
    "href": "api/OneImlx.Shared.Security.Certificates.X509Store.html",
    "title": "Class X509Store",
    "summary": "Class X509Store Namespace OneImlx.Shared.Security.Certificates Assembly OneImlx.Shared.dll The X509Certificate2 store for OAuth and OpenID Connect protocols. public class X509Store Inheritance object X509Store Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentUser The X.509 certificate store used by CurrentUser. public static X509Store CurrentUser { get; } Property Value X509Store LocalMachine The X.509 certificate store assigned to LocalMachine. public static X509Store LocalMachine { get; } Property Value X509Store Methods Find(StoreName, X509FindType, object, bool) Finds the X509Certificate2 based in the specified X509FindType. public IEnumerable<X509Certificate2> Find(StoreName storeName, X509FindType findType, object findValue, bool validOnly = true) Parameters storeName StoreName The StoreName. findType X509FindType The X509FindType. findValue object The find value. validOnly bool The find value validity. Returns IEnumerable<X509Certificate2> See Also X509Certificate2 StoreLocation StoreName"
  },
  "api/OneImlx.Shared.Security.Certificates.html": {
    "href": "api/OneImlx.Shared.Security.Certificates.html",
    "title": "Namespace OneImlx.Shared.Security.Certificates",
    "summary": "Namespace OneImlx.Shared.Security.Certificates Classes X509Store The X509Certificate2 store for OAuth and OpenID Connect protocols."
  },
  "api/OneImlx.Shared.html": {
    "href": "api/OneImlx.Shared.html",
    "title": "Namespace OneImlx.Shared",
    "summary": "Namespace OneImlx.Shared Classes Constants The Perpetual Intelligence L.L.C. well known constants."
  },
  "api/OneImlx.Terminal.Authentication.Extensions.ITerminalBuilderExtensions.html": {
    "href": "api/OneImlx.Terminal.Authentication.Extensions.ITerminalBuilderExtensions.html",
    "title": "Class ITerminalBuilderExtensions",
    "summary": "Class ITerminalBuilderExtensions Namespace OneImlx.Terminal.Authentication.Extensions Assembly OneImlx.Terminal.Authentication.dll public static class ITerminalBuilderExtensions Inheritance object ITerminalBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddMsalAuthentication<TAuthenticationProvider, TAccessTokenProvider, TDelegatingHandler>(ITerminalBuilder, IPublicClientApplication) Adds MSAL authentication using IPublicClientApplication to the service collection. public static ITerminalBuilder AddMsalAuthentication<TAuthenticationProvider, TAccessTokenProvider, TDelegatingHandler>(this ITerminalBuilder builder, IPublicClientApplication publicClientApplication) where TAuthenticationProvider : class, IAuthenticationProvider where TAccessTokenProvider : class, IAccessTokenProvider where TDelegatingHandler : DelegatingHandler Parameters builder ITerminalBuilder The terminal builder. publicClientApplication IPublicClientApplication The public client application. Returns ITerminalBuilder The configured ITerminalBuilder. Type Parameters TAuthenticationProvider The type of the authentication provider. TAccessTokenProvider The type of the access token provider. TDelegatingHandler The type of the custom HTTP delegating handler."
  },
  "api/OneImlx.Terminal.Authentication.Extensions.html": {
    "href": "api/OneImlx.Terminal.Authentication.Extensions.html",
    "title": "Namespace OneImlx.Terminal.Authentication.Extensions",
    "summary": "Namespace OneImlx.Terminal.Authentication.Extensions Classes ITerminalBuilderExtensions"
  },
  "api/OneImlx.Terminal.Authentication.Msal.IMsalTokenAcquisition.html": {
    "href": "api/OneImlx.Terminal.Authentication.Msal.IMsalTokenAcquisition.html",
    "title": "Interface IMsalTokenAcquisition",
    "summary": "Interface IMsalTokenAcquisition Namespace OneImlx.Terminal.Authentication.Msal Assembly OneImlx.Terminal.Authentication.dll An abstraction to acquire tokens using MSAL. public interface IMsalTokenAcquisition Methods AcquireTokenInteractiveAsync(IEnumerable<string>) Acquires a token interactively for the specified scopes. Task<AuthenticationResult> AcquireTokenInteractiveAsync(IEnumerable<string> scopes) Parameters scopes IEnumerable<string> The scopes for which the token is requested. Returns Task<AuthenticationResult> A task that represents the asynchronous operation and returns the authentication result. AcquireTokenSilentAsync(IEnumerable<string>, IAccount) Acquires a token silently for the specified scopes and account. Task<AuthenticationResult> AcquireTokenSilentAsync(IEnumerable<string> scopes, IAccount account) Parameters scopes IEnumerable<string> The scopes for which the token is requested. account IAccount The account for which the token is requested. Returns Task<AuthenticationResult> A task that represents the asynchronous operation and returns the authentication result. GetAccountsAsync(string?) Asynchronously gets a list of IAccount. Task<IEnumerable<IAccount>> GetAccountsAsync(string? userFlow = null) Parameters userFlow string The authentication user flow. Returns Task<IEnumerable<IAccount>> A task that represents the asynchronous operation, containing a list of accounts."
  },
  "api/OneImlx.Terminal.Authentication.Msal.MsalAccessTokenProviderDelegatingHandler.html": {
    "href": "api/OneImlx.Terminal.Authentication.Msal.MsalAccessTokenProviderDelegatingHandler.html",
    "title": "Class MsalAccessTokenProviderDelegatingHandler",
    "summary": "Class MsalAccessTokenProviderDelegatingHandler Namespace OneImlx.Terminal.Authentication.Msal Assembly OneImlx.Terminal.Authentication.dll Delegating handler that adds an access token to the request headers using an Microsoft.Kiota.Abstractions.Authentication.IAccessTokenProvider. public class MsalAccessTokenProviderDelegatingHandler : DelegatingHandler, IDisposable Inheritance object HttpMessageHandler DelegatingHandler MsalAccessTokenProviderDelegatingHandler Implements IDisposable Inherited Members DelegatingHandler.Dispose(bool) DelegatingHandler.InnerHandler HttpMessageHandler.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MsalAccessTokenProviderDelegatingHandler(IAccessTokenProvider, ILogger<MsalAccessTokenProviderDelegatingHandler>) Initializes a new instance of the MsalAccessTokenProviderDelegatingHandler class. public MsalAccessTokenProviderDelegatingHandler(IAccessTokenProvider accessTokenProvider, ILogger<MsalAccessTokenProviderDelegatingHandler> logger) Parameters accessTokenProvider IAccessTokenProvider The access token provider. logger ILogger<MsalAccessTokenProviderDelegatingHandler> The logger. Methods PreflightAsync(HttpRequestMessage, CancellationToken) Performs preflight processing on the HTTP request message. protected virtual Task PreflightAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters request HttpRequestMessage The HTTP request message to be processed. cancellationToken CancellationToken A cancellation token to cancel the operation. Returns Task Remarks This method can be overridden in a derived class to perform custom pre-processing on the request before it is sent. The default implementation does nothing. SendAsync(HttpRequestMessage, CancellationToken) Sends an HTTP request to the inner handler to send to the server as an asynchronous operation. protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters request HttpRequestMessage The HTTP request message to send to the server. cancellationToken CancellationToken A cancellation token to cancel operation. Returns Task<HttpResponseMessage> A Task<TResult> that represents the asynchronous operation."
  },
  "api/OneImlx.Terminal.Authentication.Msal.MsalAuthenticationProviderDelegatingHandler.html": {
    "href": "api/OneImlx.Terminal.Authentication.Msal.MsalAuthenticationProviderDelegatingHandler.html",
    "title": "Class MsalAuthenticationProviderDelegatingHandler",
    "summary": "Class MsalAuthenticationProviderDelegatingHandler Namespace OneImlx.Terminal.Authentication.Msal Assembly OneImlx.Terminal.Authentication.dll Delegating handler that authenticates an HTTP request using an Microsoft.Kiota.Abstractions.Authentication.IAuthenticationProvider. public class MsalAuthenticationProviderDelegatingHandler : DelegatingHandler, IDisposable Inheritance object HttpMessageHandler DelegatingHandler MsalAuthenticationProviderDelegatingHandler Implements IDisposable Inherited Members DelegatingHandler.Dispose(bool) DelegatingHandler.InnerHandler HttpMessageHandler.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MsalAuthenticationProviderDelegatingHandler(IAuthenticationProvider, ILogger<MsalAuthenticationProviderDelegatingHandler>) Initializes a new instance of the MsalAuthenticationProviderDelegatingHandler class. public MsalAuthenticationProviderDelegatingHandler(IAuthenticationProvider authenticationProvider, ILogger<MsalAuthenticationProviderDelegatingHandler> logger) Parameters authenticationProvider IAuthenticationProvider The authentication provider. logger ILogger<MsalAuthenticationProviderDelegatingHandler> Methods PreflightAsync(HttpRequestMessage, CancellationToken) Performs preflight processing on the HTTP request message. protected virtual Task PreflightAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters request HttpRequestMessage The HTTP request message to be processed. cancellationToken CancellationToken A cancellation token to cancel the operation. Returns Task Remarks This method can be overridden in a derived class to perform custom pre-processing on the request before it is sent. The default implementation does nothing. SendAsync(HttpRequestMessage, CancellationToken) Sends an HTTP request to the inner handler to send to the server as an asynchronous operation. protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters request HttpRequestMessage The HTTP request message to send to the server. cancellationToken CancellationToken A cancellation token to cancel the operation. Returns Task<HttpResponseMessage> A Task<TResult> that represents the asynchronous operation."
  },
  "api/OneImlx.Terminal.Authentication.Msal.MsalKiotaAuthProvider.html": {
    "href": "api/OneImlx.Terminal.Authentication.Msal.MsalKiotaAuthProvider.html",
    "title": "Class MsalKiotaAuthProvider",
    "summary": "Class MsalKiotaAuthProvider Namespace OneImlx.Terminal.Authentication.Msal Assembly OneImlx.Terminal.Authentication.dll The OneImlx terminal Kiota authentication and authorization provider for MSAL identity platform. public sealed class MsalKiotaAuthProvider : IAuthenticationProvider, IAccessTokenProvider Inheritance object MsalKiotaAuthProvider Implements IAuthenticationProvider IAccessTokenProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MsalKiotaAuthProvider(TerminalOptions, IMsalTokenAcquisition, ILogger<MsalKiotaAuthProvider>) Initializes a new instance. public MsalKiotaAuthProvider(TerminalOptions terminalOptions, IMsalTokenAcquisition msalTokenAcquisition, ILogger<MsalKiotaAuthProvider> logger) Parameters terminalOptions TerminalOptions The terminal options. msalTokenAcquisition IMsalTokenAcquisition The MSAL token acquisition. logger ILogger<MsalKiotaAuthProvider> The logger. Properties AllowedHostsValidator Gets the validator that ensures the authorization request is for an allowed host. public AllowedHostsValidator AllowedHostsValidator { get; } Property Value AllowedHostsValidator Methods AuthenticateRequestAsync(RequestInformation, Dictionary<string, object>?, CancellationToken) Authenticates an HTTP request by acquiring an access token and setting it in the request's Authorization header. public Task AuthenticateRequestAsync(RequestInformation request, Dictionary<string, object>? additionalAuthenticationContext = null, CancellationToken cancellationToken = default) Parameters request RequestInformation The HTTP request to authenticate. additionalAuthenticationContext Dictionary<string, object> Optional. Additional authentication context that may contain extra scopes or other information. cancellationToken CancellationToken Optional. The cancellation token to cancel the asynchronous operation. Returns Task Remarks This method supports additional scopes provided either as an IEnumerable<T> or a single string with scopes separated by spaces. The scopes are expected to be provided in the additionalAuthenticationContext dictionary with the key scopes. Exceptions TerminalException Thrown if the URI is not allowed by the AllowedHostsValidator or if token acquisition fails. GetAuthorizationTokenAsync(Uri, Dictionary<string, object>?, CancellationToken) Asynchronously gets an authorization token for the specified URI. public Task<string> GetAuthorizationTokenAsync(Uri uri, Dictionary<string, object>? additionalAuthenticationContext = null, CancellationToken cancellationToken = default) Parameters uri Uri The URI for which the authorization token is required. additionalAuthenticationContext Dictionary<string, object> Optional. Additional authentication context that may contain extra scopes or other information. cancellationToken CancellationToken Optional. The cancellation token to cancel the asynchronous operation. Returns Task<string> A task that represents the asynchronous operation, containing the authorization token. Remarks This method supports additional scopes provided either as an IEnumerable<T> or a single string with scopes separated by spaces. The scopes are expected to be provided in the additionalAuthenticationContext dictionary with the key scopes. Exceptions TerminalException Thrown if the URI is not allowed by the AllowedHostsValidator."
  },
  "api/OneImlx.Terminal.Authentication.Msal.MsalPublicClientTokenAcquisition.html": {
    "href": "api/OneImlx.Terminal.Authentication.Msal.MsalPublicClientTokenAcquisition.html",
    "title": "Class MsalPublicClientTokenAcquisition",
    "summary": "Class MsalPublicClientTokenAcquisition Namespace OneImlx.Terminal.Authentication.Msal Assembly OneImlx.Terminal.Authentication.dll The default IMsalTokenAcquisition implementation using the IPublicClientApplication. public class MsalPublicClientTokenAcquisition : IMsalTokenAcquisition Inheritance object MsalPublicClientTokenAcquisition Implements IMsalTokenAcquisition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks MsalPublicClientTokenAcquisition is responsible for handling token acquisition from the Microsoft Identity platform. Constructors MsalPublicClientTokenAcquisition(IPublicClientApplication, ILogger<MsalPublicClientTokenAcquisition>) Initializes a new instance of the MsalPublicClientTokenAcquisition class. Requires an instance of IPublicClientApplication, which is the entry point for using MSAL, and a logger for logging activities and errors. public MsalPublicClientTokenAcquisition(IPublicClientApplication publicClientApplication, ILogger<MsalPublicClientTokenAcquisition> logger) Parameters publicClientApplication IPublicClientApplication The MSAL public client application instance. logger ILogger<MsalPublicClientTokenAcquisition> The logger to use for logging information and errors. Methods AcquireTokenInteractiveAsync(IEnumerable<string>) Attempts to acquire a token interactively for the specified scopes. public Task<AuthenticationResult> AcquireTokenInteractiveAsync(IEnumerable<string> scopes) Parameters scopes IEnumerable<string> The scopes for which the token is requested. Returns Task<AuthenticationResult> A task representing the asynchronous operation and returning the authentication result. AcquireTokenSilentAsync(IEnumerable<string>, IAccount) Attempts to acquire a token silently for the specified scopes and account. public Task<AuthenticationResult> AcquireTokenSilentAsync(IEnumerable<string> scopes, IAccount account) Parameters scopes IEnumerable<string> The scopes for which the token is requested. account IAccount The account for which the token is requested. Returns Task<AuthenticationResult> A task representing the asynchronous operation and returning the authentication result. GetAccountsAsync(string?) Returns all the available accounts in the user token cache for the application. public Task<IEnumerable<IAccount>> GetAccountsAsync(string? userFlow = null) Parameters userFlow string Returns Task<IEnumerable<IAccount>>"
  },
  "api/OneImlx.Terminal.Authentication.Msal.html": {
    "href": "api/OneImlx.Terminal.Authentication.Msal.html",
    "title": "Namespace OneImlx.Terminal.Authentication.Msal",
    "summary": "Namespace OneImlx.Terminal.Authentication.Msal Classes MsalAccessTokenProviderDelegatingHandler Delegating handler that adds an access token to the request headers using an Microsoft.Kiota.Abstractions.Authentication.IAccessTokenProvider. MsalAuthenticationProviderDelegatingHandler Delegating handler that authenticates an HTTP request using an Microsoft.Kiota.Abstractions.Authentication.IAuthenticationProvider. MsalKiotaAuthProvider The OneImlx terminal Kiota authentication and authorization provider for MSAL identity platform. MsalPublicClientTokenAcquisition The default IMsalTokenAcquisition implementation using the IPublicClientApplication. Interfaces IMsalTokenAcquisition An abstraction to acquire tokens using MSAL."
  },
  "api/OneImlx.Terminal.Client.Extensions.ClientExtensions.html": {
    "href": "api/OneImlx.Terminal.Client.Extensions.ClientExtensions.html",
    "title": "Class ClientExtensions",
    "summary": "Class ClientExtensions Namespace OneImlx.Terminal.Client.Extensions Assembly OneImlx.Terminal.Client.dll Provides extension methods for interacting with terminal server over various network protocols. public static class ClientExtensions Inheritance object ClientExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SendToTerminalAsync(TerminalGrpcRouterProtoClient, TerminalInputOutput, CancellationToken, JsonSerializerOptions?) Sends a TerminalInputOutput object to a terminal server via a gRPC request. public static Task<TerminalGrpcRouterProtoOutput> SendToTerminalAsync(this TerminalGrpcRouterProto.TerminalGrpcRouterProtoClient grpcClient, TerminalInputOutput input, CancellationToken cancellationToken, JsonSerializerOptions? serializeOptions = null) Parameters grpcClient TerminalGrpcRouterProto.TerminalGrpcRouterProtoClient The gRPC client instance used to send the request. input TerminalInputOutput The TerminalInputOutput to be sent. cancellationToken CancellationToken A CancellationToken to observe while awaiting completion. serializeOptions JsonSerializerOptions The JsonSerializerOptions used to serialize the input. Defaults to null. Returns Task<TerminalGrpcRouterProtoOutput> A task representing the asynchronous operation. The task result contains the TerminalGrpcRouterProtoOutput from the server. SendToTerminalAsync(HttpClient, TerminalInputOutput, CancellationToken, JsonSerializerOptions?) Sends a TerminalInputOutput object to a terminal server as an HTTP POST request. public static Task<TerminalInputOutput?> SendToTerminalAsync(this HttpClient httpClient, TerminalInputOutput input, CancellationToken cancellationToken, JsonSerializerOptions? serializeOptions = null) Parameters httpClient HttpClient The HttpClient instance used to send the request. input TerminalInputOutput The TerminalInputOutput to be sent. cancellationToken CancellationToken A CancellationToken to observe while awaiting completion. serializeOptions JsonSerializerOptions The JsonSerializerOptions used to serialize the input. Defaults to null. Returns Task<TerminalInputOutput> A task representing the asynchronous operation. Remarks The HTTP POST request is sent to the endpoint oneimlx/terminal/httprouter on the server. SendToTerminalAsync(TcpClient, TerminalInputOutput, byte, CancellationToken, JsonSerializerOptions?) Sends a TerminalInputOutput object to a terminal server via a TCP connection. public static Task SendToTerminalAsync(this TcpClient tcpClient, TerminalInputOutput input, byte inputDelimiter, CancellationToken cancellationToken, JsonSerializerOptions? serializeOptions = null) Parameters tcpClient TcpClient The TcpClient instance used to send the message. input TerminalInputOutput The TerminalInputOutput to be sent. inputDelimiter byte The stream delimiter. cancellationToken CancellationToken A CancellationToken to observe while awaiting completion. serializeOptions JsonSerializerOptions The JsonSerializerOptions used to serialize the input. Defaults to null. Returns Task A task representing the asynchronous operation. SendToTerminalAsync(UdpClient, TerminalInputOutput, byte, IPEndPoint, CancellationToken, JsonSerializerOptions?) Sends a TerminalInputOutput object to a terminal server via a UDP message. public static Task SendToTerminalAsync(this UdpClient udpClient, TerminalInputOutput input, byte inputDelimiter, IPEndPoint remoteEndPoint, CancellationToken cancellationToken, JsonSerializerOptions? serializeOptions = null) Parameters udpClient UdpClient The UdpClient instance used to send the message. input TerminalInputOutput The TerminalInputOutput to be sent. inputDelimiter byte The stream delimiter. remoteEndPoint IPEndPoint The IPEndPoint representing the remote server endpoint. cancellationToken CancellationToken A CancellationToken to observe while awaiting completion. serializeOptions JsonSerializerOptions The JsonSerializerOptions used to serialize the input. Defaults to null. Returns Task A task representing the asynchronous operation."
  },
  "api/OneImlx.Terminal.Client.Extensions.html": {
    "href": "api/OneImlx.Terminal.Client.Extensions.html",
    "title": "Namespace OneImlx.Terminal.Client.Extensions",
    "summary": "Namespace OneImlx.Terminal.Client.Extensions Classes ClientExtensions Provides extension methods for interacting with terminal server over various network protocols."
  },
  "api/OneImlx.Terminal.Client.OneimlxTerminalReflection.html": {
    "href": "api/OneImlx.Terminal.Client.OneimlxTerminalReflection.html",
    "title": "Class OneimlxTerminalReflection",
    "summary": "Class OneimlxTerminalReflection Namespace OneImlx.Terminal.Client Assembly OneImlx.Terminal.Client.dll Holder for reflection information generated from Protos/oneimlx_terminal.proto public static class OneimlxTerminalReflection Inheritance object OneimlxTerminalReflection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Descriptor File descriptor for Protos/oneimlx_terminal.proto public static FileDescriptor Descriptor { get; } Property Value FileDescriptor"
  },
  "api/OneImlx.Terminal.Client.TerminalGrpcRouterProto.TerminalGrpcRouterProtoClient.html": {
    "href": "api/OneImlx.Terminal.Client.TerminalGrpcRouterProto.TerminalGrpcRouterProtoClient.html",
    "title": "Class TerminalGrpcRouterProto.TerminalGrpcRouterProtoClient",
    "summary": "Class TerminalGrpcRouterProto.TerminalGrpcRouterProtoClient Namespace OneImlx.Terminal.Client Assembly OneImlx.Terminal.Client.dll Client for TerminalGrpcRouterProto public class TerminalGrpcRouterProto.TerminalGrpcRouterProtoClient : ClientBase<TerminalGrpcRouterProto.TerminalGrpcRouterProtoClient> Inheritance object ClientBase ClientBase<TerminalGrpcRouterProto.TerminalGrpcRouterProtoClient> TerminalGrpcRouterProto.TerminalGrpcRouterProtoClient Inherited Members ClientBase<TerminalGrpcRouterProto.TerminalGrpcRouterProtoClient>.WithHost(string) ClientBase.CallInvoker object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ClientExtensions.SendToTerminalAsync(TerminalGrpcRouterProto.TerminalGrpcRouterProtoClient, TerminalInputOutput, CancellationToken, JsonSerializerOptions?) Constructors TerminalGrpcRouterProtoClient() Protected parameterless constructor to allow creation of test doubles. protected TerminalGrpcRouterProtoClient() TerminalGrpcRouterProtoClient(CallInvoker) Creates a new client for TerminalGrpcRouterProto that uses a custom CallInvoker. public TerminalGrpcRouterProtoClient(CallInvoker callInvoker) Parameters callInvoker CallInvoker The callInvoker to use to make remote calls. TerminalGrpcRouterProtoClient(ChannelBase) Creates a new client for TerminalGrpcRouterProto public TerminalGrpcRouterProtoClient(ChannelBase channel) Parameters channel ChannelBase The channel to use to make remote calls. TerminalGrpcRouterProtoClient(ClientBaseConfiguration) Protected constructor to allow creation of configured clients. protected TerminalGrpcRouterProtoClient(ClientBase.ClientBaseConfiguration configuration) Parameters configuration ClientBase.ClientBaseConfiguration The client configuration. Methods NewInstance(ClientBaseConfiguration) Creates a new instance of client from given ClientBaseConfiguration. protected override TerminalGrpcRouterProto.TerminalGrpcRouterProtoClient NewInstance(ClientBase.ClientBaseConfiguration configuration) Parameters configuration ClientBase.ClientBaseConfiguration Returns TerminalGrpcRouterProto.TerminalGrpcRouterProtoClient RouteCommand(TerminalGrpcRouterProtoInput, CallOptions) Routes a command asynchronously. public virtual TerminalGrpcRouterProtoOutput RouteCommand(TerminalGrpcRouterProtoInput request, CallOptions options) Parameters request TerminalGrpcRouterProtoInput The request to send to the server. options CallOptions The options for the call. Returns TerminalGrpcRouterProtoOutput The response received from the server. RouteCommand(TerminalGrpcRouterProtoInput, Metadata, DateTime?, CancellationToken) Routes a command asynchronously. public virtual TerminalGrpcRouterProtoOutput RouteCommand(TerminalGrpcRouterProtoInput request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default) Parameters request TerminalGrpcRouterProtoInput The request to send to the server. headers Metadata The initial metadata to send with the call. This parameter is optional. deadline DateTime? An optional deadline for the call. The call will be cancelled if deadline is hit. cancellationToken CancellationToken An optional token for canceling the call. Returns TerminalGrpcRouterProtoOutput The response received from the server. RouteCommandAsync(TerminalGrpcRouterProtoInput, CallOptions) Routes a command asynchronously. public virtual AsyncUnaryCall<TerminalGrpcRouterProtoOutput> RouteCommandAsync(TerminalGrpcRouterProtoInput request, CallOptions options) Parameters request TerminalGrpcRouterProtoInput The request to send to the server. options CallOptions The options for the call. Returns AsyncUnaryCall<TerminalGrpcRouterProtoOutput> The call object. RouteCommandAsync(TerminalGrpcRouterProtoInput, Metadata, DateTime?, CancellationToken) Routes a command asynchronously. public virtual AsyncUnaryCall<TerminalGrpcRouterProtoOutput> RouteCommandAsync(TerminalGrpcRouterProtoInput request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default) Parameters request TerminalGrpcRouterProtoInput The request to send to the server. headers Metadata The initial metadata to send with the call. This parameter is optional. deadline DateTime? An optional deadline for the call. The call will be cancelled if deadline is hit. cancellationToken CancellationToken An optional token for canceling the call. Returns AsyncUnaryCall<TerminalGrpcRouterProtoOutput> The call object."
  },
  "api/OneImlx.Terminal.Client.TerminalGrpcRouterProto.html": {
    "href": "api/OneImlx.Terminal.Client.TerminalGrpcRouterProto.html",
    "title": "Class TerminalGrpcRouterProto",
    "summary": "Class TerminalGrpcRouterProto Namespace OneImlx.Terminal.Client Assembly OneImlx.Terminal.Client.dll The OneImlx terminal router command service to request the command. public static class TerminalGrpcRouterProto Inheritance object TerminalGrpcRouterProto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Descriptor Service descriptor public static ServiceDescriptor Descriptor { get; } Property Value ServiceDescriptor"
  },
  "api/OneImlx.Terminal.Client.TerminalGrpcRouterProtoInput.html": {
    "href": "api/OneImlx.Terminal.Client.TerminalGrpcRouterProtoInput.html",
    "title": "Class TerminalGrpcRouterProtoInput",
    "summary": "Class TerminalGrpcRouterProtoInput Namespace OneImlx.Terminal.Client Assembly OneImlx.Terminal.Client.dll The terminal router command request. public sealed class TerminalGrpcRouterProtoInput : IMessage<TerminalGrpcRouterProtoInput>, IEquatable<TerminalGrpcRouterProtoInput>, IDeepCloneable<TerminalGrpcRouterProtoInput>, IBufferMessage, IMessage Inheritance object TerminalGrpcRouterProtoInput Implements IMessage<TerminalGrpcRouterProtoInput> IEquatable<TerminalGrpcRouterProtoInput> IDeepCloneable<TerminalGrpcRouterProtoInput> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TerminalGrpcRouterProtoInput() public TerminalGrpcRouterProtoInput() TerminalGrpcRouterProtoInput(TerminalGrpcRouterProtoInput) public TerminalGrpcRouterProtoInput(TerminalGrpcRouterProtoInput other) Parameters other TerminalGrpcRouterProtoInput Fields InputJsonFieldNumber Field number for the \"InputJson\" field. public const int InputJsonFieldNumber = 1 Field Value int Properties Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor InputJson The terminal input. public string InputJson { get; set; } Property Value string Parser public static MessageParser<TerminalGrpcRouterProtoInput> Parser { get; } Property Value MessageParser<TerminalGrpcRouterProtoInput> Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. Clone() Creates a deep clone of this object. public TerminalGrpcRouterProtoInput Clone() Returns TerminalGrpcRouterProtoInput A deep clone of this object. Equals(TerminalGrpcRouterProtoInput) public bool Equals(TerminalGrpcRouterProtoInput other) Parameters other TerminalGrpcRouterProtoInput Returns bool Equals(object) public override bool Equals(object other) Parameters other object Returns bool GetHashCode() public override int GetHashCode() Returns int MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(TerminalGrpcRouterProtoInput) Merges the given message into this one. public void MergeFrom(TerminalGrpcRouterProtoInput other) Parameters other TerminalGrpcRouterProtoInput Remarks See the user guide for precise merge semantics. ToString() public override string ToString() Returns string WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/OneImlx.Terminal.Client.TerminalGrpcRouterProtoOutput.html": {
    "href": "api/OneImlx.Terminal.Client.TerminalGrpcRouterProtoOutput.html",
    "title": "Class TerminalGrpcRouterProtoOutput",
    "summary": "Class TerminalGrpcRouterProtoOutput Namespace OneImlx.Terminal.Client Assembly OneImlx.Terminal.Client.dll The terminal router command request. public sealed class TerminalGrpcRouterProtoOutput : IMessage<TerminalGrpcRouterProtoOutput>, IEquatable<TerminalGrpcRouterProtoOutput>, IDeepCloneable<TerminalGrpcRouterProtoOutput>, IBufferMessage, IMessage Inheritance object TerminalGrpcRouterProtoOutput Implements IMessage<TerminalGrpcRouterProtoOutput> IEquatable<TerminalGrpcRouterProtoOutput> IDeepCloneable<TerminalGrpcRouterProtoOutput> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TerminalGrpcRouterProtoOutput() public TerminalGrpcRouterProtoOutput() TerminalGrpcRouterProtoOutput(TerminalGrpcRouterProtoOutput) public TerminalGrpcRouterProtoOutput(TerminalGrpcRouterProtoOutput other) Parameters other TerminalGrpcRouterProtoOutput Fields OutputJsonFieldNumber Field number for the \"OutputJson\" field. public const int OutputJsonFieldNumber = 1 Field Value int Properties Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor OutputJson The terminal output. public string OutputJson { get; set; } Property Value string Parser public static MessageParser<TerminalGrpcRouterProtoOutput> Parser { get; } Property Value MessageParser<TerminalGrpcRouterProtoOutput> Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. Clone() Creates a deep clone of this object. public TerminalGrpcRouterProtoOutput Clone() Returns TerminalGrpcRouterProtoOutput A deep clone of this object. Equals(TerminalGrpcRouterProtoOutput) public bool Equals(TerminalGrpcRouterProtoOutput other) Parameters other TerminalGrpcRouterProtoOutput Returns bool Equals(object) public override bool Equals(object other) Parameters other object Returns bool GetHashCode() public override int GetHashCode() Returns int MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(TerminalGrpcRouterProtoOutput) Merges the given message into this one. public void MergeFrom(TerminalGrpcRouterProtoOutput other) Parameters other TerminalGrpcRouterProtoOutput Remarks See the user guide for precise merge semantics. ToString() public override string ToString() Returns string WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/OneImlx.Terminal.Client.html": {
    "href": "api/OneImlx.Terminal.Client.html",
    "title": "Namespace OneImlx.Terminal.Client",
    "summary": "Namespace OneImlx.Terminal.Client Classes OneimlxTerminalReflection Holder for reflection information generated from Protos/oneimlx_terminal.proto TerminalGrpcRouterProto The OneImlx terminal router command service to request the command. TerminalGrpcRouterProto.TerminalGrpcRouterProtoClient Client for TerminalGrpcRouterProto TerminalGrpcRouterProtoInput The terminal router command request. TerminalGrpcRouterProtoOutput The terminal router command request."
  },
  "api/OneImlx.Terminal.Commands.Argument.html": {
    "href": "api/OneImlx.Terminal.Commands.Argument.html",
    "title": "Class Argument",
    "summary": "Class Argument Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll The Argument class is a runtime validated representation of an actual command argument and its value passed by a user or an application. public sealed class Argument : IEquatable<Argument?>, IKeyAsId, ICommandValue Inheritance object Argument Implements IEquatable<Argument> IKeyAsId ICommandValue Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks An argument id is always unique within a command. By design Argument implements the default equality IEquatable<T> and GetHashCode() using Id property. Thus, two arguments with the same id are equal irrespective of other property values. This is done to improve performance during lookup and avoid multiple arguments with same identifiers. The arguments can have same ids across multiple commands. Each Command has ArgumentDescriptors collection that contains attributes with unique ids. Constructors Argument(ArgumentDescriptor, object) Initialize a new instance.. public Argument(ArgumentDescriptor argumentDescriptor, object value) Parameters argumentDescriptor ArgumentDescriptor The argument descriptor. value object The argument value. Properties DataType The option data type. public string DataType { get; } Property Value string Descriptor The argument descriptor. public ArgumentDescriptor Descriptor { get; } Property Value ArgumentDescriptor Id The argument id. public string Id { get; } Property Value string Remarks The argument id is unique with in a command. Value The argument value. public object Value { get; set; } Property Value object Methods ChangeValueType(Type) Changes the argument value to the specified type. public void ChangeValueType(Type type) Parameters type Type The new type to use. Equals(Argument?) Indicates whether the current argument is equal to another argument. public bool Equals(Argument? other) Parameters other Argument The other argument. Returns bool true if the current argument is equal to the other argument; otherwise, false. Equals(object?) Indicates whether the current argument is equal to another argument. public override bool Equals(object? obj) Parameters obj object The other argument. Returns bool true if the current argument is equal to the other argument; otherwise, false. GetHashCode() Returns the hash code for this argument. public override int GetHashCode() Returns int Operators operator ==(Argument?, Argument?) Indicates whether the current argument is equal to another argument. public static bool operator ==(Argument? left, Argument? right) Parameters left Argument The left argument. right Argument The right argument. Returns bool true if the current argument is equal to the other argument; otherwise, false. operator !=(Argument?, Argument?) Indicates whether the current argument is not equal to another argument. public static bool operator !=(Argument? left, Argument? right) Parameters left Argument The left argument. right Argument The right argument. Returns bool true if the current argument is not equal to the other argument; otherwise, false. See Also Command"
  },
  "api/OneImlx.Terminal.Commands.ArgumentDescriptor.html": {
    "href": "api/OneImlx.Terminal.Commands.ArgumentDescriptor.html",
    "title": "Class ArgumentDescriptor",
    "summary": "Class ArgumentDescriptor Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll The ArgumentDescriptor class defines the command argument identity, data type, and data validation behavior. We also refer to arguments as command arguments. public sealed class ArgumentDescriptor : IKeyAsId Inheritance object ArgumentDescriptor Implements IKeyAsId Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ArgumentDescriptor(int, string, string, string, ArgumentFlags) Initializes a new instance of ArgumentDescriptor. public ArgumentDescriptor(int order, string id, string dataType, string description, ArgumentFlags flags) Parameters order int The argument order. id string The argument identifier. dataType string The argument data type. description string The argument description. flags ArgumentFlags The argument flags. Properties DataType The argument data type. public string DataType { get; } Property Value string Description The argument description. public string Description { get; } Property Value string Flags The argument flags. public ArgumentFlags Flags { get; } Property Value ArgumentFlags Id The argument identifier. public string Id { get; } Property Value string Order The argument order. public int Order { get; } Property Value int ValueCheckers The argument value checkers. public IEnumerable<IValueChecker<Argument>>? ValueCheckers { get; set; } Property Value IEnumerable<IValueChecker<Argument>> See Also Argument"
  },
  "api/OneImlx.Terminal.Commands.ArgumentDescriptors.html": {
    "href": "api/OneImlx.Terminal.Commands.ArgumentDescriptors.html",
    "title": "Class ArgumentDescriptors",
    "summary": "Class ArgumentDescriptors Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll The readonly ArgumentDescriptor keyed collection. public sealed class ArgumentDescriptors : IReadOnlyCollection<ArgumentDescriptor>, IEnumerable<ArgumentDescriptor>, IEnumerable Inheritance object ArgumentDescriptors Implements IReadOnlyCollection<ArgumentDescriptor> IEnumerable<ArgumentDescriptor> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ArgumentDescriptors(ITerminalTextHandler, IEnumerable<ArgumentDescriptor>) Initializes a new instance. public ArgumentDescriptors(ITerminalTextHandler textHandler, IEnumerable<ArgumentDescriptor> arguments) Parameters textHandler ITerminalTextHandler arguments IEnumerable<ArgumentDescriptor> Properties Count The argument descriptor count. public int Count { get; } Property Value int this[int] Gets the argument descriptor by its index. public ArgumentDescriptor this[int index] { get; } Parameters index int The argument index. Property Value ArgumentDescriptor this[string] Gets the argument descriptor by its id. public ArgumentDescriptor this[string id] { get; } Parameters id string The argument descriptor identifier. Property Value ArgumentDescriptor TextHandler The text handler. public ITerminalTextHandler TextHandler { get; } Property Value ITerminalTextHandler Methods GetEnumerator() public IEnumerator<ArgumentDescriptor> GetEnumerator() Returns IEnumerator<ArgumentDescriptor>"
  },
  "api/OneImlx.Terminal.Commands.ArgumentFlags.html": {
    "href": "api/OneImlx.Terminal.Commands.ArgumentFlags.html",
    "title": "Enum ArgumentFlags",
    "summary": "Enum ArgumentFlags Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll Defines special argument flags. [Flags] public enum ArgumentFlags Fields Disabled = 8 The argument is disabled. None = 0 No special flags. Obsolete = 4 The argument is obsolete. Required = 2 The argument is required."
  },
  "api/OneImlx.Terminal.Commands.Arguments.html": {
    "href": "api/OneImlx.Terminal.Commands.Arguments.html",
    "title": "Class Arguments",
    "summary": "Class Arguments Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll The readonly Argument keyed collection. public sealed class Arguments : IReadOnlyCollection<Argument>, IEnumerable<Argument>, IEnumerable Inheritance object Arguments Implements IReadOnlyCollection<Argument> IEnumerable<Argument> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Arguments(ITerminalTextHandler, IEnumerable<Argument>) Initializes a new instance. public Arguments(ITerminalTextHandler textHandler, IEnumerable<Argument> arguments) Parameters textHandler ITerminalTextHandler arguments IEnumerable<Argument> Properties Count The argument count. public int Count { get; } Property Value int this[int] Gets the argument by its index. public Argument this[int index] { get; } Parameters index int The argument index. Property Value Argument this[string] Gets the argument by its id. public Argument this[string id] { get; } Parameters id string The argument identifier. Property Value Argument TextHandler The text handler. public ITerminalTextHandler TextHandler { get; } Property Value ITerminalTextHandler Methods GetEnumerator() public IEnumerator<Argument> GetEnumerator() Returns IEnumerator<Argument>"
  },
  "api/OneImlx.Terminal.Commands.Checkers.ArgumentChecker.html": {
    "href": "api/OneImlx.Terminal.Commands.Checkers.ArgumentChecker.html",
    "title": "Class ArgumentChecker",
    "summary": "Class ArgumentChecker Namespace OneImlx.Terminal.Commands.Checkers Assembly OneImlx.Terminal.dll The default argument checker. public class ArgumentChecker : IArgumentChecker Inheritance object ArgumentChecker Implements IArgumentChecker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The ArgumentChecker uses the ValidationAttribute to check an argument value. Constructors ArgumentChecker(IDataTypeMapper<Argument>, TerminalOptions) Initialize a new instance. public ArgumentChecker(IDataTypeMapper<Argument> mapper, TerminalOptions options) Parameters mapper IDataTypeMapper<Argument> The argument data-type mapper. options TerminalOptions The configuration options. Methods CheckArgumentAsync(Argument) Checks Argument asynchronously. public Task<ArgumentCheckerResult> CheckArgumentAsync(Argument argument) Parameters argument Argument The argument to check. Returns Task<ArgumentCheckerResult> The ArgumentCheckerResult instance. StrictTypeCheckingAsync(Argument, DataTypeMapperResult) Checks the argument value compatibility. protected Task<OptionCheckerResult> StrictTypeCheckingAsync(Argument argument, DataTypeMapperResult mapperResult) Parameters argument Argument mapperResult DataTypeMapperResult Returns Task<OptionCheckerResult>"
  },
  "api/OneImlx.Terminal.Commands.Checkers.ArgumentCheckerResult.html": {
    "href": "api/OneImlx.Terminal.Commands.Checkers.ArgumentCheckerResult.html",
    "title": "Class ArgumentCheckerResult",
    "summary": "Class ArgumentCheckerResult Namespace OneImlx.Terminal.Commands.Checkers Assembly OneImlx.Terminal.dll The argument checker result. public class ArgumentCheckerResult Inheritance object ArgumentCheckerResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ArgumentCheckerResult(Type) Initialize a new instance. public ArgumentCheckerResult(Type mappedType) Parameters mappedType Type The mapped type to validate the option. Properties MappedType The mapped system type. public Type MappedType { get; } Property Value Type See Also IArgumentChecker CommandContext"
  },
  "api/OneImlx.Terminal.Commands.Checkers.CommandChecker.html": {
    "href": "api/OneImlx.Terminal.Commands.Checkers.CommandChecker.html",
    "title": "Class CommandChecker",
    "summary": "Class CommandChecker Namespace OneImlx.Terminal.Commands.Checkers Assembly OneImlx.Terminal.dll The default command checker. public sealed class CommandChecker : ICommandChecker Inheritance object CommandChecker Implements ICommandChecker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CommandChecker(IOptionChecker, IArgumentChecker, TerminalOptions, ILogger<CommandChecker>) Initialize a new instance. public CommandChecker(IOptionChecker optionChecker, IArgumentChecker argumentChecker, TerminalOptions terminalOptions, ILogger<CommandChecker> logger) Parameters optionChecker IOptionChecker The option checker. argumentChecker IArgumentChecker The argument checker. terminalOptions TerminalOptions The configuration options. logger ILogger<CommandChecker> The logger. Methods CheckCommandAsync(CommandContext) Checks Command asynchronously. public Task<CommandCheckerResult> CheckCommandAsync(CommandContext context) Parameters context CommandContext The command check context. Returns Task<CommandCheckerResult> The CommandCheckerResult instance."
  },
  "api/OneImlx.Terminal.Commands.Checkers.CommandCheckerResult.html": {
    "href": "api/OneImlx.Terminal.Commands.Checkers.CommandCheckerResult.html",
    "title": "Class CommandCheckerResult",
    "summary": "Class CommandCheckerResult Namespace OneImlx.Terminal.Commands.Checkers Assembly OneImlx.Terminal.dll The command checker result. public class CommandCheckerResult Inheritance object CommandCheckerResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/OneImlx.Terminal.Commands.Checkers.ConfigurationOptionsChecker.html": {
    "href": "api/OneImlx.Terminal.Commands.Checkers.ConfigurationOptionsChecker.html",
    "title": "Class ConfigurationOptionsChecker",
    "summary": "Class ConfigurationOptionsChecker Namespace OneImlx.Terminal.Commands.Checkers Assembly OneImlx.Terminal.dll The default IConfigurationOptionsChecker. public class ConfigurationOptionsChecker : IConfigurationOptionsChecker Inheritance object ConfigurationOptionsChecker Implements IConfigurationOptionsChecker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The CheckAsync(TerminalOptions) does not return any result. It throws TerminalException if you do not configure an option correctly. Constructors ConfigurationOptionsChecker(IServiceProvider) Initializes a new instance. public ConfigurationOptionsChecker(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Methods CheckAsync(TerminalOptions) Checks the configured TerminalOptions. public Task CheckAsync(TerminalOptions options) Parameters options TerminalOptions The configuration options. Returns Task Exceptions NotImplementedException"
  },
  "api/OneImlx.Terminal.Commands.Checkers.DataTypeMapper-1.html": {
    "href": "api/OneImlx.Terminal.Commands.Checkers.DataTypeMapper-1.html",
    "title": "Class DataTypeMapper<TValue>",
    "summary": "Class DataTypeMapper<TValue> Namespace OneImlx.Terminal.Commands.Checkers Assembly OneImlx.Terminal.dll The default option data type mapper. public sealed class DataTypeMapper<TValue> : IDataTypeMapper<TValue> where TValue : ICommandValue Type Parameters TValue Inheritance object DataTypeMapper<TValue> Implements IDataTypeMapper<TValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DataTypeMapper(TerminalOptions, ILogger<DataTypeMapper<TValue>>) Initialize a new instance. public DataTypeMapper(TerminalOptions options, ILogger<DataTypeMapper<TValue>> logger) Parameters options TerminalOptions The configuration options. logger ILogger<DataTypeMapper<TValue>> The logger. Methods MapToTypeAsync(TValue) Maps a data type to Type asynchronously. public Task<DataTypeMapperResult> MapToTypeAsync(TValue value) Parameters value TValue The value to map. Returns Task<DataTypeMapperResult> The"
  },
  "api/OneImlx.Terminal.Commands.Checkers.DataTypeMapperResult.html": {
    "href": "api/OneImlx.Terminal.Commands.Checkers.DataTypeMapperResult.html",
    "title": "Class DataTypeMapperResult",
    "summary": "Class DataTypeMapperResult Namespace OneImlx.Terminal.Commands.Checkers Assembly OneImlx.Terminal.dll The option data-type mapper result. public sealed class DataTypeMapperResult Inheritance object DataTypeMapperResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DataTypeMapperResult(Type) Initialize a new instance. public DataTypeMapperResult(Type mappedType) Parameters mappedType Type The mapped type. Exceptions ArgumentNullException Null mapped type. Properties MappedType The mapped system type. public Type MappedType { get; } Property Value Type"
  },
  "api/OneImlx.Terminal.Commands.Checkers.DataValidationValueChecker-1.html": {
    "href": "api/OneImlx.Terminal.Commands.Checkers.DataValidationValueChecker-1.html",
    "title": "Class DataValidationValueChecker<TValue>",
    "summary": "Class DataValidationValueChecker<TValue> Namespace OneImlx.Terminal.Commands.Checkers Assembly OneImlx.Terminal.dll The default IValueChecker<T> that uses ValidationAttribute to check an option value. public sealed class DataValidationValueChecker<TValue> : IValueChecker<TValue> where TValue : ICommandValue Type Parameters TValue Inheritance object DataValidationValueChecker<TValue> Implements IValueChecker<TValue> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DataValidationValueChecker(ValidationAttribute) Initializes a new instance. public DataValidationValueChecker(ValidationAttribute validationAttribute) Parameters validationAttribute ValidationAttribute The validation attribute. Properties ValidationAttribute The validation attribute. public ValidationAttribute ValidationAttribute { get; } Property Value ValidationAttribute Methods CheckValueAsync(TValue) Checks the option value. public Task CheckValueAsync(TValue value) Parameters value TValue The entity to check. Returns Task Equals(DataValidationValueChecker<TValue>) public bool Equals(DataValidationValueChecker<TValue> other) Parameters other DataValidationValueChecker<TValue> Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int GetRawType() Returns the underlying checker raw type. public Type GetRawType() Returns Type Operators operator ==(DataValidationValueChecker<TValue>?, DataValidationValueChecker<TValue>?) public static bool operator ==(DataValidationValueChecker<TValue>? left, DataValidationValueChecker<TValue>? right) Parameters left DataValidationValueChecker<TValue> right DataValidationValueChecker<TValue> Returns bool operator !=(DataValidationValueChecker<TValue>?, DataValidationValueChecker<TValue>?) public static bool operator !=(DataValidationValueChecker<TValue>? left, DataValidationValueChecker<TValue>? right) Parameters left DataValidationValueChecker<TValue> right DataValidationValueChecker<TValue> Returns bool"
  },
  "api/OneImlx.Terminal.Commands.Checkers.IArgumentChecker.html": {
    "href": "api/OneImlx.Terminal.Commands.Checkers.IArgumentChecker.html",
    "title": "Interface IArgumentChecker",
    "summary": "Interface IArgumentChecker Namespace OneImlx.Terminal.Commands.Checkers Assembly OneImlx.Terminal.dll An abstraction to check an Argument. public interface IArgumentChecker Methods CheckArgumentAsync(Argument) Checks Argument asynchronously. Task<ArgumentCheckerResult> CheckArgumentAsync(Argument argument) Parameters argument Argument The argument to check. Returns Task<ArgumentCheckerResult> The ArgumentCheckerResult instance."
  },
  "api/OneImlx.Terminal.Commands.Checkers.ICommandChecker.html": {
    "href": "api/OneImlx.Terminal.Commands.Checkers.ICommandChecker.html",
    "title": "Interface ICommandChecker",
    "summary": "Interface ICommandChecker Namespace OneImlx.Terminal.Commands.Checkers Assembly OneImlx.Terminal.dll An abstraction to check a Command. public interface ICommandChecker Methods CheckCommandAsync(CommandContext) Checks Command asynchronously. Task<CommandCheckerResult> CheckCommandAsync(CommandContext context) Parameters context CommandContext The command check context. Returns Task<CommandCheckerResult> The CommandCheckerResult instance."
  },
  "api/OneImlx.Terminal.Commands.Checkers.IConfigurationOptionsChecker.html": {
    "href": "api/OneImlx.Terminal.Commands.Checkers.IConfigurationOptionsChecker.html",
    "title": "Interface IConfigurationOptionsChecker",
    "summary": "Interface IConfigurationOptionsChecker Namespace OneImlx.Terminal.Commands.Checkers Assembly OneImlx.Terminal.dll An abstraction of TerminalOptions checker. public interface IConfigurationOptionsChecker Methods CheckAsync(TerminalOptions) Checks the terminal configuration options asynchronously. Task CheckAsync(TerminalOptions context) Parameters context TerminalOptions The configuration options check context. Returns Task"
  },
  "api/OneImlx.Terminal.Commands.Checkers.IDataTypeMapper-1.html": {
    "href": "api/OneImlx.Terminal.Commands.Checkers.IDataTypeMapper-1.html",
    "title": "Interface IDataTypeMapper<TValue>",
    "summary": "Interface IDataTypeMapper<TValue> Namespace OneImlx.Terminal.Commands.Checkers Assembly OneImlx.Terminal.dll An abstraction to map an DataType to Type. public interface IDataTypeMapper<TValue> where TValue : ICommandValue Type Parameters TValue Methods MapToTypeAsync(TValue) Maps a data type to Type asynchronously. Task<DataTypeMapperResult> MapToTypeAsync(TValue value) Parameters value TValue The value to map. Returns Task<DataTypeMapperResult> The"
  },
  "api/OneImlx.Terminal.Commands.Checkers.IOptionChecker.html": {
    "href": "api/OneImlx.Terminal.Commands.Checkers.IOptionChecker.html",
    "title": "Interface IOptionChecker",
    "summary": "Interface IOptionChecker Namespace OneImlx.Terminal.Commands.Checkers Assembly OneImlx.Terminal.dll An abstraction to check an Option. public interface IOptionChecker Methods CheckOptionAsync(Option) Checks Option asynchronously. Task<OptionCheckerResult> CheckOptionAsync(Option option) Parameters option Option The option to context. Returns Task<OptionCheckerResult> The OptionCheckerResult instance."
  },
  "api/OneImlx.Terminal.Commands.Checkers.IValueChecker-1.html": {
    "href": "api/OneImlx.Terminal.Commands.Checkers.IValueChecker-1.html",
    "title": "Interface IValueChecker<T>",
    "summary": "Interface IValueChecker<T> Namespace OneImlx.Terminal.Commands.Checkers Assembly OneImlx.Terminal.dll An abstraction to check a ICommandValue. public interface IValueChecker<T> where T : ICommandValue Type Parameters T Methods CheckValueAsync(T) Checks the option value. Task CheckValueAsync(T value) Parameters value T The entity to check. Returns Task GetRawType() Returns the underlying checker raw type. Type GetRawType() Returns Type"
  },
  "api/OneImlx.Terminal.Commands.Checkers.OptionChecker.html": {
    "href": "api/OneImlx.Terminal.Commands.Checkers.OptionChecker.html",
    "title": "Class OptionChecker",
    "summary": "Class OptionChecker Namespace OneImlx.Terminal.Commands.Checkers Assembly OneImlx.Terminal.dll The default option checker. public class OptionChecker : IOptionChecker Inheritance object OptionChecker Implements IOptionChecker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The OptionChecker uses the ValidationAttribute to check an option value. Constructors OptionChecker(IDataTypeMapper<Option>, TerminalOptions) Initialize a new instance. public OptionChecker(IDataTypeMapper<Option> mapper, TerminalOptions options) Parameters mapper IDataTypeMapper<Option> The option data-type mapper. options TerminalOptions The configuration options. Methods CheckOptionAsync(Option) Checks Option asynchronously. public Task<OptionCheckerResult> CheckOptionAsync(Option option) Parameters option Option The option to context. Returns Task<OptionCheckerResult> The OptionCheckerResult instance. StrictTypeCheckingAsync(Option, DataTypeMapperResult) Checks the option value compatibility. protected Task<OptionCheckerResult> StrictTypeCheckingAsync(Option option, DataTypeMapperResult mapperResult) Parameters option Option mapperResult DataTypeMapperResult Returns Task<OptionCheckerResult>"
  },
  "api/OneImlx.Terminal.Commands.Checkers.OptionCheckerResult.html": {
    "href": "api/OneImlx.Terminal.Commands.Checkers.OptionCheckerResult.html",
    "title": "Class OptionCheckerResult",
    "summary": "Class OptionCheckerResult Namespace OneImlx.Terminal.Commands.Checkers Assembly OneImlx.Terminal.dll The option checker result. public class OptionCheckerResult Inheritance object OptionCheckerResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OptionCheckerResult(Type) Initialize a new instance. public OptionCheckerResult(Type mappedType) Parameters mappedType Type The mapped type to validate the option. Properties MappedType The mapped system type. public Type MappedType { get; } Property Value Type See Also IOptionChecker CommandContext"
  },
  "api/OneImlx.Terminal.Commands.Checkers.html": {
    "href": "api/OneImlx.Terminal.Commands.Checkers.html",
    "title": "Namespace OneImlx.Terminal.Commands.Checkers",
    "summary": "Namespace OneImlx.Terminal.Commands.Checkers Classes ArgumentChecker The default argument checker. ArgumentCheckerResult The argument checker result. CommandChecker The default command checker. CommandCheckerResult The command checker result. ConfigurationOptionsChecker The default IConfigurationOptionsChecker. DataTypeMapperResult The option data-type mapper result. DataTypeMapper<TValue> The default option data type mapper. DataValidationValueChecker<TValue> The default IValueChecker<T> that uses ValidationAttribute to check an option value. OptionChecker The default option checker. OptionCheckerResult The option checker result. Interfaces IArgumentChecker An abstraction to check an Argument. ICommandChecker An abstraction to check a Command. IConfigurationOptionsChecker An abstraction of TerminalOptions checker. IDataTypeMapper<TValue> An abstraction to map an DataType to Type. IOptionChecker An abstraction to check an Option. IValueChecker<T> An abstraction to check a ICommandValue."
  },
  "api/OneImlx.Terminal.Commands.Command.html": {
    "href": "api/OneImlx.Terminal.Commands.Command.html",
    "title": "Class Command",
    "summary": "Class Command Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll An immutable command. A command is a specific action or a set of actions that a user or an application requests the underlying system to perform. It can be a simple action such as invoking a system method or an OS command or representing a complex operation that calls a set of protected APIs over the internal or external network. A command can virtually do anything in the context of your application or service. public sealed class Command Inheritance object Command Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Command(CommandDescriptor, Arguments?, Options?) Initializes a new instance. public Command(CommandDescriptor commandDescriptor, Arguments? arguments = null, Options? options = null) Parameters commandDescriptor CommandDescriptor The command descriptor. arguments Arguments The command arguments. options Options The command options. Properties Arguments The command arguments. public Arguments? Arguments { get; set; } Property Value Arguments CustomProperties The command custom properties. public Dictionary<string, object>? CustomProperties { get; } Property Value Dictionary<string, object> Description The command description. public string? Description { get; } Property Value string Descriptor The command descriptor. public CommandDescriptor Descriptor { get; } Property Value CommandDescriptor Id The command id unique. public string Id { get; } Property Value string Name The command name. public string Name { get; } Property Value string Options The command options. public Options? Options { get; set; } Property Value Options Methods GetRequiredArgumentValue<TValue>(int) Get the argument value at the specified index. public TValue GetRequiredArgumentValue<TValue>(int index) Parameters index int The argument index. Returns TValue The option value. Type Parameters TValue The type of value. Exceptions TerminalException If the option is not supported. GetRequiredArgumentValue<TValue>(string) Get the argument value for the specified id. public TValue GetRequiredArgumentValue<TValue>(string id) Parameters id string The argument id. Returns TValue The option value. Type Parameters TValue The type of value. Exceptions TerminalException If the option is not supported. GetRequiredOptionValue<TValue>(string) Get the option value for the specified identifier. public TValue GetRequiredOptionValue<TValue>(string idOrAlias) Parameters idOrAlias string The option id or its alias. Returns TValue The option value. Type Parameters TValue The type of value. Exceptions TerminalException If the option is not supported. TryGetArgument(string, out Argument?) Attempts to get the argument for the specified identifier. public bool TryGetArgument(string id, out Argument? argument) Parameters id string The argument identifier. argument Argument The argument if found. Returns bool true if the argument is found. TryGetArgumentValue<TValue>(string, out TValue?) Attempts to get the argument value for the specified index. public bool TryGetArgumentValue<TValue>(string id, out TValue? value) Parameters id string The argument identifier. value TValue The argument value. Returns bool The option value. Type Parameters TValue The type of value. Exceptions TerminalException If the argument is not supported. TryGetOption(string, out Option?) Attempts to get the option for the specified identifier. public bool TryGetOption(string idOrAlias, out Option? option) Parameters idOrAlias string The option identifier or its alias. option Option The option if found. Returns bool true if the option is found. TryGetOptionValue<TValue>(string, out TValue?) Attempts to get the option value for the specified identifier. public bool TryGetOptionValue<TValue>(string idOrAlias, out TValue? value) Parameters idOrAlias string The option id or its alias. value TValue The option value. Returns bool The option value. Type Parameters TValue The type of value. Exceptions TerminalException If the option is not supported. See Also CommandDescriptor Option Options"
  },
  "api/OneImlx.Terminal.Commands.CommandContext.html": {
    "href": "api/OneImlx.Terminal.Commands.CommandContext.html",
    "title": "Class CommandContext",
    "summary": "Class CommandContext Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll The generic command router context. public sealed class CommandContext Inheritance object CommandContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CommandContext(TerminalRequest, TerminalRouterContext, Dictionary<string, object>?) The command string. public CommandContext(TerminalRequest request, TerminalRouterContext context, Dictionary<string, object>? properties) Parameters request TerminalRequest The request to process. context TerminalRouterContext The terminal routing context. properties Dictionary<string, object> The additional router properties. Properties License The extracted license. public License? License { get; } Property Value License ParsedCommand The parsed command. public ParsedCommand? ParsedCommand { get; } Property Value ParsedCommand Properties The additional router properties. public Dictionary<string, object>? Properties { get; } Property Value Dictionary<string, object> Request The terminal request. public TerminalRequest Request { get; } Property Value TerminalRequest Result The result of the command execution. public CommandResult? Result { get; } Property Value CommandResult TerminalContext The terminal routing context. public TerminalRouterContext TerminalContext { get; } Property Value TerminalRouterContext Methods EnsureCommand() Ensures the command is available. public Command EnsureCommand() Returns Command The available command. Exceptions TerminalException Thrown when the parsed command is not available. EnsureLicense() Ensures the license is available. public License EnsureLicense() Returns License The available license. Exceptions TerminalException Thrown when the license is not available. EnsureParsedCommand() Ensures the parsed command is available. public ParsedCommand EnsureParsedCommand() Returns ParsedCommand The available parsed command. Exceptions TerminalException Thrown when the parsed command is not available. EnsureResult() Ensures the result is available. public CommandResult EnsureResult() Returns CommandResult The available result. Exceptions TerminalException Thrown when the result is not available."
  },
  "api/OneImlx.Terminal.Commands.CommandDescriptor.html": {
    "href": "api/OneImlx.Terminal.Commands.CommandDescriptor.html",
    "title": "Class CommandDescriptor",
    "summary": "Class CommandDescriptor Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll The CommandDescriptor defines the command identity and its supported options that an end-user or an application can use. You can also describe the command behavior, such as whether the command is a root, grouped, or subcommand. public sealed class CommandDescriptor Inheritance object CommandDescriptor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CommandDescriptor(string, string, string, CommandType, CommandFlags, OwnerIdCollection?, ArgumentDescriptors?, OptionDescriptors?, TagIdCollection?, Dictionary<string, object>?) Initializes a new instance. public CommandDescriptor(string id, string name, string description, CommandType type, CommandFlags flags, OwnerIdCollection? owners = null, ArgumentDescriptors? argumentDescriptors = null, OptionDescriptors? optionDescriptors = null, TagIdCollection? tagIds = null, Dictionary<string, object>? customProperties = null) Parameters id string The command id. name string The command name. description string The command description. type CommandType The command type. flags CommandFlags The command flags. owners OwnerIdCollection The command owners. argumentDescriptors ArgumentDescriptors The argument descriptors. optionDescriptors OptionDescriptors The option descriptors. tagIds TagIdCollection The tag identifiers. customProperties Dictionary<string, object> The custom properties. Properties ArgumentDescriptors The command argument descriptors. public ArgumentDescriptors? ArgumentDescriptors { get; } Property Value ArgumentDescriptors Checker The command checker. public Type? Checker { get; } Property Value Type CustomProperties The custom properties. public Dictionary<string, object>? CustomProperties { get; } Property Value Dictionary<string, object> Description The command description. public string Description { get; } Property Value string Flags The command flags. public CommandFlags Flags { get; } Property Value CommandFlags Id The command id. public string Id { get; } Property Value string Remarks The command id is unique across all commands within a group or a root. Name The command display name. public string Name { get; } Property Value string OptionDescriptors The command option descriptors. public OptionDescriptors? OptionDescriptors { get; } Property Value OptionDescriptors OwnerIds The command owner identifiers. public OwnerIdCollection? OwnerIds { get; } Property Value OwnerIdCollection Remarks The root command will not have any owner. Runner The command runner. public Type? Runner { get; } Property Value Type TagIds The tags to find the command. public TagIdCollection? TagIds { get; } Property Value TagIdCollection Type The command type. public CommandType Type { get; } Property Value CommandType See Also Command OptionDescriptor ArgumentDescriptor"
  },
  "api/OneImlx.Terminal.Commands.CommandDescriptors.html": {
    "href": "api/OneImlx.Terminal.Commands.CommandDescriptors.html",
    "title": "Class CommandDescriptors",
    "summary": "Class CommandDescriptors Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll The optimized CommandDescriptor collection. public sealed class CommandDescriptors : Dictionary<string, CommandDescriptor>, IDictionary<string, CommandDescriptor>, ICollection<KeyValuePair<string, CommandDescriptor>>, IReadOnlyDictionary<string, CommandDescriptor>, IReadOnlyCollection<KeyValuePair<string, CommandDescriptor>>, IEnumerable<KeyValuePair<string, CommandDescriptor>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable Inheritance object Dictionary<string, CommandDescriptor> CommandDescriptors Implements IDictionary<string, CommandDescriptor> ICollection<KeyValuePair<string, CommandDescriptor>> IReadOnlyDictionary<string, CommandDescriptor> IReadOnlyCollection<KeyValuePair<string, CommandDescriptor>> IEnumerable<KeyValuePair<string, CommandDescriptor>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable Inherited Members Dictionary<string, CommandDescriptor>.Add(string, CommandDescriptor) Dictionary<string, CommandDescriptor>.Clear() Dictionary<string, CommandDescriptor>.ContainsKey(string) Dictionary<string, CommandDescriptor>.ContainsValue(CommandDescriptor) Dictionary<string, CommandDescriptor>.GetEnumerator() Dictionary<string, CommandDescriptor>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<string, CommandDescriptor>.OnDeserialization(object) Dictionary<string, CommandDescriptor>.Remove(string) Dictionary<string, CommandDescriptor>.TryGetValue(string, out CommandDescriptor) Dictionary<string, CommandDescriptor>.Comparer Dictionary<string, CommandDescriptor>.Count Dictionary<string, CommandDescriptor>.this[string] Dictionary<string, CommandDescriptor>.Keys Dictionary<string, CommandDescriptor>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CommandDescriptors(ITerminalTextHandler, IEnumerable<CommandDescriptor>) Initializes a new instance with the specified command descriptors. public CommandDescriptors(ITerminalTextHandler textHandler, IEnumerable<CommandDescriptor> collection) Parameters textHandler ITerminalTextHandler The text handler. collection IEnumerable<CommandDescriptor> The command descriptors. Properties TextHandler The text handler. public ITerminalTextHandler TextHandler { get; } Property Value ITerminalTextHandler"
  },
  "api/OneImlx.Terminal.Commands.CommandFlags.html": {
    "href": "api/OneImlx.Terminal.Commands.CommandFlags.html",
    "title": "Enum CommandFlags",
    "summary": "Enum CommandFlags Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll Defines special command flags. [Flags] public enum CommandFlags Fields Authorize = 2 The command requires an authorization. None = 0 No special flags. Obsolete = 4 The command is obsolete."
  },
  "api/OneImlx.Terminal.Commands.CommandResult.html": {
    "href": "api/OneImlx.Terminal.Commands.CommandResult.html",
    "title": "Class CommandResult",
    "summary": "Class CommandResult Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll Represents the result of a command router. public sealed class CommandResult Inheritance object CommandResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CommandResult() Initializes a new instance of the CommandResult class. public CommandResult() CommandResult(CommandCheckerResult, CommandRunnerResult) Initializes a new instance of the CommandResult class with specified checker and runner results. public CommandResult(CommandCheckerResult checkerResult, CommandRunnerResult runnerResult) Parameters checkerResult CommandCheckerResult The result of the command checker. runnerResult CommandRunnerResult The result of the command runner. Properties CheckerResult Gets the result of the command checker. public CommandCheckerResult? CheckerResult { get; } Property Value CommandCheckerResult RunnerResult Gets the result of the command runner. public CommandRunnerResult? RunnerResult { get; } Property Value CommandRunnerResult Methods EnsureCheckerResult() Ensures that the CheckerResult is not null. public CommandCheckerResult EnsureCheckerResult() Returns CommandCheckerResult Exceptions TerminalException Thrown if CheckerResult is null. EnsureRunnerResult() Ensures that the RunnerResult is not null. public CommandRunnerResult EnsureRunnerResult() Returns CommandRunnerResult Exceptions TerminalException Thrown if RunnerResult is null."
  },
  "api/OneImlx.Terminal.Commands.CommandRouter.html": {
    "href": "api/OneImlx.Terminal.Commands.CommandRouter.html",
    "title": "Class CommandRouter",
    "summary": "Class CommandRouter Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll The default ICommandRouter. public sealed class CommandRouter : ICommandRouter Inheritance object CommandRouter Implements ICommandRouter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CommandRouter(TerminalOptions, ILicenseExtractor, ICommandParser, ICommandHandler, ILogger<CommandRouter>, ITerminalEventHandler?) Initializes a new instance. public CommandRouter(TerminalOptions terminalOptions, ILicenseExtractor licenseExtractor, ICommandParser commandParser, ICommandHandler commandHandler, ILogger<CommandRouter> logger, ITerminalEventHandler? asyncEventHandler = null) Parameters terminalOptions TerminalOptions The configuration options. licenseExtractor ILicenseExtractor The license extractor. commandParser ICommandParser The command parser. commandHandler ICommandHandler The command handler. logger ILogger<CommandRouter> The logger. asyncEventHandler ITerminalEventHandler The event handler. Methods RouteCommandAsync(CommandContext) Routes the command request to the registered handler. public Task<CommandResult> RouteCommandAsync(CommandContext context) Parameters context CommandContext The router context. Returns Task<CommandResult> The CommandResult instance."
  },
  "api/OneImlx.Terminal.Commands.CommandType.html": {
    "href": "api/OneImlx.Terminal.Commands.CommandType.html",
    "title": "Enum CommandType",
    "summary": "Enum CommandType Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll Defines the command type. public enum CommandType Fields GroupCommand = 2 The command represents a group of sub-commands within a root. NativeCommand = 4 The command represents a native command to the terminal. For example cls that clears the terminal, or run command that executes a native OS command. RootCommand = 1 The command represents the root command. SubCommand = 3 The command represents a sub-command within a group."
  },
  "api/OneImlx.Terminal.Commands.Declarative.ArgumentDescriptorAttribute.html": {
    "href": "api/OneImlx.Terminal.Commands.Declarative.ArgumentDescriptorAttribute.html",
    "title": "Class ArgumentDescriptorAttribute",
    "summary": "Class ArgumentDescriptorAttribute Namespace OneImlx.Terminal.Commands.Declarative Assembly OneImlx.Terminal.dll Declares an OptionDescriptor for a command. [AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)] public sealed class ArgumentDescriptorAttribute : Attribute Inheritance object Attribute ArgumentDescriptorAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ArgumentDescriptorAttribute(int, string, string, string, ArgumentFlags) Initializes a new instance. public ArgumentDescriptorAttribute(int order, string id, string dataType, string description, ArgumentFlags flags) Parameters order int The argument order. id string The argument id. dataType string The argument data type. description string The argument description. flags ArgumentFlags The argument flags. Properties DataType The argument data type. public string DataType { get; } Property Value string Description The argument description. public string Description { get; } Property Value string Remarks The argument id is unique across all commands. Flags The argument flags. public ArgumentFlags Flags { get; } Property Value ArgumentFlags Id The argument id. public string Id { get; } Property Value string Remarks The argument id is unique within a command. Order The argument order. public int Order { get; } Property Value int"
  },
  "api/OneImlx.Terminal.Commands.Declarative.ArgumentValidationAttribute.html": {
    "href": "api/OneImlx.Terminal.Commands.Declarative.ArgumentValidationAttribute.html",
    "title": "Class ArgumentValidationAttribute",
    "summary": "Class ArgumentValidationAttribute Namespace OneImlx.Terminal.Commands.Declarative Assembly OneImlx.Terminal.dll Declares an ArgumentDescriptor validation attribute. [AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)] public sealed class ArgumentValidationAttribute : Attribute Inheritance object Attribute ArgumentValidationAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ArgumentValidationAttribute(string, Type, params object[]) Initialize a new instance. public ArgumentValidationAttribute(string argumentId, Type validationAttribute, params object[] validationParams) Parameters argumentId string The argument identifier. validationAttribute Type The argument validation attribute. validationParams object[] The validation attribute parameters. Properties ArgumentId The argument identifier. public string ArgumentId { get; } Property Value string ValidationAttribute The attribute validation attribute. public Type ValidationAttribute { get; } Property Value Type ValidationParams The ValidationAttribute parameters. public object[]? ValidationParams { get; } Property Value object[] See Also ValueCheckers"
  },
  "api/OneImlx.Terminal.Commands.Declarative.CommandCheckerAttribute.html": {
    "href": "api/OneImlx.Terminal.Commands.Declarative.CommandCheckerAttribute.html",
    "title": "Class CommandCheckerAttribute",
    "summary": "Class CommandCheckerAttribute Namespace OneImlx.Terminal.Commands.Declarative Assembly OneImlx.Terminal.dll Declares a command checker. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)] public sealed class CommandCheckerAttribute : Attribute Inheritance object Attribute CommandCheckerAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CommandCheckerAttribute(Type) Initialize a new instance. public CommandCheckerAttribute(Type checker) Parameters checker Type The command checker. Properties Checker The command checker type. public Type Checker { get; } Property Value Type"
  },
  "api/OneImlx.Terminal.Commands.Declarative.CommandCustomPropertyAttribute.html": {
    "href": "api/OneImlx.Terminal.Commands.Declarative.CommandCustomPropertyAttribute.html",
    "title": "Class CommandCustomPropertyAttribute",
    "summary": "Class CommandCustomPropertyAttribute Namespace OneImlx.Terminal.Commands.Declarative Assembly OneImlx.Terminal.dll Declares a CommandDescriptor custom property. [AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)] public sealed class CommandCustomPropertyAttribute : Attribute Inheritance object Attribute CommandCustomPropertyAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Each custom property must have a unique key within a command. Constructors CommandCustomPropertyAttribute(string, object) Initialize a new instance. public CommandCustomPropertyAttribute(string key, object value) Parameters key string The property key. value object The property value. Properties Key The property key. public string Key { get; } Property Value string Value The property value. public object Value { get; } Property Value object See Also CustomProperties"
  },
  "api/OneImlx.Terminal.Commands.Declarative.CommandDescriptorAttribute.html": {
    "href": "api/OneImlx.Terminal.Commands.Declarative.CommandDescriptorAttribute.html",
    "title": "Class CommandDescriptorAttribute",
    "summary": "Class CommandDescriptorAttribute Namespace OneImlx.Terminal.Commands.Declarative Assembly OneImlx.Terminal.dll Declares a CommandDescriptor for a command. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)] public sealed class CommandDescriptorAttribute : Attribute Inheritance object Attribute CommandDescriptorAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CommandDescriptorAttribute(string, string, string, CommandType, CommandFlags) Initializes a new instance. public CommandDescriptorAttribute(string id, string name, string description, CommandType commandType, CommandFlags commandFlags) Parameters id string The command id. name string The command name. description string The command description. commandType CommandType The command type. commandFlags CommandFlags The command flags. Properties CommandFlags The command flags. public CommandFlags CommandFlags { get; } Property Value CommandFlags CommandType The command type. public CommandType CommandType { get; } Property Value CommandType Description The command description. public string Description { get; } Property Value string Id The command id. public string Id { get; } Property Value string Remarks The command id is unique across all commands. Name The command name. public string Name { get; } Property Value string Remarks The command name is unique within a grouped command."
  },
  "api/OneImlx.Terminal.Commands.Declarative.CommandOwnersAttribute.html": {
    "href": "api/OneImlx.Terminal.Commands.Declarative.CommandOwnersAttribute.html",
    "title": "Class CommandOwnersAttribute",
    "summary": "Class CommandOwnersAttribute Namespace OneImlx.Terminal.Commands.Declarative Assembly OneImlx.Terminal.dll Declares a command owners. A command owner is a group or a root. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)] public sealed class CommandOwnersAttribute : Attribute Inheritance object Attribute CommandOwnersAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CommandOwnersAttribute(params string[]) Initializes a new instance. public CommandOwnersAttribute(params string[] owners) Parameters owners string[] The command owner identifiers. Properties Owners The command owner identifiers. public OwnerIdCollection Owners { get; } Property Value OwnerIdCollection See Also Id"
  },
  "api/OneImlx.Terminal.Commands.Declarative.CommandTagsAttribute.html": {
    "href": "api/OneImlx.Terminal.Commands.Declarative.CommandTagsAttribute.html",
    "title": "Class CommandTagsAttribute",
    "summary": "Class CommandTagsAttribute Namespace OneImlx.Terminal.Commands.Declarative Assembly OneImlx.Terminal.dll Declares the command tags. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)] public sealed class CommandTagsAttribute : Attribute Inheritance object Attribute CommandTagsAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CommandTagsAttribute(params string[]) Initializes a new instance. public CommandTagsAttribute(params string[] tags) Parameters tags string[] The tags. Properties Tags The command tags. public TagIdCollection Tags { get; } Property Value TagIdCollection"
  },
  "api/OneImlx.Terminal.Commands.Declarative.IDeclarativeRunner.html": {
    "href": "api/OneImlx.Terminal.Commands.Declarative.IDeclarativeRunner.html",
    "title": "Interface IDeclarativeRunner",
    "summary": "Interface IDeclarativeRunner Namespace OneImlx.Terminal.Commands.Declarative Assembly OneImlx.Terminal.dll Specifies a runner that provides declarative command and option descriptors. public interface IDeclarativeRunner Remarks The DI engine uses reflection to identify all the declarative runners and populate the command and option descriptors."
  },
  "api/OneImlx.Terminal.Commands.Declarative.OptionDescriptorAttribute.html": {
    "href": "api/OneImlx.Terminal.Commands.Declarative.OptionDescriptorAttribute.html",
    "title": "Class OptionDescriptorAttribute",
    "summary": "Class OptionDescriptorAttribute Namespace OneImlx.Terminal.Commands.Declarative Assembly OneImlx.Terminal.dll Declares an OptionDescriptor for a command. [AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)] public sealed class OptionDescriptorAttribute : Attribute Inheritance object Attribute OptionDescriptorAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OptionDescriptorAttribute(string, string, string, OptionFlags, string?) Initializes a new instance. public OptionDescriptorAttribute(string id, string dataType, string description, OptionFlags flags, string? alias = null) Parameters id string The option id. dataType string The option data type. description string The option description. flags OptionFlags The option flags. alias string The option alias. Properties Alias The option alias. public string? Alias { get; } Property Value string Remarks The option alias is unique within a command. Option alias supports the legacy apps that identified a command option with an id and an alias string. For modern console apps, we recommend using just an option identifier. The core data model is optimized to work with option id. In general, an app should not identify the same option with multiple strings. DataType The option data type. public string DataType { get; } Property Value string Description The option description. public string Description { get; } Property Value string Remarks The option id is unique across all commands. Flags The option flags. public OptionFlags Flags { get; } Property Value OptionFlags Id The option id. public string Id { get; } Property Value string Remarks The option id is unique within a command."
  },
  "api/OneImlx.Terminal.Commands.Declarative.OptionValidationAttribute.html": {
    "href": "api/OneImlx.Terminal.Commands.Declarative.OptionValidationAttribute.html",
    "title": "Class OptionValidationAttribute",
    "summary": "Class OptionValidationAttribute Namespace OneImlx.Terminal.Commands.Declarative Assembly OneImlx.Terminal.dll Declares an OptionDescriptor validation attribute. [AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)] public sealed class OptionValidationAttribute : Attribute Inheritance object Attribute OptionValidationAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OptionValidationAttribute(string, Type, params object[]) Initialize a new instance. public OptionValidationAttribute(string optionId, Type validationAttribute, params object[] validationParams) Parameters optionId string The option identifier. validationAttribute Type The option validation attribute. validationParams object[] The validation attribute parameters. Properties OptionId The option identifier. public string OptionId { get; } Property Value string ValidationAttribute The option validation attribute. public Type ValidationAttribute { get; } Property Value Type ValidationParams The validation attribute parameters. public object[]? ValidationParams { get; } Property Value object[] See Also ValueCheckers"
  },
  "api/OneImlx.Terminal.Commands.Declarative.html": {
    "href": "api/OneImlx.Terminal.Commands.Declarative.html",
    "title": "Namespace OneImlx.Terminal.Commands.Declarative",
    "summary": "Namespace OneImlx.Terminal.Commands.Declarative Classes ArgumentDescriptorAttribute Declares an OptionDescriptor for a command. ArgumentValidationAttribute Declares an ArgumentDescriptor validation attribute. CommandCheckerAttribute Declares a command checker. CommandCustomPropertyAttribute Declares a CommandDescriptor custom property. CommandDescriptorAttribute Declares a CommandDescriptor for a command. CommandOwnersAttribute Declares a command owners. A command owner is a group or a root. CommandTagsAttribute Declares the command tags. OptionDescriptorAttribute Declares an OptionDescriptor for a command. OptionValidationAttribute Declares an OptionDescriptor validation attribute. Interfaces IDeclarativeRunner Specifies a runner that provides declarative command and option descriptors."
  },
  "api/OneImlx.Terminal.Commands.Handlers.CommandHandler.html": {
    "href": "api/OneImlx.Terminal.Commands.Handlers.CommandHandler.html",
    "title": "Class CommandHandler",
    "summary": "Class CommandHandler Namespace OneImlx.Terminal.Commands.Handlers Assembly OneImlx.Terminal.dll The default handler to handle a command request routed from a CommandRouter. public sealed class CommandHandler : ICommandHandler Inheritance object CommandHandler Implements ICommandHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CommandHandler(ICommandResolver, IOptions<TerminalOptions>, ITerminalHelpProvider, ILogger<CommandHandler>, ITerminalEventHandler?) Initialize a news instance. public CommandHandler(ICommandResolver commandResolver, IOptions<TerminalOptions> options, ITerminalHelpProvider terminalHelpProvider, ILogger<CommandHandler> logger, ITerminalEventHandler? terminalEventHandler = null) Parameters commandResolver ICommandResolver options IOptions<TerminalOptions> terminalHelpProvider ITerminalHelpProvider logger ILogger<CommandHandler> terminalEventHandler ITerminalEventHandler Methods HandleCommandAsync(CommandContext) Handles the command request. public Task HandleCommandAsync(CommandContext context) Parameters context CommandContext The handler context. Returns Task The handler result."
  },
  "api/OneImlx.Terminal.Commands.Handlers.CommandResolver.html": {
    "href": "api/OneImlx.Terminal.Commands.Handlers.CommandResolver.html",
    "title": "Class CommandResolver",
    "summary": "Class CommandResolver Namespace OneImlx.Terminal.Commands.Handlers Assembly OneImlx.Terminal.dll The default ICommandResolver using CreateInstance(IServiceProvider, Type, params object[]), managing the resolution of command checkers and runners. public sealed class CommandResolver : ICommandResolver Inheritance object CommandResolver Implements ICommandResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CommandResolver(IServiceProvider, ILogger<CommandResolver>) Initializes a new instance of the CommandResolver class. public CommandResolver(IServiceProvider serviceDescriptors, ILogger<CommandResolver> logger) Parameters serviceDescriptors IServiceProvider The service provider for resolving service instances. logger ILogger<CommandResolver> The logger for logging diagnostic messages. Methods ResolveCommandChecker(CommandDescriptor) Resolves the command checker for a given command descriptor using dependency injection and activator utilities. public ICommandChecker ResolveCommandChecker(CommandDescriptor commandDescriptor) Parameters commandDescriptor CommandDescriptor The command descriptor to identify the checker. Returns ICommandChecker The resolved command checker. Exceptions TerminalException Thrown if the command checker is not configured or invalid. ResolveCommandRunner(CommandDescriptor) Resolves the command runner for a given command descriptor using dependency injection and activator utilities. public IDelegateCommandRunner ResolveCommandRunner(CommandDescriptor commandDescriptor) Parameters commandDescriptor CommandDescriptor The command descriptor to identify the runner. Returns IDelegateCommandRunner The resolved command runner. Exceptions TerminalException Thrown if the command runner is not configured or invalid."
  },
  "api/OneImlx.Terminal.Commands.Handlers.ICommandHandler.html": {
    "href": "api/OneImlx.Terminal.Commands.Handlers.ICommandHandler.html",
    "title": "Interface ICommandHandler",
    "summary": "Interface ICommandHandler Namespace OneImlx.Terminal.Commands.Handlers Assembly OneImlx.Terminal.dll An abstraction to handle a command request routed from a ICommandRouter. public interface ICommandHandler Methods HandleCommandAsync(CommandContext) Handles the command request. Task HandleCommandAsync(CommandContext context) Parameters context CommandContext The handler context. Returns Task The handler result."
  },
  "api/OneImlx.Terminal.Commands.Handlers.ICommandResolver.html": {
    "href": "api/OneImlx.Terminal.Commands.Handlers.ICommandResolver.html",
    "title": "Interface ICommandResolver",
    "summary": "Interface ICommandResolver Namespace OneImlx.Terminal.Commands.Handlers Assembly OneImlx.Terminal.dll An abstraction for resolving command runtime. It is responsible for resolving the appropriate command checker and runner for a given command descriptor. public interface ICommandResolver Methods ResolveCommandChecker(CommandDescriptor) Resolves the command checker associated with the specified command descriptor. ICommandChecker ResolveCommandChecker(CommandDescriptor commandDescriptor) Parameters commandDescriptor CommandDescriptor The descriptor of the command for which to resolve the checker. Returns ICommandChecker The resolved command checker instance. ResolveCommandRunner(CommandDescriptor) Resolves the command runner associated with the specified command descriptor. IDelegateCommandRunner ResolveCommandRunner(CommandDescriptor commandDescriptor) Parameters commandDescriptor CommandDescriptor The descriptor of the command for which to resolve the runner. Returns IDelegateCommandRunner The resolved command runner instance. See Also CommandResolver"
  },
  "api/OneImlx.Terminal.Commands.Handlers.html": {
    "href": "api/OneImlx.Terminal.Commands.Handlers.html",
    "title": "Namespace OneImlx.Terminal.Commands.Handlers",
    "summary": "Namespace OneImlx.Terminal.Commands.Handlers Classes CommandHandler The default handler to handle a command request routed from a CommandRouter. CommandResolver The default ICommandResolver using CreateInstance(IServiceProvider, Type, params object[]), managing the resolution of command checkers and runners. Interfaces ICommandHandler An abstraction to handle a command request routed from a ICommandRouter. ICommandResolver An abstraction for resolving command runtime. It is responsible for resolving the appropriate command checker and runner for a given command descriptor."
  },
  "api/OneImlx.Terminal.Commands.ICommandRouter.html": {
    "href": "api/OneImlx.Terminal.Commands.ICommandRouter.html",
    "title": "Interface ICommandRouter",
    "summary": "Interface ICommandRouter Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll An abstraction of a command router. public interface ICommandRouter Methods RouteCommandAsync(CommandContext) Routes the request asynchronously. Task<CommandResult> RouteCommandAsync(CommandContext context) Parameters context CommandContext The router context. Returns Task<CommandResult> The router result."
  },
  "api/OneImlx.Terminal.Commands.ICommandValue.html": {
    "href": "api/OneImlx.Terminal.Commands.ICommandValue.html",
    "title": "Interface ICommandValue",
    "summary": "Interface ICommandValue Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll As abstraction of a command value. public interface ICommandValue Remarks A command value is a value that is passed to a command. It can be an argument, option or a flag. Properties DataType The data type. string DataType { get; } Property Value string Id The identifier. string Id { get; } Property Value string Value The actual value. object Value { get; set; } Property Value object Methods ChangeValueType(Type) Changes the value's Type. void ChangeValueType(Type type) Parameters type Type"
  },
  "api/OneImlx.Terminal.Commands.IKeyAsId.html": {
    "href": "api/OneImlx.Terminal.Commands.IKeyAsId.html",
    "title": "Interface IKeyAsId",
    "summary": "Interface IKeyAsId Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll An abstraction of an entity with a key as an identifier. public interface IKeyAsId Properties Id The identifier. string Id { get; } Property Value string"
  },
  "api/OneImlx.Terminal.Commands.KeyAsIdCollection-1.html": {
    "href": "api/OneImlx.Terminal.Commands.KeyAsIdCollection-1.html",
    "title": "Class KeyAsIdCollection<TItem>",
    "summary": "Class KeyAsIdCollection<TItem> Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll A keyed collection by id. public class KeyAsIdCollection<TItem> : KeyedCollection<string, TItem>, IList<TItem>, ICollection<TItem>, IReadOnlyList<TItem>, IReadOnlyCollection<TItem>, IEnumerable<TItem>, IList, ICollection, IEnumerable where TItem : IKeyAsId Type Parameters TItem The collection item type. Inheritance object Collection<TItem> KeyedCollection<string, TItem> KeyAsIdCollection<TItem> Implements IList<TItem> ICollection<TItem> IReadOnlyList<TItem> IReadOnlyCollection<TItem> IEnumerable<TItem> IList ICollection IEnumerable Inherited Members KeyedCollection<string, TItem>.ChangeItemKey(TItem, string) KeyedCollection<string, TItem>.ClearItems() KeyedCollection<string, TItem>.Contains(string) KeyedCollection<string, TItem>.GetKeyForItem(TItem) KeyedCollection<string, TItem>.InsertItem(int, TItem) KeyedCollection<string, TItem>.Remove(string) KeyedCollection<string, TItem>.RemoveItem(int) KeyedCollection<string, TItem>.SetItem(int, TItem) KeyedCollection<string, TItem>.Comparer KeyedCollection<string, TItem>.Dictionary KeyedCollection<string, TItem>.this[string] Collection<TItem>.Add(TItem) Collection<TItem>.Clear() Collection<TItem>.ClearItems() Collection<TItem>.Contains(TItem) Collection<TItem>.CopyTo(TItem[], int) Collection<TItem>.GetEnumerator() Collection<TItem>.IndexOf(TItem) Collection<TItem>.Insert(int, TItem) Collection<TItem>.InsertItem(int, TItem) Collection<TItem>.Remove(TItem) Collection<TItem>.RemoveAt(int) Collection<TItem>.RemoveItem(int) Collection<TItem>.SetItem(int, TItem) Collection<TItem>.Count Collection<TItem>.this[int] Collection<TItem>.Items object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors KeyAsIdCollection(ITerminalTextHandler) Initialize a new instance. public KeyAsIdCollection(ITerminalTextHandler textHandler) Parameters textHandler ITerminalTextHandler The text handler. Methods GetKeyForItem(TItem) Gets the key for the item. protected override string GetKeyForItem(TItem item) Parameters item TItem The item. Returns string"
  },
  "api/OneImlx.Terminal.Commands.Option.html": {
    "href": "api/OneImlx.Terminal.Commands.Option.html",
    "title": "Class Option",
    "summary": "Class Option Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll The Option class is a runtime validated representation of an actual command option and its value passed by a user or an application. public sealed class Option : IEquatable<Option?>, ICommandValue Inheritance object Option Implements IEquatable<Option> ICommandValue Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks An option id is always unique within a command. By design Option implements the default equality IEquatable<T> and GetHashCode() using Id property. Thus, two options with the same id are equal irrespective of other property values. This is done to improve performance during lookup and avoid multiple options with same identifiers. The options can have same ids across multiple commands. Each Command has OptionDescriptors collection that contains options with unique ids. Constructors Option(OptionDescriptor, object, bool) Initialize a new instance.. public Option(OptionDescriptor optionDescriptor, object value, bool byAlias = false) Parameters optionDescriptor OptionDescriptor The option descriptor. value object The option value. byAlias bool Determines whether the option is identifier by its alias. Properties Alias The option alias. [JsonIgnore] public string? Alias { get; } Property Value string ByAlias Determines whether the option is identifier by its alias. public bool ByAlias { get; } Property Value bool DataType The option data type. [JsonIgnore] public string DataType { get; } Property Value string Description The option description. public string? Description { get; } Property Value string Descriptor The option descriptor. public OptionDescriptor Descriptor { get; } Property Value OptionDescriptor Id The option id. public string Id { get; } Property Value string Remarks The option id is unique with in a command. Value The option value. public object Value { get; set; } Property Value object Methods ChangeValueType(Type) Changes the option value to the specified type. public void ChangeValueType(Type type) Parameters type Type The new type to use. Equals(Option?) Indicates whether the current option is equal to another option. public bool Equals(Option? other) Parameters other Option The other option. Returns bool true if the current option is equal to the other option; otherwise, false. Equals(object?) Indicates whether the current option is equal to another option. public override bool Equals(object? obj) Parameters obj object The other option. Returns bool true if the current option is equal to the other option; otherwise, false. GetHashCode() Returns the hash code for this option. public override int GetHashCode() Returns int Operators operator ==(Option?, Option?) Indicates whether the current option is equal to another option. public static bool operator ==(Option? left, Option? right) Parameters left Option The left option. right Option The right option. Returns bool true if the current option is equal to the other option; otherwise, false. operator !=(Option?, Option?) Indicates whether the current option is not equal to another option. public static bool operator !=(Option? left, Option? right) Parameters left Option The left option. right Option The right option. Returns bool true if the current option is not equal to the other option; otherwise, false. See Also Command"
  },
  "api/OneImlx.Terminal.Commands.OptionDescriptor.html": {
    "href": "api/OneImlx.Terminal.Commands.OptionDescriptor.html",
    "title": "Class OptionDescriptor",
    "summary": "Class OptionDescriptor Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll The OptionDescriptor class defines the command option identity, data type, and data validation behavior. We also refer to options as command options or command flags. public sealed class OptionDescriptor Inheritance object OptionDescriptor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OptionDescriptor(string, string, string, OptionFlags, string?) Initializes a new instance. public OptionDescriptor(string id, string dataType, string description, OptionFlags flags, string? alias = null) Parameters id string The option id. dataType string The option data type. description string The option description. flags OptionFlags The option flags. alias string The option alias. Properties Alias The option alias. public string? Alias { get; } Property Value string Remarks The option alias is unique within a command. Option alias supports the legacy apps that identified a command option with an id and an alias string. For modern console apps, we recommend using just an option identifier. The core data model is optimized to work with option id. In general, an app should not identify the same option with multiple strings. DataType The option data type. public string DataType { get; } Property Value string Description The option description. public string? Description { get; } Property Value string Remarks The option id is unique across all commands. Flags The option flags. public OptionFlags Flags { get; } Property Value OptionFlags Id The option id. public string Id { get; } Property Value string Remarks The option id is unique within a command. ValueCheckers The option value checkers. public IEnumerable<IValueChecker<Option>>? ValueCheckers { get; set; } Property Value IEnumerable<IValueChecker<Option>> See Also Option TerminalRequest CommandDescriptor"
  },
  "api/OneImlx.Terminal.Commands.OptionDescriptors.html": {
    "href": "api/OneImlx.Terminal.Commands.OptionDescriptors.html",
    "title": "Class OptionDescriptors",
    "summary": "Class OptionDescriptors Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll The OptionDescriptor collection. public sealed class OptionDescriptors : IReadOnlyDictionary<string, OptionDescriptor>, IReadOnlyCollection<KeyValuePair<string, OptionDescriptor>>, IEnumerable<KeyValuePair<string, OptionDescriptor>>, IEnumerable Inheritance object OptionDescriptors Implements IReadOnlyDictionary<string, OptionDescriptor> IReadOnlyCollection<KeyValuePair<string, OptionDescriptor>> IEnumerable<KeyValuePair<string, OptionDescriptor>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors OptionDescriptors(ITerminalTextHandler, IEnumerable<OptionDescriptor>?) Initializes a new instance with the specified option descriptors. public OptionDescriptors(ITerminalTextHandler textHandler, IEnumerable<OptionDescriptor>? collection = null) Parameters textHandler ITerminalTextHandler The text handler. collection IEnumerable<OptionDescriptor> The option descriptors. Properties Count public int Count { get; } Property Value int this[string] Gets an OptionDescriptor instance with the specified id or alias. public OptionDescriptor this[string idOrAlias] { get; } Parameters idOrAlias string The option id or its alias. Property Value OptionDescriptor OptionDescriptor instance if found. Exceptions TerminalException If OptionDescriptor instance with specified id is not found. Keys public IEnumerable<string> Keys { get; } Property Value IEnumerable<string> TextHandler The text handler. public ITerminalTextHandler TextHandler { get; } Property Value ITerminalTextHandler Values public IEnumerable<OptionDescriptor> Values { get; } Property Value IEnumerable<OptionDescriptor> Methods ContainsKey(string) public bool ContainsKey(string key) Parameters key string Returns bool GetEnumerator() public IEnumerator GetEnumerator() Returns IEnumerator RegisterHelp(OptionDescriptor) Registers the help option. public void RegisterHelp(OptionDescriptor helpDescriptor) Parameters helpDescriptor OptionDescriptor TryGetValue(string, out OptionDescriptor) public bool TryGetValue(string key, out OptionDescriptor value) Parameters key string value OptionDescriptor Returns bool"
  },
  "api/OneImlx.Terminal.Commands.OptionFlags.html": {
    "href": "api/OneImlx.Terminal.Commands.OptionFlags.html",
    "title": "Enum OptionFlags",
    "summary": "Enum OptionFlags Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll Defines special option flags. [Flags] public enum OptionFlags Fields Disabled = 8 The command is disabled. None = 0 No special flags. Obsolete = 4 The command is obsolete. Required = 2 The option is required."
  },
  "api/OneImlx.Terminal.Commands.Options.html": {
    "href": "api/OneImlx.Terminal.Commands.Options.html",
    "title": "Class Options",
    "summary": "Class Options Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll The ordered Option keyed collection. public sealed class Options : IReadOnlyDictionary<string, Option>, IReadOnlyCollection<KeyValuePair<string, Option>>, IEnumerable<KeyValuePair<string, Option>>, IEnumerable Inheritance object Options Implements IReadOnlyDictionary<string, Option> IReadOnlyCollection<KeyValuePair<string, Option>> IEnumerable<KeyValuePair<string, Option>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Options(ITerminalTextHandler, IEnumerable<Option>?) Initializes a new instance. public Options(ITerminalTextHandler textHandler, IEnumerable<Option>? options = null) Parameters textHandler ITerminalTextHandler The text handler. options IEnumerable<Option> The options. Properties Count public int Count { get; } Property Value int this[string] public Option this[string key] { get; } Parameters key string Property Value Option Keys public IEnumerable<string> Keys { get; } Property Value IEnumerable<string> TextHandler The text handler. public ITerminalTextHandler TextHandler { get; } Property Value ITerminalTextHandler Values public IEnumerable<Option> Values { get; } Property Value IEnumerable<Option> Methods ContainsKey(string) public bool ContainsKey(string key) Parameters key string Returns bool GetEnumerator() public IEnumerator<KeyValuePair<string, Option>> GetEnumerator() Returns IEnumerator<KeyValuePair<string, Option>> GetOptionValue<TValue>(string) Gets the option value by its id. public TValue GetOptionValue<TValue>(string optId) Parameters optId string The option identifier or the alias. Returns TValue Type Parameters TValue TryGetValue(string, out Option) public bool TryGetValue(string key, out Option value) Parameters key string value Option Returns bool"
  },
  "api/OneImlx.Terminal.Commands.OwnerIdCollection.html": {
    "href": "api/OneImlx.Terminal.Commands.OwnerIdCollection.html",
    "title": "Class OwnerIdCollection",
    "summary": "Class OwnerIdCollection Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll Defines a collection of owners for a command. public sealed class OwnerIdCollection : List<string>, IList<string>, ICollection<string>, IReadOnlyList<string>, IReadOnlyCollection<string>, IEnumerable<string>, IList, ICollection, IEnumerable Inheritance object List<string> OwnerIdCollection Implements IList<string> ICollection<string> IReadOnlyList<string> IReadOnlyCollection<string> IEnumerable<string> IList ICollection IEnumerable Inherited Members List<string>.Add(string) List<string>.AddRange(IEnumerable<string>) List<string>.AsReadOnly() List<string>.BinarySearch(string) List<string>.BinarySearch(string, IComparer<string>) List<string>.BinarySearch(int, int, string, IComparer<string>) List<string>.Clear() List<string>.Contains(string) List<string>.ConvertAll<TOutput>(Converter<string, TOutput>) List<string>.CopyTo(string[]) List<string>.CopyTo(string[], int) List<string>.CopyTo(int, string[], int, int) List<string>.Exists(Predicate<string>) List<string>.Find(Predicate<string>) List<string>.FindAll(Predicate<string>) List<string>.FindIndex(int, int, Predicate<string>) List<string>.FindIndex(int, Predicate<string>) List<string>.FindIndex(Predicate<string>) List<string>.FindLast(Predicate<string>) List<string>.FindLastIndex(int, int, Predicate<string>) List<string>.FindLastIndex(int, Predicate<string>) List<string>.FindLastIndex(Predicate<string>) List<string>.ForEach(Action<string>) List<string>.GetEnumerator() List<string>.GetRange(int, int) List<string>.IndexOf(string) List<string>.IndexOf(string, int) List<string>.IndexOf(string, int, int) List<string>.Insert(int, string) List<string>.InsertRange(int, IEnumerable<string>) List<string>.LastIndexOf(string) List<string>.LastIndexOf(string, int) List<string>.LastIndexOf(string, int, int) List<string>.Remove(string) List<string>.RemoveAll(Predicate<string>) List<string>.RemoveAt(int) List<string>.RemoveRange(int, int) List<string>.Reverse() List<string>.Reverse(int, int) List<string>.Sort() List<string>.Sort(IComparer<string>) List<string>.Sort(Comparison<string>) List<string>.Sort(int, int, IComparer<string>) List<string>.ToArray() List<string>.TrimExcess() List<string>.TrueForAll(Predicate<string>) List<string>.Capacity List<string>.Count List<string>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods StringExtensions.JoinByComma(IEnumerable<string>?) StringExtensions.JoinByNewline(IEnumerable<string>?) StringExtensions.JoinBySpace(IEnumerable<string>?) Remarks The OwnerIdCollection is used to identify an injected collection of owners in the service collection by various builders. Constructors OwnerIdCollection(params string[]) Initializes a new instance. public OwnerIdCollection(params string[] ownerIds) Parameters ownerIds string[] The owner identifiers."
  },
  "api/OneImlx.Terminal.Commands.Parsers.CommandParser.html": {
    "href": "api/OneImlx.Terminal.Commands.Parsers.CommandParser.html",
    "title": "Class CommandParser",
    "summary": "Class CommandParser Namespace OneImlx.Terminal.Commands.Parsers Assembly OneImlx.Terminal.dll The default ICommandParser. public class CommandParser : ICommandParser Inheritance object CommandParser Implements ICommandParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandParser(ITerminalRequestParser, ITerminalTextHandler, ITerminalCommandStore, IOptions<TerminalOptions>, ILogger<CommandParser>) Initialize a new instance. public CommandParser(ITerminalRequestParser terminalRequestParser, ITerminalTextHandler textHandler, ITerminalCommandStore commandStore, IOptions<TerminalOptions> terminalOptions, ILogger<CommandParser> logger) Parameters terminalRequestParser ITerminalRequestParser The terminal request parser. textHandler ITerminalTextHandler commandStore ITerminalCommandStore terminalOptions IOptions<TerminalOptions> logger ILogger<CommandParser> The logger. Methods ParseCommandAsync(CommandContext) Extracts Command asynchronously. public Task ParseCommandAsync(CommandContext context) Parameters context CommandContext The option extraction context. Returns Task See Also Separator"
  },
  "api/OneImlx.Terminal.Commands.Parsers.ICommandParser.html": {
    "href": "api/OneImlx.Terminal.Commands.Parsers.ICommandParser.html",
    "title": "Interface ICommandParser",
    "summary": "Interface ICommandParser Namespace OneImlx.Terminal.Commands.Parsers Assembly OneImlx.Terminal.dll An abstraction to parse the raw command string and extract Command. public interface ICommandParser Methods ParseCommandAsync(CommandContext) Extracts Command asynchronously. Task ParseCommandAsync(CommandContext context) Parameters context CommandContext The option extraction context. Returns Task"
  },
  "api/OneImlx.Terminal.Commands.Parsers.ParsedCommand.html": {
    "href": "api/OneImlx.Terminal.Commands.Parsers.ParsedCommand.html",
    "title": "Class ParsedCommand",
    "summary": "Class ParsedCommand Namespace OneImlx.Terminal.Commands.Parsers Assembly OneImlx.Terminal.dll Represents a parsed command from a command request. public sealed class ParsedCommand Inheritance object ParsedCommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ParsedCommand(Command, IEnumerable<CommandDescriptor>?) Initializes a new instance. public ParsedCommand(Command command, IEnumerable<CommandDescriptor>? hierarchy = null) Parameters command Command The command. hierarchy IEnumerable<CommandDescriptor> The command hierarchy. Properties Command The parsed raw command. public Command Command { get; } Property Value Command Hierarchy The parsed Command hierarchy. public IEnumerable<CommandDescriptor>? Hierarchy { get; } Property Value IEnumerable<CommandDescriptor>"
  },
  "api/OneImlx.Terminal.Commands.Parsers.html": {
    "href": "api/OneImlx.Terminal.Commands.Parsers.html",
    "title": "Namespace OneImlx.Terminal.Commands.Parsers",
    "summary": "Namespace OneImlx.Terminal.Commands.Parsers Classes CommandParser The default ICommandParser. ParsedCommand Represents a parsed command from a command request. Interfaces ICommandParser An abstraction to parse the raw command string and extract Command."
  },
  "api/OneImlx.Terminal.Commands.Runners.CommandRunner-1.html": {
    "href": "api/OneImlx.Terminal.Commands.Runners.CommandRunner-1.html",
    "title": "Class CommandRunner<TResult>",
    "summary": "Class CommandRunner<TResult> Namespace OneImlx.Terminal.Commands.Runners Assembly OneImlx.Terminal.dll The command runner is where developers implement how commands are executed. It operates asynchronously to handle commands that might take a while to process. The framework routes each parsed command to its specific runner, helping to organize and manage the command execution logic within your application. public abstract class CommandRunner<TResult> : IDelegateCommandRunner, ICommandRunner<TResult> where TResult : CommandRunnerResult Type Parameters TResult Inheritance object CommandRunner<TResult> Implements IDelegateCommandRunner ICommandRunner<TResult> Derived LicenseInfoRunner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DelegateHelpAsync(CommandContext, ITerminalHelpProvider, ILogger?) Delegates to RunHelpAsync(CommandContext) asynchronously. public Task<CommandRunnerResult> DelegateHelpAsync(CommandContext context, ITerminalHelpProvider helpProvider, ILogger? logger = null) Parameters context CommandContext The runner context. helpProvider ITerminalHelpProvider The help provider. logger ILogger The logger. Returns Task<CommandRunnerResult> The runner result. DelegateRunAsync(CommandContext, ILogger?) Delegates to RunCommandAsync(CommandContext) asynchronously. public Task<CommandRunnerResult> DelegateRunAsync(CommandContext context, ILogger? logger = null) Parameters context CommandContext The runner context. logger ILogger The logger. Returns Task<CommandRunnerResult> The runner result. RunCommandAsync(CommandContext) Runs a command asynchronously. public abstract Task<TResult> RunCommandAsync(CommandContext context) Parameters context CommandContext The runner context. Returns Task<TResult> The runner result. RunHelpAsync(CommandContext) Runs a command help asynchronously. public virtual Task RunHelpAsync(CommandContext context) Parameters context CommandContext The runner context. Returns Task The runner result."
  },
  "api/OneImlx.Terminal.Commands.Runners.CommandRunnerResult.html": {
    "href": "api/OneImlx.Terminal.Commands.Runners.CommandRunnerResult.html",
    "title": "Class CommandRunnerResult",
    "summary": "Class CommandRunnerResult Namespace OneImlx.Terminal.Commands.Runners Assembly OneImlx.Terminal.dll Represents the result of a command runner. public class CommandRunnerResult Inheritance object CommandRunnerResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandRunnerResult() Initializes a new instance of the CommandRunnerResult class. public CommandRunnerResult() CommandRunnerResult(object) Initializes a new instance of the CommandRunnerResult class with a specified value. public CommandRunnerResult(object value) Parameters value object The result value of the command. Properties HasValue Indicates whether the result has a value. public bool HasValue { get; } Property Value bool Value Gets the value of the result. public object Value { get; } Property Value object Methods As<TValue>() Gets the value as the specified type. public TValue As<TValue>() Returns TValue The value cast to the specified type. Type Parameters TValue The type to cast the value to. Exceptions InvalidCastException Thrown if the value cannot be cast to the specified type. Empty() Creates an empty CommandRunnerResult with no value. public static CommandRunnerResult Empty() Returns CommandRunnerResult A new instance of CommandRunnerResult. EmptyAsync() Creates an empty CommandRunnerResult with no value. public static Task<CommandRunnerResult> EmptyAsync() Returns Task<CommandRunnerResult> A task that creates a new instance of CommandRunnerResult."
  },
  "api/OneImlx.Terminal.Commands.Runners.ICommandRunner-1.html": {
    "href": "api/OneImlx.Terminal.Commands.Runners.ICommandRunner-1.html",
    "title": "Interface ICommandRunner<TResult>",
    "summary": "Interface ICommandRunner<TResult> Namespace OneImlx.Terminal.Commands.Runners Assembly OneImlx.Terminal.dll An abstraction of a command runner. public interface ICommandRunner<TResult> where TResult : CommandRunnerResult Type Parameters TResult Methods RunCommandAsync(CommandContext) Runs a command asynchronously. Task<TResult> RunCommandAsync(CommandContext context) Parameters context CommandContext The runner context. Returns Task<TResult> The runner result. RunHelpAsync(CommandContext) Runs a command help asynchronously. Task RunHelpAsync(CommandContext context) Parameters context CommandContext The runner context. Returns Task The runner result."
  },
  "api/OneImlx.Terminal.Commands.Runners.IDelegateCommandRunner.html": {
    "href": "api/OneImlx.Terminal.Commands.Runners.IDelegateCommandRunner.html",
    "title": "Interface IDelegateCommandRunner",
    "summary": "Interface IDelegateCommandRunner Namespace OneImlx.Terminal.Commands.Runners Assembly OneImlx.Terminal.dll An abstraction to delegate to ICommandRunner<TResult>. public interface IDelegateCommandRunner Remarks The IDelegateCommandRunner enables the use of generics with ICommandRunner<TResult>. All implementations must delegate by calling ICommandRunner<TResult> without any business logic. Methods DelegateHelpAsync(CommandContext, ITerminalHelpProvider, ILogger?) Delegates to RunHelpAsync(CommandContext) asynchronously. Task<CommandRunnerResult> DelegateHelpAsync(CommandContext context, ITerminalHelpProvider helpProvider, ILogger? logger = null) Parameters context CommandContext The runner context. helpProvider ITerminalHelpProvider The help provider. logger ILogger The logger. Returns Task<CommandRunnerResult> The runner result. DelegateRunAsync(CommandContext, ILogger?) Delegates to RunCommandAsync(CommandContext) asynchronously. Task<CommandRunnerResult> DelegateRunAsync(CommandContext context, ILogger? logger = null) Parameters context CommandContext The runner context. logger ILogger The logger. Returns Task<CommandRunnerResult> The runner result."
  },
  "api/OneImlx.Terminal.Commands.Runners.LicenseInfoRunner.html": {
    "href": "api/OneImlx.Terminal.Commands.Runners.LicenseInfoRunner.html",
    "title": "Class LicenseInfoRunner",
    "summary": "Class LicenseInfoRunner Namespace OneImlx.Terminal.Commands.Runners Assembly OneImlx.Terminal.dll The default license info runner that outputs the current licensing information to the ITerminalConsole. public class LicenseInfoRunner : CommandRunner<CommandRunnerResult>, IDelegateCommandRunner, ICommandRunner<CommandRunnerResult> Inheritance object CommandRunner<CommandRunnerResult> LicenseInfoRunner Implements IDelegateCommandRunner ICommandRunner<CommandRunnerResult> Inherited Members CommandRunner<CommandRunnerResult>.DelegateHelpAsync(CommandContext, ITerminalHelpProvider, ILogger) CommandRunner<CommandRunnerResult>.DelegateRunAsync(CommandContext, ILogger) CommandRunner<CommandRunnerResult>.RunHelpAsync(CommandContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LicenseInfoRunner(ITerminalConsole, ILicenseChecker) Initialize a new instance. public LicenseInfoRunner(ITerminalConsole terminalConsole, ILicenseChecker licenseChecker) Parameters terminalConsole ITerminalConsole licenseChecker ILicenseChecker Methods RunCommandAsync(CommandContext) Runs a command asynchronously. public override Task<CommandRunnerResult> RunCommandAsync(CommandContext context) Parameters context CommandContext The runner context. Returns Task<CommandRunnerResult> The runner result."
  },
  "api/OneImlx.Terminal.Commands.Runners.html": {
    "href": "api/OneImlx.Terminal.Commands.Runners.html",
    "title": "Namespace OneImlx.Terminal.Commands.Runners",
    "summary": "Namespace OneImlx.Terminal.Commands.Runners Classes CommandRunnerResult Represents the result of a command runner. CommandRunner<TResult> The command runner is where developers implement how commands are executed. It operates asynchronously to handle commands that might take a while to process. The framework routes each parsed command to its specific runner, helping to organize and manage the command execution logic within your application. LicenseInfoRunner The default license info runner that outputs the current licensing information to the ITerminalConsole. Interfaces ICommandRunner<TResult> An abstraction of a command runner. IDelegateCommandRunner An abstraction to delegate to ICommandRunner<TResult>."
  },
  "api/OneImlx.Terminal.Commands.TagIdCollection.html": {
    "href": "api/OneImlx.Terminal.Commands.TagIdCollection.html",
    "title": "Class TagIdCollection",
    "summary": "Class TagIdCollection Namespace OneImlx.Terminal.Commands Assembly OneImlx.Terminal.dll Defines a collection of tags for a command. public sealed class TagIdCollection : List<string>, IList<string>, ICollection<string>, IReadOnlyList<string>, IReadOnlyCollection<string>, IEnumerable<string>, IList, ICollection, IEnumerable Inheritance object List<string> TagIdCollection Implements IList<string> ICollection<string> IReadOnlyList<string> IReadOnlyCollection<string> IEnumerable<string> IList ICollection IEnumerable Inherited Members List<string>.Add(string) List<string>.AddRange(IEnumerable<string>) List<string>.AsReadOnly() List<string>.BinarySearch(string) List<string>.BinarySearch(string, IComparer<string>) List<string>.BinarySearch(int, int, string, IComparer<string>) List<string>.Clear() List<string>.Contains(string) List<string>.ConvertAll<TOutput>(Converter<string, TOutput>) List<string>.CopyTo(string[]) List<string>.CopyTo(string[], int) List<string>.CopyTo(int, string[], int, int) List<string>.Exists(Predicate<string>) List<string>.Find(Predicate<string>) List<string>.FindAll(Predicate<string>) List<string>.FindIndex(int, int, Predicate<string>) List<string>.FindIndex(int, Predicate<string>) List<string>.FindIndex(Predicate<string>) List<string>.FindLast(Predicate<string>) List<string>.FindLastIndex(int, int, Predicate<string>) List<string>.FindLastIndex(int, Predicate<string>) List<string>.FindLastIndex(Predicate<string>) List<string>.ForEach(Action<string>) List<string>.GetEnumerator() List<string>.GetRange(int, int) List<string>.IndexOf(string) List<string>.IndexOf(string, int) List<string>.IndexOf(string, int, int) List<string>.Insert(int, string) List<string>.InsertRange(int, IEnumerable<string>) List<string>.LastIndexOf(string) List<string>.LastIndexOf(string, int) List<string>.LastIndexOf(string, int, int) List<string>.Remove(string) List<string>.RemoveAll(Predicate<string>) List<string>.RemoveAt(int) List<string>.RemoveRange(int, int) List<string>.Reverse() List<string>.Reverse(int, int) List<string>.Sort() List<string>.Sort(IComparer<string>) List<string>.Sort(Comparison<string>) List<string>.Sort(int, int, IComparer<string>) List<string>.ToArray() List<string>.TrimExcess() List<string>.TrueForAll(Predicate<string>) List<string>.Capacity List<string>.Count List<string>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods StringExtensions.JoinByComma(IEnumerable<string>?) StringExtensions.JoinByNewline(IEnumerable<string>?) StringExtensions.JoinBySpace(IEnumerable<string>?) Remarks The OwnerIdCollection is used to identify an injected collection of owners in the service collection by various builders. Constructors TagIdCollection(params string[]) Initializes a new instance. public TagIdCollection(params string[] tags) Parameters tags string[] The tags."
  },
  "api/OneImlx.Terminal.Commands.html": {
    "href": "api/OneImlx.Terminal.Commands.html",
    "title": "Namespace OneImlx.Terminal.Commands",
    "summary": "Namespace OneImlx.Terminal.Commands Classes Argument The Argument class is a runtime validated representation of an actual command argument and its value passed by a user or an application. ArgumentDescriptor The ArgumentDescriptor class defines the command argument identity, data type, and data validation behavior. We also refer to arguments as command arguments. ArgumentDescriptors The readonly ArgumentDescriptor keyed collection. Arguments The readonly Argument keyed collection. Command An immutable command. A command is a specific action or a set of actions that a user or an application requests the underlying system to perform. It can be a simple action such as invoking a system method or an OS command or representing a complex operation that calls a set of protected APIs over the internal or external network. A command can virtually do anything in the context of your application or service. CommandContext The generic command router context. CommandDescriptor The CommandDescriptor defines the command identity and its supported options that an end-user or an application can use. You can also describe the command behavior, such as whether the command is a root, grouped, or subcommand. CommandDescriptors The optimized CommandDescriptor collection. CommandResult Represents the result of a command router. CommandRouter The default ICommandRouter. KeyAsIdCollection<TItem> A keyed collection by id. Option The Option class is a runtime validated representation of an actual command option and its value passed by a user or an application. OptionDescriptor The OptionDescriptor class defines the command option identity, data type, and data validation behavior. We also refer to options as command options or command flags. OptionDescriptors The OptionDescriptor collection. Options The ordered Option keyed collection. OwnerIdCollection Defines a collection of owners for a command. TagIdCollection Defines a collection of tags for a command. Interfaces ICommandRouter An abstraction of a command router. ICommandValue As abstraction of a command value. IKeyAsId An abstraction of an entity with a key as an identifier. Enums ArgumentFlags Defines special argument flags. CommandFlags Defines special command flags. CommandType Defines the command type. OptionFlags Defines special option flags."
  },
  "api/OneImlx.Terminal.Configuration.Options.AuthenticationOptions.html": {
    "href": "api/OneImlx.Terminal.Configuration.Options.AuthenticationOptions.html",
    "title": "Class AuthenticationOptions",
    "summary": "Class AuthenticationOptions Namespace OneImlx.Terminal.Configuration.Options Assembly OneImlx.Terminal.dll The authentication configuration options. public sealed class AuthenticationOptions Inheritance object AuthenticationOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties DefaultScopes Gets or sets the default authentication scopes. public string[]? DefaultScopes { get; set; } Property Value string[] Remarks These scopes are used by default if no specific scopes are provided during the authentication request. Provider The authentication provider. public string Provider { get; set; } Property Value string UserFlow Gets or sets the authentication user flow. public string? UserFlow { get; set; } Property Value string ValidHosts Gets or sets the valid hosts for generating the authorization token. public string[]? ValidHosts { get; set; } Property Value string[] Remarks Requests to hosts not listed here will be considered unauthorized."
  },
  "api/OneImlx.Terminal.Configuration.Options.CheckerOptions.html": {
    "href": "api/OneImlx.Terminal.Configuration.Options.CheckerOptions.html",
    "title": "Class CheckerOptions",
    "summary": "Class CheckerOptions Namespace OneImlx.Terminal.Configuration.Options Assembly OneImlx.Terminal.dll The command, argument, and option checker configuration options. public sealed class CheckerOptions Inheritance object CheckerOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks The checker options are not filters. The command execution is blocked if any check fails. Properties AllowObsolete Determines whether the checker allows a command to run with an obsolete argument or an option. public bool AllowObsolete { get; set; } Property Value bool Remarks The obsolete check is done at runtime only if a user or an application attempts to run the command and passes an obsolete argument or an option. ValueDataType Determines whether the checker checks an input value type. If this option is enabled, the checker will try to map an argument or option value to its corresponding .NET value type. If the mapping fails, the command will not run. public bool ValueDataType { get; set; } Property Value bool"
  },
  "api/OneImlx.Terminal.Configuration.Options.DriverOptions.html": {
    "href": "api/OneImlx.Terminal.Configuration.Options.DriverOptions.html",
    "title": "Class DriverOptions",
    "summary": "Class DriverOptions Namespace OneImlx.Terminal.Configuration.Options Assembly OneImlx.Terminal.dll The driver configuration options. Reserved for future use. public sealed class DriverOptions Inheritance object DriverOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Enabled Determines if the terminal is a native driver program. public bool Enabled { get; set; } Property Value bool Remarks If enabled, the terminal's root command is also a native command prompt driver program. You can execute your commands from a native command prompt by specifying the root and command options. RootId The terminal driver program root identifier. public string? RootId { get; set; } Property Value string"
  },
  "api/OneImlx.Terminal.Configuration.Options.DynamicsOptions.html": {
    "href": "api/OneImlx.Terminal.Configuration.Options.DynamicsOptions.html",
    "title": "Class DynamicsOptions",
    "summary": "Class DynamicsOptions Namespace OneImlx.Terminal.Configuration.Options Assembly OneImlx.Terminal.dll The dynamics configuration options. public sealed class DynamicsOptions Inheritance object DynamicsOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Enabled Enables the dynamic command registration for the terminal. public bool Enabled { get; set; } Property Value bool"
  },
  "api/OneImlx.Terminal.Configuration.Options.HelpOptions.html": {
    "href": "api/OneImlx.Terminal.Configuration.Options.HelpOptions.html",
    "title": "Class HelpOptions",
    "summary": "Class HelpOptions Namespace OneImlx.Terminal.Configuration.Options Assembly OneImlx.Terminal.dll The help options. public sealed class HelpOptions Inheritance object HelpOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Enabled Enables the help. public bool Enabled { get; set; } Property Value bool OptionAlias The help option alias. public string OptionAlias { get; set; } Property Value string Remarks Unless disabled, the help option alias is automatically added to the command options. The OptionAlias must be unique across all option aliases for all commands. OptionDescription The help description. public string OptionDescription { get; set; } Property Value string OptionId The help option identifier. public string OptionId { get; set; } Property Value string Remarks Unless disabled, the help option identifier is automatically added to the command options. The OptionId must be unique across all option identifiers for all commands."
  },
  "api/OneImlx.Terminal.Configuration.Options.LicensingOptions.html": {
    "href": "api/OneImlx.Terminal.Configuration.Options.LicensingOptions.html",
    "title": "Class LicensingOptions",
    "summary": "Class LicensingOptions Namespace OneImlx.Terminal.Configuration.Options Assembly OneImlx.Terminal.dll The licensing configuration options. public sealed class LicensingOptions Inheritance object LicensingOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks Please visit https://docs.perpetualintelligence.com/articles/pi-cli/licensing.html to generate license keys and access your identifiers. You will require a valid community or commercial license and identifiers to set the licensing options. To use our test license for quick on-boarding and evaluation, please refer to https://docs.perpetualintelligence.com/articles/pi-demo/intro.html. Properties Deployment The deployment environment. Defaults to standard. public string Deployment { get; set; } Property Value string Remarks When set to IsolatedDeployment, the ILicenseExtractor skips the license check. This setting is crucial for environments like secure data centers, hardware-centric locations, or factories, where Internet access is minimal or nonexistent. In such settings, the software and its configurations are locked to a device, making license file updates potentially restricted. NOTE: This option can be set if you have an active commercial plans Enterprise or Corporate. It is a violation of licensing terms to deploy or continue using the framework without an active commercial license plan. LicenseContents The license contents. Defaults to null. public string? LicenseContents { get; set; } Property Value string Remarks For client side environments such as a Standalone WebAssembly you can set the license contents directly. If you set the license contents, the license file path will be ignored. You do however need to set the name of the license file in the LicenseFile property. LicenseFile The license file location. public string LicenseFile { get; set; } Property Value string Remarks NOTE: The online license mode is obsolete and will be removed in future release. Please use the offline license file. LicensePlan The license plan. Defaults to Demo. public string LicensePlan { get; set; } Property Value string"
  },
  "api/OneImlx.Terminal.Configuration.Options.ParserOptions.html": {
    "href": "api/OneImlx.Terminal.Configuration.Options.ParserOptions.html",
    "title": "Class ParserOptions",
    "summary": "Class ParserOptions Namespace OneImlx.Terminal.Configuration.Options Assembly OneImlx.Terminal.dll Represents the terminal parser options. public sealed class ParserOptions Inheritance object ParserOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties DisableOptionAlias Indicates whether option aliasing is disabled. Defaults to false. public bool DisableOptionAlias { get; set; } Property Value bool Remarks When option aliasing is disabled, the parser will resolve options using only the OptionPrefix. When option aliasing is enabled, the parser will recognize and resolve options using: Short NameShort option or alias prefixed by oneOptionPrefix (e.g., -a). Long NameLong option prefixed by twoOptionPrefix (e.g., --all). Hybrid NameHybrid option with both short and long option naming (e.g., --long-name). OptionPrefix Specifies the prefix used for options. Defaults to -. public char OptionPrefix { get; set; } Property Value char Remarks The OptionPrefix is required and cannot be null or consist only of whitespace. OptionValueSeparator Gets or sets the option value separator. Defaults to . public char OptionValueSeparator { get; set; } Property Value char Remarks The option value separator must be a single Unicode character, and it can be a single whitespace. RuntimeSeparator Gets or sets the temporary runtime separator that is used to optimize the parsing algorithm. Defaults to 0x1F or Unit Separator. public char RuntimeSeparator { get; set; } Property Value char Separator Gets or sets the command string separator. Defaults to a single whitespace. public char Separator { get; set; } Property Value char Remarks The command string separator must be a single Unicode character, and it can be a whitespace character. ValueDelimiter Gets or sets the value delimiter used to extract a value within the configured delimiter. Defaults to \". public char ValueDelimiter { get; set; } Property Value char"
  },
  "api/OneImlx.Terminal.Configuration.Options.RouterOptions.html": {
    "href": "api/OneImlx.Terminal.Configuration.Options.RouterOptions.html",
    "title": "Class RouterOptions",
    "summary": "Class RouterOptions Namespace OneImlx.Terminal.Configuration.Options Assembly OneImlx.Terminal.dll The command router options. public sealed class RouterOptions Inheritance object RouterOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields StreamDelimiter Represents the delimiter used to identify individual TerminalInputOutput within a continuous stream of bytes. The delimiter is set to 0x1E (ASCII \"Record Separator\"), a non-printable control character commonly used to separate data and unlikely to appear in standard text. public byte StreamDelimiter Field Value byte Properties Caret The terminal caret to show in the console. The default value is >. public string Caret { get; set; } Property Value string DisableResponse Gets or sets a value indicating whether responses are disabled. The default value is false. public bool DisableResponse { get; set; } Property Value bool Remarks When disabled or set to true, the terminal server or host application operates in a request-processing-only mode. In this mode, the server executes incoming requests but does not send back any responses to the client. MaxClients The maximum number of active remote client connections the router can accept. The default value is 5. public int MaxClients { get; set; } Property Value int MaxLength The maximum length of a single unprocessed command or batch. The default value is 1024 characters. public int MaxLength { get; set; } Property Value int Remarks This is not the actual command string length, but the length of the batch that is being streamed from a remote source. Name The terminal router name. The default value is console. public string Name { get; set; } Property Value string Remarks This value is used for licensing checks and should match the router's Name. Set this value to tcp, udp, grpc, http, console, or a custom value prefixed with custom_ based on the type of router being used. RouteDelay Define the route delay in milliseconds. The default value is 50 milliseconds. public int RouteDelay { get; set; } Property Value int Timeout The command router timeout in milliseconds. The default value is 25 seconds. Use Infinite for infinite timeout. public int Timeout { get; set; } Property Value int Remarks A command request starts at a request to execute the command and ends when the command run is complete or at an error."
  },
  "api/OneImlx.Terminal.Configuration.Options.TerminalOptions.html": {
    "href": "api/OneImlx.Terminal.Configuration.Options.TerminalOptions.html",
    "title": "Class TerminalOptions",
    "summary": "Class TerminalOptions Namespace OneImlx.Terminal.Configuration.Options Assembly OneImlx.Terminal.dll The terminal configuration options. public sealed class TerminalOptions Inheritance object TerminalOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Authentication The authentication configuration options. Reserved for future versions. public AuthenticationOptions Authentication { get; set; } Property Value AuthenticationOptions Checker The checker configuration options. public CheckerOptions Checker { get; set; } Property Value CheckerOptions Driver The driver configuration options. Reserved for future versions. public DriverOptions Driver { get; set; } Property Value DriverOptions Dynamics The dynamics configuration options. public DynamicsOptions Dynamics { get; set; } Property Value DynamicsOptions Help The help configuration options. public HelpOptions Help { get; set; } Property Value HelpOptions Id The terminal identifier. public string Id { get; set; } Property Value string Licensing The licensing configuration options. public LicensingOptions Licensing { get; set; } Property Value LicensingOptions Parser The parser configuration options. public ParserOptions Parser { get; set; } Property Value ParserOptions Router The router configuration options. public RouterOptions Router { get; set; } Property Value RouterOptions"
  },
  "api/OneImlx.Terminal.Configuration.Options.html": {
    "href": "api/OneImlx.Terminal.Configuration.Options.html",
    "title": "Namespace OneImlx.Terminal.Configuration.Options",
    "summary": "Namespace OneImlx.Terminal.Configuration.Options Classes AuthenticationOptions The authentication configuration options. CheckerOptions The command, argument, and option checker configuration options. DriverOptions The driver configuration options. Reserved for future use. DynamicsOptions The dynamics configuration options. HelpOptions The help options. LicensingOptions The licensing configuration options. ParserOptions Represents the terminal parser options. RouterOptions The command router options. TerminalOptions The terminal configuration options."
  },
  "api/OneImlx.Terminal.Dynamics.ITerminalCommandSource-1.html": {
    "href": "api/OneImlx.Terminal.Dynamics.ITerminalCommandSource-1.html",
    "title": "Interface ITerminalCommandSource<TContext>",
    "summary": "Interface ITerminalCommandSource<TContext> Namespace OneImlx.Terminal.Dynamics Assembly OneImlx.Terminal.dll An abstraction of a terminal command source. public interface ITerminalCommandSource<TContext> where TContext : class Type Parameters TContext Remarks A command source is a provider of terminal commands. It can be a local or remote source. Methods LoadCommandSourceAsync(TContext) Loads the terminal command source asynchronously. Task LoadCommandSourceAsync(TContext context) Parameters context TContext The terminal source context. Returns Task This interface allows for different sources of terminal commands, either from local or remote origins. It supports customization via the TContext parameter, which can be tailored to specific loading contexts (e.g., configurations, authentication). Implementers can define how commands are loaded, catering to various application needs."
  },
  "api/OneImlx.Terminal.Dynamics.ITerminalCommandSourceAssemblyLoader-1.html": {
    "href": "api/OneImlx.Terminal.Dynamics.ITerminalCommandSourceAssemblyLoader-1.html",
    "title": "Interface ITerminalCommandSourceAssemblyLoader<TContext>",
    "summary": "Interface ITerminalCommandSourceAssemblyLoader<TContext> Namespace OneImlx.Terminal.Dynamics Assembly OneImlx.Terminal.dll An abstraction to load assemblies that are command source within your terminal. public interface ITerminalCommandSourceAssemblyLoader<TContext> Type Parameters TContext Methods LoadAssembliesAsync(TContext) Loads the assemblies asynchronously. Task<IEnumerable<Assembly>> LoadAssembliesAsync(TContext context) Parameters context TContext The assembly load context. Returns Task<IEnumerable<Assembly>>"
  },
  "api/OneImlx.Terminal.Dynamics.ITerminalCommandSourceChecker-1.html": {
    "href": "api/OneImlx.Terminal.Dynamics.ITerminalCommandSourceChecker-1.html",
    "title": "Interface ITerminalCommandSourceChecker<TContext>",
    "summary": "Interface ITerminalCommandSourceChecker<TContext> Namespace OneImlx.Terminal.Dynamics Assembly OneImlx.Terminal.dll An abstraction to checks the ITerminalCommandSource<TContext>. public interface ITerminalCommandSourceChecker<TContext> where TContext : class Type Parameters TContext Methods CheckSourceAsync(TContext) Checks the source and throws an exception if the source is not valid. Task CheckSourceAsync(TContext context) Parameters context TContext Returns Task"
  },
  "api/OneImlx.Terminal.Dynamics.PublishedAssemblyLoader.html": {
    "href": "api/OneImlx.Terminal.Dynamics.PublishedAssemblyLoader.html",
    "title": "Class PublishedAssemblyLoader",
    "summary": "Class PublishedAssemblyLoader Namespace OneImlx.Terminal.Dynamics Assembly OneImlx.Terminal.dll The default AssemblyLoadContext based ITerminalCommandSourceAssemblyLoader<TContext>. public sealed class PublishedAssemblyLoader : ITerminalCommandSourceAssemblyLoader<PublishedCommandSourceContext> Inheritance object PublishedAssemblyLoader Implements ITerminalCommandSourceAssemblyLoader<PublishedCommandSourceContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks This class provides a basic implementation for loading command source assemblies from a given context. It loads each assembly specified in the PublishedCommandSourceContext without resolving conflicts that might arise from different versions of the same assembly or dependencies. The loader checks if an assembly is already loaded before attempting to load it again and logs a warning if so. The default implementation is straightforward but does not handle advanced scenarios such as version conflicts or loading assemblies with different dependency trees. For more complex requirements, including advanced conflict resolution and dependency management, developers should create a custom loader by implementing the ITerminalCommandSourceAssemblyLoader<TContext> interface with their own logic. Constructors PublishedAssemblyLoader(ILogger<PublishedAssemblyLoader>) Initializes a new instance of the PublishedAssemblyLoader class. public PublishedAssemblyLoader(ILogger<PublishedAssemblyLoader> logger) Parameters logger ILogger<PublishedAssemblyLoader> The logger. Methods LoadAssembliesAsync(PublishedCommandSourceContext) Asynchronously loads the primary command source assemblies specified in the context. While loading these primary assemblies, dependency assemblies may also be loaded. However, the returned enumerable only includes the primary assemblies that are requested by the context, not the dependencies. public Task<IEnumerable<Assembly>> LoadAssembliesAsync(PublishedCommandSourceContext context) Parameters context PublishedCommandSourceContext The context containing information about the primary command source assemblies to load, such as their paths. Returns Task<IEnumerable<Assembly>> A task representing the asynchronous operation, with a result of an enumerable of the loaded primary command source assemblies."
  },
  "api/OneImlx.Terminal.Dynamics.PublishedCommandSource.html": {
    "href": "api/OneImlx.Terminal.Dynamics.PublishedCommandSource.html",
    "title": "Class PublishedCommandSource",
    "summary": "Class PublishedCommandSource Namespace OneImlx.Terminal.Dynamics Assembly OneImlx.Terminal.dll The default implementation of ITerminalCommandSource<TContext> that loads terminal commands from assemblies in a published location. public class PublishedCommandSource : ITerminalCommandSource<PublishedCommandSourceContext> Inheritance object PublishedCommandSource Implements ITerminalCommandSource<PublishedCommandSourceContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is designed to dynamically load assemblies containing terminal commands. It is capable of handling both local and network-based published locations. The dynamic loading of assemblies allows for a modular and extensible design where terminal commands can be updated or extended without modifying the core application. Security Considerations: Since assemblies are loaded dynamically, it's critical to ensure they are from trusted sources. The class leverages ITerminalCommandSourceChecker<TContext> to validate and verify the integrity and authenticity of the assemblies before loading. Developers should implement robust checking mechanisms in the CheckSourceAsync(TContext) to mitigate risks such as code injection or running untrusted code. Compatibility Concerns: Care should be taken to ensure compatibility of the dynamically loaded assemblies with the main application, particularly in terms of versioning and dependency management. Performance Implications: Dynamically loading assemblies can have performance implications, especially when loading from network locations. It's advisable to monitor performance and optimize the loading process. Constructors PublishedCommandSource(ITerminalTextHandler, ITerminalCommandSourceAssemblyLoader<PublishedCommandSourceContext>, ITerminalCommandSourceChecker<PublishedCommandSourceContext>, ITerminalCommandStore, IOptions<TerminalOptions>, ILogger<PublishedCommandSource>) Initializes a new instance. public PublishedCommandSource(ITerminalTextHandler textHandler, ITerminalCommandSourceAssemblyLoader<PublishedCommandSourceContext> publishedAssembliesLoader, ITerminalCommandSourceChecker<PublishedCommandSourceContext> publishedCommandSourceChecker, ITerminalCommandStore commandStore, IOptions<TerminalOptions> terminalOptions, ILogger<PublishedCommandSource> logger) Parameters textHandler ITerminalTextHandler The text handler. publishedAssembliesLoader ITerminalCommandSourceAssemblyLoader<PublishedCommandSourceContext> The published assemblies loader. publishedCommandSourceChecker ITerminalCommandSourceChecker<PublishedCommandSourceContext> The terminal source checker. commandStore ITerminalCommandStore The mutable command store. terminalOptions IOptions<TerminalOptions> The terminal configuration options. logger ILogger<PublishedCommandSource> The logger. Methods LoadCommandSourceAsync(PublishedCommandSourceContext) Loads the assemblies from the PublishedAssemblies. public Task LoadCommandSourceAsync(PublishedCommandSourceContext context) Parameters context PublishedCommandSourceContext Returns Task Remarks The published location can be a local location or a remote location on a network. When loading assemblies dynamically, be aware of security implications and compatibility issues, especially if you're loading third-party or untrusted assemblies. Always validate and verify the assemblies before loading them into your application context. The LoadCommandSourceAsync(PublishedCommandSourceContext) will call CheckSourceAsync(TContext) before it starts loading any assembly."
  },
  "api/OneImlx.Terminal.Dynamics.PublishedCommandSourceContext.html": {
    "href": "api/OneImlx.Terminal.Dynamics.PublishedCommandSourceContext.html",
    "title": "Class PublishedCommandSourceContext",
    "summary": "Class PublishedCommandSourceContext Namespace OneImlx.Terminal.Dynamics Assembly OneImlx.Terminal.dll The context for PublishedCommandSource public sealed class PublishedCommandSourceContext Inheritance object PublishedCommandSourceContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PublishedCommandSourceContext() Initializes a new instance. public PublishedCommandSourceContext() Properties PublishedAssemblies The collection of published assembly with extension and its publish folder. public Dictionary<string, string> PublishedAssemblies { get; } Property Value Dictionary<string, string> Remarks Key is the published assembly file name with extension, and value is its publish folder that contains all the dependencies and the assembly itself."
  },
  "api/OneImlx.Terminal.Dynamics.html": {
    "href": "api/OneImlx.Terminal.Dynamics.html",
    "title": "Namespace OneImlx.Terminal.Dynamics",
    "summary": "Namespace OneImlx.Terminal.Dynamics Classes PublishedAssemblyLoader The default AssemblyLoadContext based ITerminalCommandSourceAssemblyLoader<TContext>. PublishedCommandSource The default implementation of ITerminalCommandSource<TContext> that loads terminal commands from assemblies in a published location. PublishedCommandSourceContext The context for PublishedCommandSource Interfaces ITerminalCommandSourceAssemblyLoader<TContext> An abstraction to load assemblies that are command source within your terminal. ITerminalCommandSourceChecker<TContext> An abstraction to checks the ITerminalCommandSource<TContext>. ITerminalCommandSource<TContext> An abstraction of a terminal command source."
  },
  "api/OneImlx.Terminal.Events.ITerminalEventHandler.html": {
    "href": "api/OneImlx.Terminal.Events.ITerminalEventHandler.html",
    "title": "Interface ITerminalEventHandler",
    "summary": "Interface ITerminalEventHandler Namespace OneImlx.Terminal.Events Assembly OneImlx.Terminal.dll The terminal event handler. public interface ITerminalEventHandler Methods AfterCommandCheckAsync(Command, CommandCheckerResult) Override this method if you will perform an asynchronous operation after ICommandHandler ends a command check. Task AfterCommandCheckAsync(Command command, CommandCheckerResult result) Parameters command Command The command object. result CommandCheckerResult The command run result. Returns Task Remarks The framework will not call AfterCommandCheckAsync(Command, CommandCheckerResult) if there is an error during the command check. AfterCommandRouteAsync(TerminalRequest, Command?, CommandResult?) Override this method if you will perform an asynchronous operation after ICommandRouter ends a command request and process the command result. Task AfterCommandRouteAsync(TerminalRequest request, Command? command, CommandResult? result) Parameters request TerminalRequest The command request. command Command The command object. May be null. result CommandResult The command router result. May be null. Returns Task Remarks The framework will call AfterCommandRouteAsync(TerminalRequest, Command?, CommandResult?) even if there is an error during command routing. The command and result parameters may be null. The router constructs a command object if the parser, handler, and checker pass and routes a command to run. AfterCommandRunAsync(Command, CommandRunnerResult) Override this method if you will perform an asynchronous operation after ICommandHandler ends a command run and process the command result. Task AfterCommandRunAsync(Command command, CommandRunnerResult result) Parameters command Command The command object. result CommandRunnerResult The command run result. Returns Task Remarks The framework will not call AfterCommandRunAsync(Command, CommandRunnerResult) if there is an error during the command run. BeforeCommandCheckAsync(Command) Override this method if you will perform an asynchronous operation before ICommandHandler starts a command check. Task BeforeCommandCheckAsync(Command command) Parameters command Command The command object. Returns Task BeforeCommandRouteAsync(TerminalRequest) Override this method if you will perform an asynchronous operation before ICommandRouter starts a command request. Task BeforeCommandRouteAsync(TerminalRequest request) Parameters request TerminalRequest The command request. Returns Task BeforeCommandRunAsync(Command) Override this method if you will perform an asynchronous operation before ICommandHandler starts a command run. Task BeforeCommandRunAsync(Command command) Parameters command Command The command object. Returns Task"
  },
  "api/OneImlx.Terminal.Events.html": {
    "href": "api/OneImlx.Terminal.Events.html",
    "title": "Namespace OneImlx.Terminal.Events",
    "summary": "Namespace OneImlx.Terminal.Events Interfaces ITerminalEventHandler The terminal event handler."
  },
  "api/OneImlx.Terminal.Extensions.ByteArrayExtensions.html": {
    "href": "api/OneImlx.Terminal.Extensions.ByteArrayExtensions.html",
    "title": "Class ByteArrayExtensions",
    "summary": "Class ByteArrayExtensions Namespace OneImlx.Terminal.Extensions Assembly OneImlx.Terminal.dll Provides extension methods for byte arrays. [Performance(\"Check and improve performance.\", Version = \"6.x\")] public static class ByteArrayExtensions Inheritance object ByteArrayExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Split(byte[], byte, bool, out bool) Splits a byte array into segments based on a delimiter. public static byte[][] Split(this byte[] buffer, byte delimiter, bool ignoreEmpty, out bool endsWithDelimiter) Parameters buffer byte[] The source buffer array to split. delimiter byte The delimiter byte. ignoreEmpty bool Indicates whether to ignore empty segments. endsWithDelimiter bool Indicates whether the source array ends with the delimiter. Returns byte[][] An array of byte arrays representing the segments."
  },
  "api/OneImlx.Terminal.Extensions.IArgumentBuilderExtensions.html": {
    "href": "api/OneImlx.Terminal.Extensions.IArgumentBuilderExtensions.html",
    "title": "Class IArgumentBuilderExtensions",
    "summary": "Class IArgumentBuilderExtensions Namespace OneImlx.Terminal.Extensions Assembly OneImlx.Terminal.dll The IArgumentBuilder extension methods. public static class IArgumentBuilderExtensions Inheritance object IArgumentBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ValidationAttribute(IArgumentBuilder, Type, params object[]?) Adds a ValidationAttribute<TValidation>(IArgumentBuilder, params object[]?) to the IArgumentBuilder public static IArgumentBuilder ValidationAttribute(this IArgumentBuilder builder, Type validationAttribute, params object[]? args) Parameters builder IArgumentBuilder The ICommandBuilder. validationAttribute Type The validation attribute. args object[] An array of parameters that match in number, order, and type of constructor parameters for the validation attribute. If args is an empty array or null, the constructor that takes no parameters (the default constructor) is invoked. The constructor must be public. Returns IArgumentBuilder The configured ICommandBuilder. ValidationAttribute<TValidation>(IArgumentBuilder, params object[]?) Adds a ValidationAttribute<TValidation>(IArgumentBuilder, params object[]?) to the IArgumentBuilder public static IArgumentBuilder ValidationAttribute<TValidation>(this IArgumentBuilder builder, params object[]? args) where TValidation : ValidationAttribute Parameters builder IArgumentBuilder The ICommandBuilder. args object[] An array of parameters that match in number, order, and type of constructor parameters for the validation attribute. If args is an empty array or null, the constructor that takes no parameters (the default constructor) is invoked. The constructor must be public. Returns IArgumentBuilder The configured ICommandBuilder. Type Parameters TValidation"
  },
  "api/OneImlx.Terminal.Extensions.ICommandBuilderExtensions.html": {
    "href": "api/OneImlx.Terminal.Extensions.ICommandBuilderExtensions.html",
    "title": "Class ICommandBuilderExtensions",
    "summary": "Class ICommandBuilderExtensions Namespace OneImlx.Terminal.Extensions Assembly OneImlx.Terminal.dll The ICommandBuilder extension methods. public static class ICommandBuilderExtensions Inheritance object ICommandBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Checker<TChecker>(ICommandBuilder) Updates the checker for the registered command descriptor. public static ICommandBuilder Checker<TChecker>(this ICommandBuilder builder) where TChecker : ICommandChecker Parameters builder ICommandBuilder The ICommandBuilder. Returns ICommandBuilder The configured ICommandBuilder. Type Parameters TChecker The checker type. CustomProperty(ICommandBuilder, string, object) Adds a command custom property to the ICommandBuilder. public static ICommandBuilder CustomProperty(this ICommandBuilder builder, string key, object value) Parameters builder ICommandBuilder The ICommandBuilder. key string The custom property key. value object The custom property value. Returns ICommandBuilder The configured ICommandBuilder. DefineArgument(ICommandBuilder, int, string, string, string, ArgumentFlags) Starts a new IArgumentBuilder definition. public static IArgumentBuilder DefineArgument(this ICommandBuilder builder, int order, string id, string dataType, string description, ArgumentFlags flags) Parameters builder ICommandBuilder The ICommandBuilder. order int The argument order. id string The argument id. dataType string The argument data type. description string The argument description. flags ArgumentFlags The argument flags. Returns IArgumentBuilder The configured IArgumentBuilder. DefineOption(ICommandBuilder, string, string, string, OptionFlags, string?) Starts a new IOptionBuilder definition. public static IOptionBuilder DefineOption(this ICommandBuilder builder, string id, string dataType, string description, OptionFlags flags, string? alias = null) Parameters builder ICommandBuilder The ICommandBuilder. id string The option id. dataType string The option data type. description string The option description. flags OptionFlags The option flags. alias string The option alias. Returns IOptionBuilder The configured IOptionBuilder. Owners(ICommandBuilder, OwnerIdCollection) Adds a command owners to the ICommandBuilder. public static ICommandBuilder Owners(this ICommandBuilder builder, OwnerIdCollection owners) Parameters builder ICommandBuilder The ICommandBuilder. owners OwnerIdCollection The owner identifiers. Returns ICommandBuilder The configured ICommandBuilder. Tags(ICommandBuilder, TagIdCollection) Adds command tags to the ICommandBuilder. public static ICommandBuilder Tags(this ICommandBuilder builder, TagIdCollection tagIds) Parameters builder ICommandBuilder The ICommandBuilder. tagIds TagIdCollection The tag identifiers. Returns ICommandBuilder The configured ICommandBuilder."
  },
  "api/OneImlx.Terminal.Extensions.IHostBuilderExtensions.html": {
    "href": "api/OneImlx.Terminal.Extensions.IHostBuilderExtensions.html",
    "title": "Class IHostBuilderExtensions",
    "summary": "Class IHostBuilderExtensions Namespace OneImlx.Terminal.Extensions Assembly OneImlx.Terminal.dll The IHostBuilder extension methods. public static class IHostBuilderExtensions Inheritance object IHostBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RunTerminalRouterAsync<TRouter, TContext>(IHostBuilder, TContext) Starts the IHost and runs the ITerminalRouter<TContext> asynchronously, blocking the calling thread until a cancellation request. public static Task RunTerminalRouterAsync<TRouter, TContext>(this IHostBuilder hostBuilder, TContext context) where TRouter : class, ITerminalRouter<TContext> where TContext : TerminalRouterContext Parameters hostBuilder IHostBuilder The host builder. context TContext The routing context for terminal console routing. Returns Task Type Parameters TRouter TContext RunTerminalRouter<TRouter, TContext>(IHostBuilder, TContext) Starts the IHost and runs the ITerminalRouter<TContext> synchronously, blocking the calling thread until a cancellation request. public static void RunTerminalRouter<TRouter, TContext>(this IHostBuilder hostBuilder, TContext context) where TRouter : class, ITerminalRouter<TContext> where TContext : TerminalRouterContext Parameters hostBuilder IHostBuilder The host builder. context TContext The routing context for terminal console routing. Type Parameters TRouter TContext"
  },
  "api/OneImlx.Terminal.Extensions.IHostExtensions.html": {
    "href": "api/OneImlx.Terminal.Extensions.IHostExtensions.html",
    "title": "Class IHostExtensions",
    "summary": "Class IHostExtensions Namespace OneImlx.Terminal.Extensions Assembly OneImlx.Terminal.dll The IHost extension methods. public static class IHostExtensions Inheritance object IHostExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RunTerminalRouterAsync<TRouting, TContext>(IHost, TContext) Runs the ITerminalRouter<TContext> asynchronously, blocking the calling thread until a cancellation request. public static Task RunTerminalRouterAsync<TRouting, TContext>(this IHost host, TContext context) where TRouting : class, ITerminalRouter<TContext> where TContext : TerminalRouterContext Parameters host IHost The host. context TContext The routing context for terminal console routing. Returns Task Type Parameters TRouting TContext"
  },
  "api/OneImlx.Terminal.Extensions.IOptionBuilderExtensions.html": {
    "href": "api/OneImlx.Terminal.Extensions.IOptionBuilderExtensions.html",
    "title": "Class IOptionBuilderExtensions",
    "summary": "Class IOptionBuilderExtensions Namespace OneImlx.Terminal.Extensions Assembly OneImlx.Terminal.dll The IOptionBuilder extension methods. public static class IOptionBuilderExtensions Inheritance object IOptionBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ValidationAttribute(IOptionBuilder, Type, params object[]?) Adds a ValidationAttribute<TValidation>(IOptionBuilder, params object[]?) to the IOptionBuilder public static IOptionBuilder ValidationAttribute(this IOptionBuilder builder, Type validationAttribute, params object[]? args) Parameters builder IOptionBuilder The ICommandBuilder. validationAttribute Type The validation attribute. args object[] An array of options that match in number, order, and type of constructor parameters for the validation attribute. If args is an empty array or null, the constructor that takes no parameters (the default constructor) is invoked. The constructor must be public. Returns IOptionBuilder The configured ICommandBuilder. ValidationAttribute<TValidation>(IOptionBuilder, params object[]?) Adds a ValidationAttribute<TValidation>(IOptionBuilder, params object[]?) to the IOptionBuilder public static IOptionBuilder ValidationAttribute<TValidation>(this IOptionBuilder builder, params object[]? args) where TValidation : ValidationAttribute Parameters builder IOptionBuilder The ICommandBuilder. args object[] An array of options that match in number, order, and type of constructor parameters for the validation attribute. If args is an empty array or null, the constructor that takes no parameters (the default constructor) is invoked. The constructor must be public. Returns IOptionBuilder The configured ICommandBuilder. Type Parameters TValidation"
  },
  "api/OneImlx.Terminal.Extensions.IServiceCollectionExtensions.html": {
    "href": "api/OneImlx.Terminal.Extensions.IServiceCollectionExtensions.html",
    "title": "Class IServiceCollectionExtensions",
    "summary": "Class IServiceCollectionExtensions Namespace OneImlx.Terminal.Extensions Assembly OneImlx.Terminal.dll Provides extension methods to register OneImlx.Terminal services with an IServiceCollection. public static class IServiceCollectionExtensions Inheritance object IServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddTerminalConsole<TStore, THelp, TException, TConsole>(IServiceCollection, ITerminalTextHandler, Action<TerminalOptions>) Adds the default OneImlx.Terminal services for console based terminal applications. public static ITerminalBuilder AddTerminalConsole<TStore, THelp, TException, TConsole>(this IServiceCollection services, ITerminalTextHandler textHandler, Action<TerminalOptions> setupAction) where TStore : class, ITerminalCommandStore where THelp : class, ITerminalHelpProvider where TException : class, ITerminalExceptionHandler where TConsole : class, ITerminalConsole Parameters services IServiceCollection The IServiceCollection to add the services to. textHandler ITerminalTextHandler The text handler. setupAction Action<TerminalOptions> A delegate to configure the TerminalOptions. Returns ITerminalBuilder A ITerminalBuilder that can be used to further configure the terminal services. Type Parameters TStore The type implementing ITerminalCommandStore. THelp The type implementing ITerminalHelpProvider. TException The type implementing ITerminalExceptionHandler. TConsole The type implementing ITerminalConsole. Remarks The console refers to an abstraction of the system console. The console can be a system console, a web console, or a custom console. AddTerminalDefault<TStore, THelp, TException>(IServiceCollection, ITerminalTextHandler, Action<TerminalOptions>) Adds the default OneImlx.Terminal services to build custom terminal interfaces. public static ITerminalBuilder AddTerminalDefault<TStore, THelp, TException>(this IServiceCollection services, ITerminalTextHandler textHandler, Action<TerminalOptions> setupAction) where TStore : class, ITerminalCommandStore where THelp : class, ITerminalHelpProvider where TException : class, ITerminalExceptionHandler Parameters services IServiceCollection The IServiceCollection to add the services to. textHandler ITerminalTextHandler The text handler. setupAction Action<TerminalOptions> A delegate to configure the TerminalOptions. Returns ITerminalBuilder A ITerminalBuilder that can be used to further configure the terminal services. Type Parameters TStore The type implementing ITerminalCommandStore. THelp The type implementing ITerminalHelpProvider. TException The type implementing ITerminalExceptionHandler. AddTerminal<TStore>(IServiceCollection, ITerminalTextHandler) Adds the OneImlx.Terminal services to the specified IServiceCollection. public static ITerminalBuilder AddTerminal<TStore>(this IServiceCollection services, ITerminalTextHandler textHandler) where TStore : class, ITerminalCommandStore Parameters services IServiceCollection The IServiceCollection to add the services to. textHandler ITerminalTextHandler The text handler. Returns ITerminalBuilder A ITerminalBuilder that can be used to further configure the terminal services. Type Parameters TStore The type implementing ITerminalCommandStore. AddTerminal<TStore>(IServiceCollection, ITerminalTextHandler, IConfiguration) Adds the OneImlx.Terminal services to the specified IServiceCollection. public static ITerminalBuilder AddTerminal<TStore>(this IServiceCollection services, ITerminalTextHandler textHandler, IConfiguration configuration) where TStore : class, ITerminalCommandStore Parameters services IServiceCollection The IServiceCollection to add the services to. textHandler ITerminalTextHandler The text handler. configuration IConfiguration The configuration to bind to TerminalOptions. Returns ITerminalBuilder A ITerminalBuilder that can be used to further configure the terminal services. Type Parameters TStore The type implementing ITerminalCommandStore. AddTerminal<TStore>(IServiceCollection, ITerminalTextHandler, Action<TerminalOptions>) Adds the OneImlx.Terminal services to the specified IServiceCollection. public static ITerminalBuilder AddTerminal<TStore>(this IServiceCollection services, ITerminalTextHandler textHandler, Action<TerminalOptions> setupAction) where TStore : class, ITerminalCommandStore Parameters services IServiceCollection The IServiceCollection to add the services to. textHandler ITerminalTextHandler The text handler. setupAction Action<TerminalOptions> A delegate to configure the TerminalOptions. Returns ITerminalBuilder A ITerminalBuilder that can be used to further configure the terminal services. Type Parameters TStore The type implementing ITerminalCommandStore."
  },
  "api/OneImlx.Terminal.Extensions.ITerminalBuilderExtensions.html": {
    "href": "api/OneImlx.Terminal.Extensions.ITerminalBuilderExtensions.html",
    "title": "Class ITerminalBuilderExtensions",
    "summary": "Class ITerminalBuilderExtensions Namespace OneImlx.Terminal.Extensions Assembly OneImlx.Terminal.dll The ITerminalBuilder extension methods. public static class ITerminalBuilderExtensions Inheritance object ITerminalBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddArgumentChecker<TMapper, TChecker>(ITerminalBuilder) Adds the IDataTypeMapper<TValue> and IArgumentChecker to the service collection. public static ITerminalBuilder AddArgumentChecker<TMapper, TChecker>(this ITerminalBuilder builder) where TMapper : class, IDataTypeMapper<Argument> where TChecker : class, IArgumentChecker Parameters builder ITerminalBuilder The builder. Returns ITerminalBuilder The configured ITerminalBuilder. Type Parameters TMapper The argument mapper type. TChecker The argument checker type. AddCommandParser<TCommand, TRequest>(ITerminalBuilder) Adds the ICommandParser to the service collection. public static ITerminalBuilder AddCommandParser<TCommand, TRequest>(this ITerminalBuilder builder) where TCommand : class, ICommandParser where TRequest : class, ITerminalRequestParser Parameters builder ITerminalBuilder The builder. Returns ITerminalBuilder The configured ITerminalBuilder. Type Parameters TCommand The command parser type. TRequest The terminal request parser type. AddCommandRouter<TRouter, THandler, TResolver>(ITerminalBuilder) Adds the ICommandRouter and ICommandHandler to the service collection. public static ITerminalBuilder AddCommandRouter<TRouter, THandler, TResolver>(this ITerminalBuilder builder) where TRouter : class, ICommandRouter where THandler : class, ICommandHandler where TResolver : class, ICommandResolver Parameters builder ITerminalBuilder The builder. Returns ITerminalBuilder The configured ITerminalBuilder. Type Parameters TRouter THandler TResolver AddCommandStore<TStore>(ITerminalBuilder) Adds the ITerminalCommandStore to the service collection. public static ITerminalBuilder AddCommandStore<TStore>(this ITerminalBuilder builder) where TStore : class, ITerminalCommandStore Parameters builder ITerminalBuilder The builder. Returns ITerminalBuilder The configured ITerminalBuilder. Type Parameters TStore The command descriptor store type. AddConfigurationOptions(ITerminalBuilder) Adds the TerminalOptions to the service collection. public static ITerminalBuilder AddConfigurationOptions(this ITerminalBuilder builder) Parameters builder ITerminalBuilder The builder. Returns ITerminalBuilder The configured ITerminalBuilder. AddConsole<TConsole>(ITerminalBuilder) Adds the ITerminalConsole to the service collection. public static ITerminalBuilder AddConsole<TConsole>(this ITerminalBuilder builder) where TConsole : class, ITerminalConsole Parameters builder ITerminalBuilder The builder. Returns ITerminalBuilder The configured ITerminalBuilder. Type Parameters TConsole AddDeclarativeAssembly(ITerminalBuilder, Assembly) Adds all the IDeclarativeRunner implementations to the service collection. public static ITerminalBuilder AddDeclarativeAssembly(this ITerminalBuilder builder, Assembly assembly) Parameters builder ITerminalBuilder The builder. assembly Assembly The assembly to inspect. Returns ITerminalBuilder The configured ITerminalBuilder. Remarks The AddDeclarativeAssembly(ITerminalBuilder, Assembly) reads the target assembly and inspects all the declarative targets using reflection. Reflection may have a performance bottleneck. For more optimized and direct declarative target inspection, use AddDeclarativeRunner<TDeclarativeRunner>(ITerminalBuilder). AddDeclarativeAssembly(ITerminalBuilder, Type) Adds all the IDeclarativeRunner implementations to the service collection. public static ITerminalBuilder AddDeclarativeAssembly(this ITerminalBuilder builder, Type assemblyType) Parameters builder ITerminalBuilder The builder. assemblyType Type The type whose assembly to inspect and read all the declarative targets. Returns ITerminalBuilder The configured ITerminalBuilder. Remarks The AddDeclarativeAssembly(ITerminalBuilder, Type) reads the target assembly and inspects all the declarative targets using reflection. Reflection may have a performance bottleneck. For more optimized and direct declarative target inspection, use AddDeclarativeRunner<TDeclarativeRunner>(ITerminalBuilder). AddDeclarativeAssembly<TType>(ITerminalBuilder) Adds all the IDeclarativeRunner implementations to the service collection. public static ITerminalBuilder AddDeclarativeAssembly<TType>(this ITerminalBuilder builder) Parameters builder ITerminalBuilder The builder. Returns ITerminalBuilder The configured ITerminalBuilder. Type Parameters TType The type whose assembly to inspect and read all the declarative targets. Remarks The AddDeclarativeAssembly(ITerminalBuilder, Type) reads the target assembly and inspects all the declarative targets using reflection. Reflection may have a performance bottleneck. For more optimized and direct declarative target inspection, use AddDeclarativeRunner<TDeclarativeRunner>(ITerminalBuilder). AddDeclarativeRunner<TDeclarativeRunner>(ITerminalBuilder) Adds a IDeclarativeRunner to the service collection. public static ITerminalBuilder AddDeclarativeRunner<TDeclarativeRunner>(this ITerminalBuilder builder) where TDeclarativeRunner : IDeclarativeRunner Parameters builder ITerminalBuilder The builder. Returns ITerminalBuilder The AddDeclarativeRunner<TDeclarativeRunner>(ITerminalBuilder) inspects the declarative target type using reflection. Type Parameters TDeclarativeRunner AddDynamics<TContext, TSource, TChecker, TLoader>(ITerminalBuilder) Adds dynamics services to the terminal builder for loading commands from an external source. This method registers the specified command source, command source checker, and command source assembly loader as singletons in the service collection. public static ITerminalBuilder AddDynamics<TContext, TSource, TChecker, TLoader>(this ITerminalBuilder builder) where TContext : class where TSource : class, ITerminalCommandSource<TContext> where TChecker : class, ITerminalCommandSourceChecker<TContext> where TLoader : class, ITerminalCommandSourceAssemblyLoader<TContext> Parameters builder ITerminalBuilder The terminal builder to which the integration services are added. Returns ITerminalBuilder The ITerminalBuilder with the added integration services, enabling method chaining. Type Parameters TContext The type of the context used in the command source, checker, and loader. Must be a class. TSource The type of the terminal command source. Must be a class implementing ITerminalCommandSource<TContext>. TChecker The type of the terminal command source checker. Must be a class implementing ITerminalCommandSourceChecker<TContext>. TLoader The type of the terminal command source assembly loader. Must be a class implementing ITerminalCommandSourceAssemblyLoader<TContext>. AddEventHandler<TEventHandler>(ITerminalBuilder) Adds the ITerminalEventHandler to the service collection. public static ITerminalBuilder AddEventHandler<TEventHandler>(this ITerminalBuilder builder) where TEventHandler : class, ITerminalEventHandler Parameters builder ITerminalBuilder The builder. Returns ITerminalBuilder The configured ITerminalBuilder. Type Parameters TEventHandler AddExceptionHandler<THandler>(ITerminalBuilder) Adds the ITerminalExceptionHandler to the service collection. public static ITerminalBuilder AddExceptionHandler<THandler>(this ITerminalBuilder builder) where THandler : class, ITerminalExceptionHandler Parameters builder ITerminalBuilder The builder. Returns ITerminalBuilder The configured ITerminalBuilder. Type Parameters THandler The ITerminalExceptionHandler type. AddHelpProvider<THelpProvider>(ITerminalBuilder) Adds the command ITerminalHelpProvider to the service collection. public static ITerminalBuilder AddHelpProvider<THelpProvider>(this ITerminalBuilder builder) where THelpProvider : class, ITerminalHelpProvider Parameters builder ITerminalBuilder The builder. Returns ITerminalBuilder The configured ITerminalBuilder. Type Parameters THelpProvider AddLicensing(ITerminalBuilder) Adds terminal license handler to the service collection. public static ITerminalBuilder AddLicensing(this ITerminalBuilder builder) Parameters builder ITerminalBuilder The builder. Returns ITerminalBuilder The configured ITerminalBuilder. AddOptionChecker<TMapper, TChecker>(ITerminalBuilder) Adds the IDataTypeMapper<TValue> and IOptionChecker to the service collection. public static ITerminalBuilder AddOptionChecker<TMapper, TChecker>(this ITerminalBuilder builder) where TMapper : class, IDataTypeMapper<Option> where TChecker : class, IOptionChecker Parameters builder ITerminalBuilder The builder. Returns ITerminalBuilder The configured ITerminalBuilder. Type Parameters TMapper The option mapper type. TChecker The option checker type. AddProcessor<TTerminalProcessor>(ITerminalBuilder) Adds the ITerminalProcessor to the service collection. public static ITerminalBuilder AddProcessor<TTerminalProcessor>(this ITerminalBuilder builder) where TTerminalProcessor : class, ITerminalProcessor Parameters builder ITerminalBuilder The builder. Returns ITerminalBuilder The configured ITerminalBuilder. Type Parameters TTerminalProcessor The terminal processor type. AddTerminalRouterContext<TContext>(ITerminalBuilder, TContext) Adds the TerminalRouterContext to the service collection. public static ITerminalBuilder AddTerminalRouterContext<TContext>(this ITerminalBuilder builder, TContext terminalRouterContext) where TContext : TerminalRouterContext Parameters builder ITerminalBuilder The builder. terminalRouterContext TContext The terminal router context. Returns ITerminalBuilder The configured ITerminalBuilder. Type Parameters TContext AddTerminalRouter<TRouter, TContext>(ITerminalBuilder) Adds the ITerminalRouter<TContext> to the service collection. public static ITerminalBuilder AddTerminalRouter<TRouter, TContext>(this ITerminalBuilder builder) where TRouter : class, ITerminalRouter<TContext> where TContext : TerminalRouterContext Parameters builder ITerminalBuilder The builder. Returns ITerminalBuilder The configured ITerminalBuilder. Type Parameters TRouter TContext AddTextHandler<TTextHandler>(ITerminalBuilder, TTextHandler) Adds the ITerminalTextHandler to the service collection. public static ITerminalBuilder AddTextHandler<TTextHandler>(this ITerminalBuilder builder, TTextHandler textHandler) where TTextHandler : class, ITerminalTextHandler Parameters builder ITerminalBuilder The builder. textHandler TTextHandler The text handler. Returns ITerminalBuilder The configured ITerminalBuilder. Type Parameters TTextHandler The text handler. Remarks AddTextHandler<TTextHandler>(ITerminalBuilder, TTextHandler) requires an instance of TTextHandler instead of just its type because the terminal application is expected to operate with a single, consistent instance of ITerminalTextHandler throughout its lifetime. By passing an instance, it allows the terminal to maintain state or configuration specific to that instance, ensuring consistent text handling behavior across different parts of the application. This approach also facilitates more flexible initialization patterns, where the ITerminalTextHandler can be configured or initialized outside of the dependency injection container before being registered. This can be particularly useful when the text handler requires complex setup or depends on settings or services that aren't readily available within the DI context. DefineCommand<TRunner>(ITerminalBuilder, string, string, string, CommandType, CommandFlags) Starts a new ICommandBuilder definition with the default CommandChecker. Applications must call the Add() method to add the CommandDescriptor to the service collection. public static ICommandBuilder DefineCommand<TRunner>(this ITerminalBuilder builder, string id, string name, string description, CommandType commandType, CommandFlags commandFlags) where TRunner : ICommandRunner<CommandRunnerResult> Parameters builder ITerminalBuilder The builder. id string The command id. name string The command name. description string The command description. commandType CommandType The command type. commandFlags CommandFlags The command flags. Returns ICommandBuilder The configured ITerminalBuilder. Type Parameters TRunner The command runner type."
  },
  "api/OneImlx.Terminal.Extensions.html": {
    "href": "api/OneImlx.Terminal.Extensions.html",
    "title": "Namespace OneImlx.Terminal.Extensions",
    "summary": "Namespace OneImlx.Terminal.Extensions Classes ByteArrayExtensions Provides extension methods for byte arrays. IArgumentBuilderExtensions The IArgumentBuilder extension methods. ICommandBuilderExtensions The ICommandBuilder extension methods. IHostBuilderExtensions The IHostBuilder extension methods. IHostExtensions The IHost extension methods. IOptionBuilderExtensions The IOptionBuilder extension methods. IServiceCollectionExtensions Provides extension methods to register OneImlx.Terminal services with an IServiceCollection. ITerminalBuilderExtensions The ITerminalBuilder extension methods."
  },
  "api/OneImlx.Terminal.Hosting.ArgumentBuilder.html": {
    "href": "api/OneImlx.Terminal.Hosting.ArgumentBuilder.html",
    "title": "Class ArgumentBuilder",
    "summary": "Class ArgumentBuilder Namespace OneImlx.Terminal.Hosting Assembly OneImlx.Terminal.dll The default IArgumentBuilder. public sealed class ArgumentBuilder : IArgumentBuilder Inheritance object ArgumentBuilder Implements IArgumentBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods IArgumentBuilderExtensions.ValidationAttribute(IArgumentBuilder, Type, params object[]?) IArgumentBuilderExtensions.ValidationAttribute<TValidation>(IArgumentBuilder, params object[]?) Constructors ArgumentBuilder(ICommandBuilder) Initializes a new instance. public ArgumentBuilder(ICommandBuilder commandBuilder) Parameters commandBuilder ICommandBuilder The ICommandBuilder. Properties Services The service collection. public IServiceCollection Services { get; } Property Value IServiceCollection Methods Add() Builds an ArgumentBuilder and adds it to the service collection. public ICommandBuilder Add() Returns ICommandBuilder"
  },
  "api/OneImlx.Terminal.Hosting.CommandBuilder.html": {
    "href": "api/OneImlx.Terminal.Hosting.CommandBuilder.html",
    "title": "Class CommandBuilder",
    "summary": "Class CommandBuilder Namespace OneImlx.Terminal.Hosting Assembly OneImlx.Terminal.dll The default ICommandBuilder. public sealed class CommandBuilder : ICommandBuilder Inheritance object CommandBuilder Implements ICommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ICommandBuilderExtensions.Checker<TChecker>(ICommandBuilder) ICommandBuilderExtensions.CustomProperty(ICommandBuilder, string, object) ICommandBuilderExtensions.DefineArgument(ICommandBuilder, int, string, string, string, ArgumentFlags) ICommandBuilderExtensions.DefineOption(ICommandBuilder, string, string, string, OptionFlags, string?) ICommandBuilderExtensions.Owners(ICommandBuilder, OwnerIdCollection) ICommandBuilderExtensions.Tags(ICommandBuilder, TagIdCollection) Constructors CommandBuilder(ITerminalBuilder) Initializes a new instance. public CommandBuilder(ITerminalBuilder terminalBuilder) Parameters terminalBuilder ITerminalBuilder The ITerminalBuilder. Properties Services The service collection. public IServiceCollection Services { get; } Property Value IServiceCollection Methods Add() Builds a CommandDescriptor and adds it to the service collection. public ITerminalBuilder Add() Returns ITerminalBuilder"
  },
  "api/OneImlx.Terminal.Hosting.IArgumentBuilder.html": {
    "href": "api/OneImlx.Terminal.Hosting.IArgumentBuilder.html",
    "title": "Interface IArgumentBuilder",
    "summary": "Interface IArgumentBuilder Namespace OneImlx.Terminal.Hosting Assembly OneImlx.Terminal.dll An abstraction of argument builder. public interface IArgumentBuilder Extension Methods IArgumentBuilderExtensions.ValidationAttribute(IArgumentBuilder, Type, params object[]?) IArgumentBuilderExtensions.ValidationAttribute<TValidation>(IArgumentBuilder, params object[]?) Properties Services The service collection. IServiceCollection Services { get; } Property Value IServiceCollection Methods Add() Builds a new ArgumentDescriptor and add it to the service collection. ICommandBuilder Add() Returns ICommandBuilder The configured ICommandBuilder."
  },
  "api/OneImlx.Terminal.Hosting.ICommandBuilder.html": {
    "href": "api/OneImlx.Terminal.Hosting.ICommandBuilder.html",
    "title": "Interface ICommandBuilder",
    "summary": "Interface ICommandBuilder Namespace OneImlx.Terminal.Hosting Assembly OneImlx.Terminal.dll An abstraction of command builder. public interface ICommandBuilder Extension Methods ICommandBuilderExtensions.Checker<TChecker>(ICommandBuilder) ICommandBuilderExtensions.CustomProperty(ICommandBuilder, string, object) ICommandBuilderExtensions.DefineArgument(ICommandBuilder, int, string, string, string, ArgumentFlags) ICommandBuilderExtensions.DefineOption(ICommandBuilder, string, string, string, OptionFlags, string?) ICommandBuilderExtensions.Owners(ICommandBuilder, OwnerIdCollection) ICommandBuilderExtensions.Tags(ICommandBuilder, TagIdCollection) Properties Services The service collection. IServiceCollection Services { get; } Property Value IServiceCollection Methods Add() Build a new CommandDescriptor and add it to the service collection. ITerminalBuilder Add() Returns ITerminalBuilder The configured ITerminalBuilder."
  },
  "api/OneImlx.Terminal.Hosting.IOptionBuilder.html": {
    "href": "api/OneImlx.Terminal.Hosting.IOptionBuilder.html",
    "title": "Interface IOptionBuilder",
    "summary": "Interface IOptionBuilder Namespace OneImlx.Terminal.Hosting Assembly OneImlx.Terminal.dll An abstraction of option builder. public interface IOptionBuilder Extension Methods IOptionBuilderExtensions.ValidationAttribute(IOptionBuilder, Type, params object[]?) IOptionBuilderExtensions.ValidationAttribute<TValidation>(IOptionBuilder, params object[]?) Properties Services The service collection. IServiceCollection Services { get; } Property Value IServiceCollection Methods Add() Builds a new OptionDescriptor and add it to the service collection. ICommandBuilder Add() Returns ICommandBuilder The configured ICommandBuilder."
  },
  "api/OneImlx.Terminal.Hosting.ITerminalBuilder.html": {
    "href": "api/OneImlx.Terminal.Hosting.ITerminalBuilder.html",
    "title": "Interface ITerminalBuilder",
    "summary": "Interface ITerminalBuilder Namespace OneImlx.Terminal.Hosting Assembly OneImlx.Terminal.dll An abstraction of service builder. public interface ITerminalBuilder Extension Methods ITerminalBuilderExtensions.AddArgumentChecker<TMapper, TChecker>(ITerminalBuilder) ITerminalBuilderExtensions.AddCommandParser<TCommand, TRequest>(ITerminalBuilder) ITerminalBuilderExtensions.AddCommandRouter<TRouter, THandler, TResolver>(ITerminalBuilder) ITerminalBuilderExtensions.AddCommandStore<TStore>(ITerminalBuilder) ITerminalBuilderExtensions.AddConfigurationOptions(ITerminalBuilder) ITerminalBuilderExtensions.AddConsole<TConsole>(ITerminalBuilder) ITerminalBuilderExtensions.AddDeclarativeAssembly(ITerminalBuilder, Assembly) ITerminalBuilderExtensions.AddDeclarativeAssembly(ITerminalBuilder, Type) ITerminalBuilderExtensions.AddDeclarativeAssembly<TType>(ITerminalBuilder) ITerminalBuilderExtensions.AddDeclarativeRunner<TDeclarativeRunner>(ITerminalBuilder) ITerminalBuilderExtensions.AddDynamics<TContext, TSource, TChecker, TLoader>(ITerminalBuilder) ITerminalBuilderExtensions.AddEventHandler<TEventHandler>(ITerminalBuilder) ITerminalBuilderExtensions.AddExceptionHandler<THandler>(ITerminalBuilder) ITerminalBuilderExtensions.AddHelpProvider<THelpProvider>(ITerminalBuilder) ITerminalBuilderExtensions.AddLicensing(ITerminalBuilder) ITerminalBuilderExtensions.AddOptionChecker<TMapper, TChecker>(ITerminalBuilder) ITerminalBuilderExtensions.AddProcessor<TTerminalProcessor>(ITerminalBuilder) ITerminalBuilderExtensions.AddTerminalRouterContext<TContext>(ITerminalBuilder, TContext) ITerminalBuilderExtensions.AddTerminalRouter<TRouter, TContext>(ITerminalBuilder) ITerminalBuilderExtensions.AddTextHandler<TTextHandler>(ITerminalBuilder, TTextHandler) ITerminalBuilderExtensions.DefineCommand<TRunner>(ITerminalBuilder, string, string, string, CommandType, CommandFlags) Properties Services The host service collection. IServiceCollection Services { get; } Property Value IServiceCollection TextHandler The text handler. ITerminalTextHandler TextHandler { get; } Property Value ITerminalTextHandler"
  },
  "api/OneImlx.Terminal.Hosting.OptionBuilder.html": {
    "href": "api/OneImlx.Terminal.Hosting.OptionBuilder.html",
    "title": "Class OptionBuilder",
    "summary": "Class OptionBuilder Namespace OneImlx.Terminal.Hosting Assembly OneImlx.Terminal.dll The default IOptionBuilder. public sealed class OptionBuilder : IOptionBuilder Inheritance object OptionBuilder Implements IOptionBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods IOptionBuilderExtensions.ValidationAttribute(IOptionBuilder, Type, params object[]?) IOptionBuilderExtensions.ValidationAttribute<TValidation>(IOptionBuilder, params object[]?) Constructors OptionBuilder(ICommandBuilder) Initializes a new instance. public OptionBuilder(ICommandBuilder commandBuilder) Parameters commandBuilder ICommandBuilder The ICommandBuilder. Properties Services The service collection. public IServiceCollection Services { get; } Property Value IServiceCollection Methods Add() Builds an OptionDescriptor and adds it to the service collection. public ICommandBuilder Add() Returns ICommandBuilder"
  },
  "api/OneImlx.Terminal.Hosting.TerminalBuilder.html": {
    "href": "api/OneImlx.Terminal.Hosting.TerminalBuilder.html",
    "title": "Class TerminalBuilder",
    "summary": "Class TerminalBuilder Namespace OneImlx.Terminal.Hosting Assembly OneImlx.Terminal.dll The default ITerminalBuilder. public sealed class TerminalBuilder : ITerminalBuilder Inheritance object TerminalBuilder Implements ITerminalBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ITerminalBuilderExtensions.AddArgumentChecker<TMapper, TChecker>(ITerminalBuilder) ITerminalBuilderExtensions.AddCommandParser<TCommand, TRequest>(ITerminalBuilder) ITerminalBuilderExtensions.AddCommandRouter<TRouter, THandler, TResolver>(ITerminalBuilder) ITerminalBuilderExtensions.AddCommandStore<TStore>(ITerminalBuilder) ITerminalBuilderExtensions.AddConfigurationOptions(ITerminalBuilder) ITerminalBuilderExtensions.AddConsole<TConsole>(ITerminalBuilder) ITerminalBuilderExtensions.AddDeclarativeAssembly(ITerminalBuilder, Assembly) ITerminalBuilderExtensions.AddDeclarativeAssembly(ITerminalBuilder, Type) ITerminalBuilderExtensions.AddDeclarativeAssembly<TType>(ITerminalBuilder) ITerminalBuilderExtensions.AddDeclarativeRunner<TDeclarativeRunner>(ITerminalBuilder) ITerminalBuilderExtensions.AddDynamics<TContext, TSource, TChecker, TLoader>(ITerminalBuilder) ITerminalBuilderExtensions.AddEventHandler<TEventHandler>(ITerminalBuilder) ITerminalBuilderExtensions.AddExceptionHandler<THandler>(ITerminalBuilder) ITerminalBuilderExtensions.AddHelpProvider<THelpProvider>(ITerminalBuilder) ITerminalBuilderExtensions.AddLicensing(ITerminalBuilder) ITerminalBuilderExtensions.AddOptionChecker<TMapper, TChecker>(ITerminalBuilder) ITerminalBuilderExtensions.AddProcessor<TTerminalProcessor>(ITerminalBuilder) ITerminalBuilderExtensions.AddTerminalRouterContext<TContext>(ITerminalBuilder, TContext) ITerminalBuilderExtensions.AddTerminalRouter<TRouter, TContext>(ITerminalBuilder) ITerminalBuilderExtensions.AddTextHandler<TTextHandler>(ITerminalBuilder, TTextHandler) ITerminalBuilderExtensions.DefineCommand<TRunner>(ITerminalBuilder, string, string, string, CommandType, CommandFlags) Constructors TerminalBuilder(IServiceCollection, ITerminalTextHandler) Initializes a new instance. public TerminalBuilder(IServiceCollection services, ITerminalTextHandler textHandler) Parameters services IServiceCollection The global service collection. textHandler ITerminalTextHandler The global text handler. Exceptions ArgumentNullException services Properties Services The global service collection. public IServiceCollection Services { get; } Property Value IServiceCollection TextHandler The text handler. public ITerminalTextHandler TextHandler { get; } Property Value ITerminalTextHandler"
  },
  "api/OneImlx.Terminal.Hosting.TerminalHostedService.html": {
    "href": "api/OneImlx.Terminal.Hosting.TerminalHostedService.html",
    "title": "Class TerminalHostedService",
    "summary": "Class TerminalHostedService Namespace OneImlx.Terminal.Hosting Assembly OneImlx.Terminal.dll The hosted service to manage the application lifetime and terminal customization. public abstract class TerminalHostedService : IHostedService Inheritance object TerminalHostedService Implements IHostedService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalHostedService(IServiceProvider, IOptions<TerminalOptions>, ITerminalConsole, ITerminalExceptionHandler, ILogger<TerminalHostedService>) Initializes a new instance. public TerminalHostedService(IServiceProvider serviceProvider, IOptions<TerminalOptions> terminalOptions, ITerminalConsole terminalConsole, ITerminalExceptionHandler terminalExceptionHandler, ILogger<TerminalHostedService> logger) Parameters serviceProvider IServiceProvider The service provider. terminalOptions IOptions<TerminalOptions> The configuration options. terminalConsole ITerminalConsole The terminal console. terminalExceptionHandler ITerminalExceptionHandler The exception handler. logger ILogger<TerminalHostedService> The logger. Properties Options The terminal configuration options. protected IOptions<TerminalOptions> Options { get; } Property Value IOptions<TerminalOptions> ServiceProvider The service provider. protected IServiceProvider ServiceProvider { get; } Property Value IServiceProvider TerminalConsole The terminal console. protected ITerminalConsole TerminalConsole { get; } Property Value ITerminalConsole Methods ConfigureLifetimeAsync() Configures the application's lifetime with IHostApplicationLifetime. protected abstract Task ConfigureLifetimeAsync() Returns Task StartAsync(CancellationToken) Starts the hosted service asynchronously. public Task StartAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The cancellation token. Returns Task StopAsync(CancellationToken) Stops the hosted service asynchronously. public Task StopAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The cancellation token. Returns Task"
  },
  "api/OneImlx.Terminal.Hosting.html": {
    "href": "api/OneImlx.Terminal.Hosting.html",
    "title": "Namespace OneImlx.Terminal.Hosting",
    "summary": "Namespace OneImlx.Terminal.Hosting Classes ArgumentBuilder The default IArgumentBuilder. CommandBuilder The default ICommandBuilder. OptionBuilder The default IOptionBuilder. TerminalBuilder The default ITerminalBuilder. TerminalHostedService The hosted service to manage the application lifetime and terminal customization. Interfaces IArgumentBuilder An abstraction of argument builder. ICommandBuilder An abstraction of command builder. IOptionBuilder An abstraction of option builder. ITerminalBuilder An abstraction of service builder."
  },
  "api/OneImlx.Terminal.Licensing.ILicenseChecker.html": {
    "href": "api/OneImlx.Terminal.Licensing.ILicenseChecker.html",
    "title": "Interface ILicenseChecker",
    "summary": "Interface ILicenseChecker Namespace OneImlx.Terminal.Licensing Assembly OneImlx.Terminal.dll An abstraction to check the License object. public interface ILicenseChecker Methods CheckLicenseAsync(License) Checks License asynchronously. Task<LicenseCheckerResult> CheckLicenseAsync(License license) Parameters license License The license to check. Returns Task<LicenseCheckerResult> The LicenseCheckerResult instance."
  },
  "api/OneImlx.Terminal.Licensing.ILicenseDebugger.html": {
    "href": "api/OneImlx.Terminal.Licensing.ILicenseDebugger.html",
    "title": "Interface ILicenseDebugger",
    "summary": "Interface ILicenseDebugger Namespace OneImlx.Terminal.Licensing Assembly OneImlx.Terminal.dll An abstraction of a license debugger. public interface ILicenseDebugger Methods IsDebuggerAttached() Determines if the debugger is attached. bool IsDebuggerAttached() Returns bool"
  },
  "api/OneImlx.Terminal.Licensing.ILicenseExtractor.html": {
    "href": "api/OneImlx.Terminal.Licensing.ILicenseExtractor.html",
    "title": "Interface ILicenseExtractor",
    "summary": "Interface ILicenseExtractor Namespace OneImlx.Terminal.Licensing Assembly OneImlx.Terminal.dll An abstraction to extract the software License. public interface ILicenseExtractor Methods ExtractLicenseAsync() Extracts the License asynchronously. Task<LicenseExtractorResult> ExtractLicenseAsync() Returns Task<LicenseExtractorResult> GetLicenseAsync() Gets the extracted license asynchronously. Task<License?> GetLicenseAsync() Returns Task<License>"
  },
  "api/OneImlx.Terminal.Licensing.License.html": {
    "href": "api/OneImlx.Terminal.Licensing.License.html",
    "title": "Class License",
    "summary": "Class License Namespace OneImlx.Terminal.Licensing Assembly OneImlx.Terminal.dll A terminal framework license. public sealed class License : License, IDisposable Inheritance object License License Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors License(string, string, string, LicenseClaims, LicenseQuota) Initialize a new instance. public License(string plan, string usage, string licenseKey, LicenseClaims claims, LicenseQuota quota) Parameters plan string The license plan. usage string The license usage. licenseKey string The license key. claims LicenseClaims The license claims. quota LicenseQuota The license quota. Properties Claims The license claims. public LicenseClaims Claims { get; } Property Value LicenseClaims Failed Indicates whether the license is in a failed state. public Error? Failed { get; } Property Value Error LicenseKey The license key. public override string LicenseKey { get; } Property Value string Plan The license plan. public string Plan { get; } Property Value string Quota The license quota. public LicenseQuota Quota { get; } Property Value LicenseQuota Usage The license usage. public string Usage { get; } Property Value string Methods Dispose() Disposes the license. public override void Dispose() SetFailed(Error) Sets the license to failed state with an error. public void SetFailed(Error error) Parameters error Error"
  },
  "api/OneImlx.Terminal.Licensing.LicenseChecker.html": {
    "href": "api/OneImlx.Terminal.Licensing.LicenseChecker.html",
    "title": "Class LicenseChecker",
    "summary": "Class LicenseChecker Namespace OneImlx.Terminal.Licensing Assembly OneImlx.Terminal.dll The default ILicenseChecker for all features. public sealed class LicenseChecker : ILicenseChecker Inheritance object LicenseChecker Implements ILicenseChecker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors LicenseChecker(ITerminalCommandStore, ITerminalTextHandler, TerminalOptions, ILogger<LicenseChecker>) Initializes a new instance. public LicenseChecker(ITerminalCommandStore commandStore, ITerminalTextHandler textHandler, TerminalOptions terminalOptions, ILogger<LicenseChecker> logger) Parameters commandStore ITerminalCommandStore textHandler ITerminalTextHandler terminalOptions TerminalOptions logger ILogger<LicenseChecker> Properties Initialized Determines whether the checker is initialized. public bool Initialized { get; } Property Value bool Methods CheckLicenseAsync(License) Checks License asynchronously. public Task<LicenseCheckerResult> CheckLicenseAsync(License license) Parameters license License The license to check. Returns Task<LicenseCheckerResult> The LicenseCheckerResult instance."
  },
  "api/OneImlx.Terminal.Licensing.LicenseCheckerResult.html": {
    "href": "api/OneImlx.Terminal.Licensing.LicenseCheckerResult.html",
    "title": "Class LicenseCheckerResult",
    "summary": "Class LicenseCheckerResult Namespace OneImlx.Terminal.Licensing Assembly OneImlx.Terminal.dll The default ILicenseChecker result. public sealed class LicenseCheckerResult Inheritance object LicenseCheckerResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors LicenseCheckerResult(License) Initializes a new instance. public LicenseCheckerResult(License license) Parameters license License The checked license. Properties CommandCount The command count. public long CommandCount { get; set; } Property Value long InputCount The input (argument and option) count. public long InputCount { get; set; } Property Value long License The valid license. public License License { get; } Property Value License TerminalCount The terminal count. public long TerminalCount { get; set; } Property Value long"
  },
  "api/OneImlx.Terminal.Licensing.LicenseDebugger.html": {
    "href": "api/OneImlx.Terminal.Licensing.LicenseDebugger.html",
    "title": "Class LicenseDebugger",
    "summary": "Class LicenseDebugger Namespace OneImlx.Terminal.Licensing Assembly OneImlx.Terminal.dll The default ILicenseDebugger that uses Debugger. public sealed class LicenseDebugger : ILicenseDebugger Inheritance object LicenseDebugger Implements ILicenseDebugger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors LicenseDebugger(ILogger<LicenseDebugger>) Initialize a new instance. public LicenseDebugger(ILogger<LicenseDebugger> logger) Parameters logger ILogger<LicenseDebugger> Methods IsDebuggerAttached() Returns IsAttached value. public bool IsDebuggerAttached() Returns bool"
  },
  "api/OneImlx.Terminal.Licensing.LicenseExtractor.html": {
    "href": "api/OneImlx.Terminal.Licensing.LicenseExtractor.html",
    "title": "Class LicenseExtractor",
    "summary": "Class LicenseExtractor Namespace OneImlx.Terminal.Licensing Assembly OneImlx.Terminal.dll The default ILicenseExtractor public sealed class LicenseExtractor : ILicenseExtractor Inheritance object LicenseExtractor Implements ILicenseExtractor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors LicenseExtractor(ILicenseDebugger, TerminalOptions, ILogger<LicenseExtractor>) Initialize a new instance. public LicenseExtractor(ILicenseDebugger licenseDebugger, TerminalOptions terminalOptions, ILogger<LicenseExtractor> logger) Parameters licenseDebugger ILicenseDebugger The license debugger. terminalOptions TerminalOptions The configuration options. logger ILogger<LicenseExtractor> The logger. Methods ExtractLicenseAsync() Extracts the License from the license keys. public Task<LicenseExtractorResult> ExtractLicenseAsync() Returns Task<LicenseExtractorResult> GetLicenseAsync() Gets the extracted license asynchronously. public Task<License?> GetLicenseAsync() Returns Task<License>"
  },
  "api/OneImlx.Terminal.Licensing.LicenseExtractorResult.html": {
    "href": "api/OneImlx.Terminal.Licensing.LicenseExtractorResult.html",
    "title": "Class LicenseExtractorResult",
    "summary": "Class LicenseExtractorResult Namespace OneImlx.Terminal.Licensing Assembly OneImlx.Terminal.dll The default ILicenseChecker result. public sealed class LicenseExtractorResult Inheritance object LicenseExtractorResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors LicenseExtractorResult(License, string?) Initializes a new instance. public LicenseExtractorResult(License license, string? extractionMode) Parameters license License The extracted license. extractionMode string Properties ExtractionMode The license mode used for extraction. public string? ExtractionMode { get; } Property Value string License The valid licenses. public License License { get; } Property Value License"
  },
  "api/OneImlx.Terminal.Licensing.LicenseQuota.html": {
    "href": "api/OneImlx.Terminal.Licensing.LicenseQuota.html",
    "title": "Class LicenseQuota",
    "summary": "Class LicenseQuota Namespace OneImlx.Terminal.Licensing Assembly OneImlx.Terminal.dll Defines the licensing quota based on the TerminalLicensePlans. public sealed class LicenseQuota Inheritance object LicenseQuota Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Authentications The authentication methods. public IReadOnlyList<string> Authentications { get; } Property Value IReadOnlyList<string> CommandLimit The maximum commands. Returns null for no limit. public int? CommandLimit { get; } Property Value int? DataType The strict date type. Returns false if not supported. public bool DataType { get; } Property Value bool Deployments The deployment methods. public IReadOnlyList<string> Deployments { get; } Property Value IReadOnlyList<string> Driver The terminal driver mode. Returns false if not supported. public bool Driver { get; } Property Value bool Dynamics The terminal dynamics command mode. Defaults to false or not supported. public bool Dynamics { get; } Property Value bool Encodings The text encoding. public IReadOnlyList<string> Encodings { get; } Property Value IReadOnlyList<string> Features The licensed features. public IReadOnlyDictionary<string, string[]> Features { get; } Property Value IReadOnlyDictionary<string, string[]> InputLimit The maximum arguments and options combined.Returns null for no limit. public int? InputLimit { get; } Property Value int? Limits The maximum quota. Defaults to null or no limit. public IReadOnlyDictionary<string, object?> Limits { get; } Property Value IReadOnlyDictionary<string, object> Plan The license plan. public string? Plan { get; } Property Value string RedistributionLimit The maximum redistributions. Defaults to null or no redistribution limit. public long? RedistributionLimit { get; } Property Value long? Routers The terminal routing methods. public IReadOnlyList<string> Routers { get; } Property Value IReadOnlyList<string> Stores The terminal command stores. public IReadOnlyList<string> Stores { get; } Property Value IReadOnlyList<string> Switches The licensed switches. public IReadOnlyDictionary<string, bool> Switches { get; } Property Value IReadOnlyDictionary<string, bool> TerminalLimit The maximum terminals. Defaults to null or no limit. public int? TerminalLimit { get; } Property Value int? Methods Create(string, IDictionary<string, object>?) Creates a new instance of LicenseQuota based on the specified SaaS plan. public static LicenseQuota Create(string licensePlan, IDictionary<string, object>? customClaims = null) Parameters licensePlan string The license plan. customClaims IDictionary<string, object> The custom claims. Only used if SaaS plan is custom. Returns LicenseQuota"
  },
  "api/OneImlx.Terminal.Licensing.html": {
    "href": "api/OneImlx.Terminal.Licensing.html",
    "title": "Namespace OneImlx.Terminal.Licensing",
    "summary": "Namespace OneImlx.Terminal.Licensing Classes License A terminal framework license. LicenseChecker The default ILicenseChecker for all features. LicenseCheckerResult The default ILicenseChecker result. LicenseDebugger The default ILicenseDebugger that uses Debugger. LicenseExtractor The default ILicenseExtractor LicenseExtractorResult The default ILicenseChecker result. LicenseQuota Defines the licensing quota based on the TerminalLicensePlans. Interfaces ILicenseChecker An abstraction to check the License object. ILicenseDebugger An abstraction of a license debugger. ILicenseExtractor An abstraction to extract the software License."
  },
  "api/OneImlx.Terminal.Runtime.ITerminalConsole.html": {
    "href": "api/OneImlx.Terminal.Runtime.ITerminalConsole.html",
    "title": "Interface ITerminalConsole",
    "summary": "Interface ITerminalConsole Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll An abstraction of a console for terminal framework. public interface ITerminalConsole Remarks ITerminalConsole allows application to define a standard or a custom console environment. Properties BackgroundColor The background color of the ITerminalConsole. ConsoleColor BackgroundColor { get; set; } Property Value ConsoleColor ForegroundColor The foreground color of the ITerminalConsole. ConsoleColor ForegroundColor { get; set; } Property Value ConsoleColor Methods ClearAsync() Clears the ITerminalConsole buffer and the corresponding display information. Task ClearAsync() Returns Task Ignore(string?) Return true if the specified string value is ignored by the ITerminalConsole, otherwise false. bool Ignore(string? value) Parameters value string The value to check. Returns bool ReadAnswerAsync(string, params string[]?) Prints the question to the ITerminalConsole standard output stream and waits for an answer asynchronously. Task<string> ReadAnswerAsync(string question, params string[]? answers) Parameters question string The question to print. answers string[] The optional allowed answers. Returns Task<string> The answer to the question. ReadLineAsync() Reads the next line of characters from the ITerminalConsole input stream asynchronously. Task<string?> ReadLineAsync() Returns Task<string> The next line of characters from the input stream, or null if no more lines are available. WriteAsync(string, params object[]) Writes the specified string value to the ITerminalConsole standard output stream. Task WriteAsync(string value, params object[] args) Parameters value string The text to write. args object[] The format arguments. Returns Task WriteColorAsync(ConsoleColor, string, params object[]) Writes the specified string value in the foreground color to the ITerminalConsole standard output stream. Task WriteColorAsync(ConsoleColor foregroundColor, string value, params object[] args) Parameters foregroundColor ConsoleColor The foreground text color. value string The text to write. args object[] The format arguments. Returns Task WriteLineAsync() Writes the current newline terminator to the ITerminalConsole standard output stream asynchronously. Task WriteLineAsync() Returns Task WriteLineAsync(string, params object[]) Writes the specified string value followed by the current newline terminator to the ITerminalConsole standard output stream. Task WriteLineAsync(string value, params object[] args) Parameters value string The text to write. args object[] The format arguments. Returns Task WriteLineColorAsync(ConsoleColor, string, params object[]) Writes the specified string value in the foreground color followed by the current newline terminator to the ITerminalConsole standard output stream. Task WriteLineColorAsync(ConsoleColor foregroundColor, string value, params object[] args) Parameters foregroundColor ConsoleColor The foreground text color. value string The text to write. args object[] The format arguments. Returns Task See Also TerminalSystemConsole"
  },
  "api/OneImlx.Terminal.Runtime.ITerminalExceptionHandler.html": {
    "href": "api/OneImlx.Terminal.Runtime.ITerminalExceptionHandler.html",
    "title": "Interface ITerminalExceptionHandler",
    "summary": "Interface ITerminalExceptionHandler Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll An abstraction to handle Exception. public interface ITerminalExceptionHandler Methods HandleExceptionAsync(TerminalExceptionHandlerContext) Handles Exception asynchronously. Task HandleExceptionAsync(TerminalExceptionHandlerContext context) Parameters context TerminalExceptionHandlerContext The exception context. Returns Task"
  },
  "api/OneImlx.Terminal.Runtime.ITerminalHelpProvider.html": {
    "href": "api/OneImlx.Terminal.Runtime.ITerminalHelpProvider.html",
    "title": "Interface ITerminalHelpProvider",
    "summary": "Interface ITerminalHelpProvider Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll An abstraction to provide help for commands. public interface ITerminalHelpProvider Remarks Use ITerminalHelpProvider to provide a common implementation for all your commands. To provide help for each command individually override ICommandRunner<TResult>. Methods ProvideHelpAsync(TerminalHelpProviderContext) Provides help asynchronously. Task ProvideHelpAsync(TerminalHelpProviderContext context) Parameters context TerminalHelpProviderContext Returns Task See Also IDelegateCommandRunner ICommandRunner<TResult> CommandRunner<TResult>"
  },
  "api/OneImlx.Terminal.Runtime.ITerminalProcessor.html": {
    "href": "api/OneImlx.Terminal.Runtime.ITerminalProcessor.html",
    "title": "Interface ITerminalProcessor",
    "summary": "Interface ITerminalProcessor Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll An abstraction for processing the TerminalInputOutput individually or in batches, with optional asynchronous handling of responses in the background. public interface ITerminalProcessor : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Remarks The ITerminalProcessor supports processing inputs, executing commands with responses, and managing streaming workflows efficiently in background tasks. Properties IsBackground Gets a value indicating whether the processor is running in the background. bool IsBackground { get; } Property Value bool IsProcessing Gets a value indicating whether the processor is actively handling requests. bool IsProcessing { get; } Property Value bool UnprocessedIOs Retrieves a snapshot of inputs that are pending processing. IReadOnlyCollection<TerminalInputOutput> UnprocessedIOs { get; } Property Value IReadOnlyCollection<TerminalInputOutput> Remarks The returned collection represents the state of unprocessed inputs at the time of retrieval. The actual state may change by the time the caller processes it. Methods AddAsync(TerminalInputOutput) Asynchronously adds a TerminalInputOutput for processing. Task AddAsync(TerminalInputOutput terminalIO) Parameters terminalIO TerminalInputOutput The input to add. Returns Task A task representing the asynchronous operation. ExecuteAsync(TerminalInputOutput) Asynchronously executes the input and populates the output. Task ExecuteAsync(TerminalInputOutput terminalIO) Parameters terminalIO TerminalInputOutput The input to execute. Returns Task Remarks The ExecuteAsync(TerminalInputOutput) method processes the input immediately and returns the output. For background processing, use AddAsync(TerminalInputOutput). StartProcessing(TerminalRouterContext, bool, Func<TerminalInputOutput, Task>?) Starts processing terminal inputs with the specified context and configuration. void StartProcessing(TerminalRouterContext terminalRouterContext, bool background, Func<TerminalInputOutput, Task>? responseHandler = null) Parameters terminalRouterContext TerminalRouterContext The context for the terminal router. background bool If true, the processor operates in the background, handling multiple requests asynchronously. If false, it processes individual requests and sends responses asynchronously. responseHandler Func<TerminalInputOutput, Task> An optional handler for processing responses. StopProcessingAsync(int) Attempts to stop background processing within a specified timeout period. Task<bool> StopProcessingAsync(int timeout) Parameters timeout int The timeout duration in milliseconds. Returns Task<bool> A task representing the asynchronous operation, returning true if processing stopped within the timeout; otherwise, false. StreamAsync(byte[], int, string, string?) Asynchronously streams a continuous flow of TerminalInputOutput as a byte array. Task StreamAsync(byte[] bytes, int bytesLength, string senderId, string? senderEndpoint) Parameters bytes byte[] The data to stream. bytesLength int The length of the data to process. Use the total length to process all bytes. senderId string The identifier of the sender. senderEndpoint string An optional endpoint of the sender. Returns Task Remarks The StreamAsync(byte[], int, string, string?) method is optimized for handling continuous streams of data. The bytesLength parameter specifies the portion of the input to process, avoiding unnecessary duplication of data. WaitUntilCanceledAsync(CancellationToken) Initiates a task that delays indefinitely until cancellation is requested. Task WaitUntilCanceledAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The cancellation token to trigger termination. Returns Task"
  },
  "api/OneImlx.Terminal.Runtime.ITerminalRequestParser.html": {
    "href": "api/OneImlx.Terminal.Runtime.ITerminalRequestParser.html",
    "title": "Interface ITerminalRequestParser",
    "summary": "Interface ITerminalRequestParser Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll An abstraction to parse a TerminalRequest. public interface ITerminalRequestParser Methods ParseRequestAsync(TerminalRequest) Parses the terminal request asynchronously. Task<TerminalParsedRequest> ParseRequestAsync(TerminalRequest request) Parameters request TerminalRequest The terminal request to parse. Returns Task<TerminalParsedRequest>"
  },
  "api/OneImlx.Terminal.Runtime.ITerminalRouter-1.html": {
    "href": "api/OneImlx.Terminal.Runtime.ITerminalRouter-1.html",
    "title": "Interface ITerminalRouter<TContext>",
    "summary": "Interface ITerminalRouter<TContext> Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll An abstraction of a context aware terminal router. public interface ITerminalRouter<TContext> where TContext : TerminalRouterContext Type Parameters TContext Remarks This terminal router runs indefinitely until it receives a cancellation request or when the application stops. It is responsible for receiving commands and routing them to the appropriate command routers based on the context. The operation is asynchronous, continuously handling incoming commands and delegating them as long as the router is running. Properties IsRunning Gets a value indicating whether the terminal router is running. bool IsRunning { get; } Property Value bool Name The terminal router name. string Name { get; } Property Value string Remarks The Name property is used for licensing checks and should match Name. Methods RunAsync(TContext) Runs terminal router asynchronously. Task RunAsync(TContext context) Parameters context TContext The terminal router context. Returns Task"
  },
  "api/OneImlx.Terminal.Runtime.ITerminalTextHandler.html": {
    "href": "api/OneImlx.Terminal.Runtime.ITerminalTextHandler.html",
    "title": "Interface ITerminalTextHandler",
    "summary": "Interface ITerminalTextHandler Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll An abstraction of a terminal text handler. public interface ITerminalTextHandler Properties Comparison Gets the StringComparison value to compare the two strings. StringComparison Comparison { get; } Property Value StringComparison Encoding Gets the text Encoding. Encoding Encoding { get; } Property Value Encoding Methods CharEquals(char?, char?) Determines whether the two characters are equal using Comparison. bool CharEquals(char? ch1, char? ch2) Parameters ch1 char? The first char to compare. ch2 char? The second char to compare. Returns bool true if the characters are equal, false otherwise. EqualityComparer() Returns the equality comparer. IEqualityComparer<string> EqualityComparer() Returns IEqualityComparer<string> SingleEquals(char?, string?) Determines whether a characters and text are equal using Comparison. bool SingleEquals(char? ch1, string? s2) Parameters ch1 char? The first char to compare. s2 string The second text to compare. Returns bool true if the texts are equal, false otherwise. TextEquals(string?, string?) Determines whether the two texts are equal using Comparison. bool TextEquals(string? s1, string? s2) Parameters s1 string The first text to compare. s2 string The second text to compare. Returns bool true if the texts are equal, false otherwise. TextLength(string?) Returns the text length. int TextLength(string? s1) Parameters s1 string Returns int"
  },
  "api/OneImlx.Terminal.Runtime.Terminal.html": {
    "href": "api/OneImlx.Terminal.Runtime.Terminal.html",
    "title": "Class Terminal",
    "summary": "Class Terminal Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll Terminals, also known as command lines, consoles, or CLI applications, allow organizations and users to accomplish and automate tasks on a computer without using a graphical user interface. If a CLI terminal supports user interaction, the UX is the terminal. public sealed class Terminal Inheritance object Terminal Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Terminal(string) Initializes a new instance. public Terminal(string id) Parameters id string The terminal identifier. Properties Id The terminal identifier. public string Id { get; } Property Value string"
  },
  "api/OneImlx.Terminal.Runtime.TerminalConsoleExceptionHandler.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalConsoleExceptionHandler.html",
    "title": "Class TerminalConsoleExceptionHandler",
    "summary": "Class TerminalConsoleExceptionHandler Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The default ITerminalExceptionHandler to handle an Exception and log the error message to ITerminalConsole. public sealed class TerminalConsoleExceptionHandler : ITerminalExceptionHandler Inheritance object TerminalConsoleExceptionHandler Implements ITerminalExceptionHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalConsoleExceptionHandler(ITerminalConsole) Initialize a new instance. public TerminalConsoleExceptionHandler(ITerminalConsole terminalConsole) Parameters terminalConsole ITerminalConsole Methods HandleExceptionAsync(TerminalExceptionHandlerContext) Publish the Exception asynchronously to the logger. public Task HandleExceptionAsync(TerminalExceptionHandlerContext context) Parameters context TerminalExceptionHandlerContext The error to publish. Returns Task The string representation."
  },
  "api/OneImlx.Terminal.Runtime.TerminalConsoleHelpProvider.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalConsoleHelpProvider.html",
    "title": "Class TerminalConsoleHelpProvider",
    "summary": "Class TerminalConsoleHelpProvider Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The default ITerminalHelpProvider that logs the command help using ITerminalConsole. public sealed class TerminalConsoleHelpProvider : ITerminalHelpProvider Inheritance object TerminalConsoleHelpProvider Implements ITerminalHelpProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalConsoleHelpProvider(TerminalOptions, ITerminalConsole) Initializes new instance. public TerminalConsoleHelpProvider(TerminalOptions terminalOptions, ITerminalConsole terminalConsole) Parameters terminalOptions TerminalOptions terminalConsole ITerminalConsole Methods ProvideHelpAsync(TerminalHelpProviderContext) Provides help asynchronously. public Task ProvideHelpAsync(TerminalHelpProviderContext context) Parameters context TerminalHelpProviderContext Returns Task"
  },
  "api/OneImlx.Terminal.Runtime.TerminalConsoleRouter.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalConsoleRouter.html",
    "title": "Class TerminalConsoleRouter",
    "summary": "Class TerminalConsoleRouter Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The default ITerminalRouter<TContext> for console based terminals. public sealed class TerminalConsoleRouter : ITerminalRouter<TerminalConsoleRouterContext> Inheritance object TerminalConsoleRouter Implements ITerminalRouter<TerminalConsoleRouterContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalConsoleRouter(ITerminalConsole, ICommandRouter, ITerminalExceptionHandler, TerminalOptions, ILogger<TerminalConsoleRouter>) Initialize a new TerminalConsoleRouter instance. public TerminalConsoleRouter(ITerminalConsole terminalConsole, ICommandRouter commandRouter, ITerminalExceptionHandler exceptionHandler, TerminalOptions options, ILogger<TerminalConsoleRouter> logger) Parameters terminalConsole ITerminalConsole The terminal console. commandRouter ICommandRouter The command router. exceptionHandler ITerminalExceptionHandler The exception handler. options TerminalOptions The configuration options. logger ILogger<TerminalConsoleRouter> The logger. Properties IsRunning Gets a value indicating whether the console terminal is running. public bool IsRunning { get; } Property Value bool Name The terminal router name. public string Name { get; } Property Value string Methods RunAsync(TerminalConsoleRouterContext) Runs to the terminal as a console asynchronously. public Task RunAsync(TerminalConsoleRouterContext context) Parameters context TerminalConsoleRouterContext The routing service context. Returns Task"
  },
  "api/OneImlx.Terminal.Runtime.TerminalConsoleRouterContext.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalConsoleRouterContext.html",
    "title": "Class TerminalConsoleRouterContext",
    "summary": "Class TerminalConsoleRouterContext Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The TerminalRouterContext for TerminalConsoleRouter. public sealed class TerminalConsoleRouterContext : TerminalRouterContext Inheritance object TerminalRouterContext TerminalConsoleRouterContext Inherited Members TerminalRouterContext.Arguments TerminalRouterContext.CustomProperties TerminalRouterContext.StartMode TerminalRouterContext.TerminalCancellationToken object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalConsoleRouterContext(TerminalStartMode, bool?, Dictionary<string, object>?, string[]?) Initializes a new instance of TerminalConsoleRouterContext. public TerminalConsoleRouterContext(TerminalStartMode startMode, bool? routeOnce = null, Dictionary<string, object>? customProperties = null, string[]? arguments = null) Parameters startMode TerminalStartMode The terminal start mode. routeOnce bool? Determines whether the router will route the request only once. customProperties Dictionary<string, object> The custom properties. arguments string[] The command line arguments. Properties RouteOnce Determines whether the router will route the request only once. When RouteOnce is set to true, the terminal router processes a single incoming request, executes the corresponding command, and then cancels further routing operations. public bool? RouteOnce { get; } Property Value bool? Remarks The route-once behavior is useful for scenarios like command-line tools or driver terminal programs where only one execution cycle is required. For example, in a .NET CLI, a command such as dotnet build runs once per invocation when executed from an existing terminal. Similarly, setting RouteOnce to true ensures the router processes one command, completes its task, and exits cleanly. If set to false (or left unset), the router continues processing incoming requests until explicitly canceled or terminated."
  },
  "api/OneImlx.Terminal.Runtime.TerminalCustomRouter.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalCustomRouter.html",
    "title": "Class TerminalCustomRouter",
    "summary": "Class TerminalCustomRouter Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The default ITerminalRouter<TContext> for custom routing. public abstract class TerminalCustomRouter : ITerminalRouter<TerminalCustomRouterContext> Inheritance object TerminalCustomRouter Implements ITerminalRouter<TerminalCustomRouterContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsRunning Gets a value indicating whether the console terminal is running. public abstract bool IsRunning { get; } Property Value bool Name The terminal router name. public abstract string Name { get; } Property Value string Methods RunAsync(TerminalCustomRouterContext) Routes to a custom service implementation. public abstract Task RunAsync(TerminalCustomRouterContext context) Parameters context TerminalCustomRouterContext The custom routing service context. Returns Task"
  },
  "api/OneImlx.Terminal.Runtime.TerminalCustomRouterContext.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalCustomRouterContext.html",
    "title": "Class TerminalCustomRouterContext",
    "summary": "Class TerminalCustomRouterContext Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The TerminalRouterContext for TerminalCustomRouter. public abstract class TerminalCustomRouterContext : TerminalRouterContext Inheritance object TerminalRouterContext TerminalCustomRouterContext Inherited Members TerminalRouterContext.Arguments TerminalRouterContext.CustomProperties TerminalRouterContext.StartMode TerminalRouterContext.TerminalCancellationToken object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalCustomRouterContext(TerminalStartMode, Dictionary<string, object>?, string[]?) Initializes a new TerminalRouterContext instance. protected TerminalCustomRouterContext(TerminalStartMode startMode, Dictionary<string, object>? customProperties = null, string[]? arguments = null) Parameters startMode TerminalStartMode The terminal start mode. customProperties Dictionary<string, object> The custom properties. arguments string[] The command line arguments."
  },
  "api/OneImlx.Terminal.Runtime.TerminalExceptionHandlerContext.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalExceptionHandlerContext.html",
    "title": "Class TerminalExceptionHandlerContext",
    "summary": "Class TerminalExceptionHandlerContext Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The ITerminalExceptionHandler context. public class TerminalExceptionHandlerContext Inheritance object TerminalExceptionHandlerContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalExceptionHandlerContext(Exception, TerminalRequest?) Initialize a new instance. public TerminalExceptionHandlerContext(Exception exception, TerminalRequest? request = null) Parameters exception Exception The exception. request TerminalRequest The command request. Properties Exception The exception. public Exception Exception { get; } Property Value Exception Request The command request. public TerminalRequest? Request { get; } Property Value TerminalRequest"
  },
  "api/OneImlx.Terminal.Runtime.TerminalGrpcRouter.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalGrpcRouter.html",
    "title": "Class TerminalGrpcRouter",
    "summary": "Class TerminalGrpcRouter Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll Represents the gRPC router responsible for managing gRPC communication in the terminal. This router handles incoming gRPC commands and routes them to the appropriate command runners. public class TerminalGrpcRouter : ITerminalRouter<TerminalGrpcRouterContext> Inheritance object TerminalGrpcRouter Implements ITerminalRouter<TerminalGrpcRouterContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalGrpcRouter(ITerminalProcessor, IOptions<TerminalOptions>, ILogger<TerminalGrpcRouter>) Initializes a new instance of the TerminalGrpcRouter class. public TerminalGrpcRouter(ITerminalProcessor terminalProcessor, IOptions<TerminalOptions> options, ILogger<TerminalGrpcRouter> logger) Parameters terminalProcessor ITerminalProcessor The terminal router queue. options IOptions<TerminalOptions> The options configuration for the terminal router. logger ILogger<TerminalGrpcRouter> The logger instance for logging router events and errors. Properties IsRunning Gets a value indicating whether the TerminalGrpcRouter is running. public bool IsRunning { get; protected set; } Property Value bool Name The terminal router name. public string Name { get; } Property Value string Methods RunAsync(TerminalGrpcRouterContext) Runs the gRPC server asynchronously and begins handling client requests indefinitely. The server will continue running until a cancellation is requested via the context. public Task RunAsync(TerminalGrpcRouterContext context) Parameters context TerminalGrpcRouterContext The terminal context containing configuration and cancellation token. Returns Task A task that represents the asynchronous operation of running the server. Exceptions TerminalException Thrown when the start mode is not configured for gRPC."
  },
  "api/OneImlx.Terminal.Runtime.TerminalGrpcRouterContext.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalGrpcRouterContext.html",
    "title": "Class TerminalGrpcRouterContext",
    "summary": "Class TerminalGrpcRouterContext Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll Represents the context for configuring and managing the gRPC router in the terminal. public class TerminalGrpcRouterContext : TerminalRouterContext Inheritance object TerminalRouterContext TerminalGrpcRouterContext Inherited Members TerminalRouterContext.Arguments TerminalRouterContext.CustomProperties TerminalRouterContext.StartMode TerminalRouterContext.TerminalCancellationToken object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This context is used to configure all gRPC server settings including server credentials, host address, and port. All necessary services for the gRPC server are added through this context. Constructors TerminalGrpcRouterContext(TerminalStartMode, Dictionary<string, object>?, string[]?) Initializes a new instance of the TerminalGrpcRouterContext class. public TerminalGrpcRouterContext(TerminalStartMode startMode, Dictionary<string, object>? customProperties = null, string[]? arguments = null) Parameters startMode TerminalStartMode The terminal start mode. customProperties Dictionary<string, object> The custom properties. arguments string[] The command line arguments."
  },
  "api/OneImlx.Terminal.Runtime.TerminalHelpProviderContext.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalHelpProviderContext.html",
    "title": "Class TerminalHelpProviderContext",
    "summary": "Class TerminalHelpProviderContext Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The ITerminalHelpProvider context. public sealed class TerminalHelpProviderContext Inheritance object TerminalHelpProviderContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalHelpProviderContext(Command) Initialize a new instance. public TerminalHelpProviderContext(Command command) Parameters command Command The command descriptor. Properties Command The command descriptor. public Command Command { get; set; } Property Value Command"
  },
  "api/OneImlx.Terminal.Runtime.TerminalHttpRouter.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalHttpRouter.html",
    "title": "Class TerminalHttpRouter",
    "summary": "Class TerminalHttpRouter Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll Represents the HTTP router responsible for managing HTTP communication in the terminal. This router handles incoming HTTP commands and routes them to the appropriate command runners. public class TerminalHttpRouter : ITerminalRouter<TerminalHttpRouterContext> Inheritance object TerminalHttpRouter Implements ITerminalRouter<TerminalHttpRouterContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalHttpRouter(ICommandRouter, ITerminalExceptionHandler, ITerminalProcessor, IOptions<TerminalOptions>, ILogger<TerminalHttpRouter>) Initializes a new instance of the TerminalHttpRouter class. public TerminalHttpRouter(ICommandRouter commandRouter, ITerminalExceptionHandler exceptionHandler, ITerminalProcessor terminalProcessor, IOptions<TerminalOptions> options, ILogger<TerminalHttpRouter> logger) Parameters commandRouter ICommandRouter The command router for routing commands to specific handlers. exceptionHandler ITerminalExceptionHandler The exception handler for handling errors that occur during command routing. terminalProcessor ITerminalProcessor The terminal processing queue. options IOptions<TerminalOptions> The options configuration for the terminal router. logger ILogger<TerminalHttpRouter> The logger instance for logging router events and errors. Properties IsRunning Gets a value indicating whether the TerminalHttpRouter is running. public bool IsRunning { get; protected set; } Property Value bool Name The terminal router name. public string Name { get; } Property Value string Methods RunAsync(TerminalHttpRouterContext) Runs the HTTP router asynchronously and begins handling client requests indefinitely. The server will continue running until a cancellation is requested via the context. public Task RunAsync(TerminalHttpRouterContext context) Parameters context TerminalHttpRouterContext The terminal context containing configuration and cancellation token. Returns Task A task that represents the asynchronous operation of running the server. Exceptions TerminalException Thrown when the start mode is not configured for HTTP."
  },
  "api/OneImlx.Terminal.Runtime.TerminalHttpRouterContext.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalHttpRouterContext.html",
    "title": "Class TerminalHttpRouterContext",
    "summary": "Class TerminalHttpRouterContext Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll Represents the context for the terminal router when running in HTTP mode. public sealed class TerminalHttpRouterContext : TerminalRouterContext Inheritance object TerminalRouterContext TerminalHttpRouterContext Inherited Members TerminalRouterContext.Arguments TerminalRouterContext.CustomProperties TerminalRouterContext.StartMode TerminalRouterContext.TerminalCancellationToken object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalHttpRouterContext(IPEndPoint, TerminalStartMode, Dictionary<string, object>?, string[]?) Initializes a new instance of the TerminalHttpRouterContext class. public TerminalHttpRouterContext(IPEndPoint iPEndPoint, TerminalStartMode startMode, Dictionary<string, object>? customProperties = null, string[]? arguments = null) Parameters iPEndPoint IPEndPoint The network IP endpoint for server connections. startMode TerminalStartMode The terminal start mode. customProperties Dictionary<string, object> The custom properties. arguments string[] The command line arguments. Properties IPEndPoint The IP endpoint for the HttpListener. Clients need to send messages to this endpoint. public IPEndPoint IPEndPoint { get; } Property Value IPEndPoint"
  },
  "api/OneImlx.Terminal.Runtime.TerminalLoggerExceptionHandler.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalLoggerExceptionHandler.html",
    "title": "Class TerminalLoggerExceptionHandler",
    "summary": "Class TerminalLoggerExceptionHandler Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The default ITerminalExceptionHandler to handle an Exception and log the error message to ILogger. public sealed class TerminalLoggerExceptionHandler : ITerminalExceptionHandler Inheritance object TerminalLoggerExceptionHandler Implements ITerminalExceptionHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalLoggerExceptionHandler(ILogger<TerminalLoggerExceptionHandler>) Initialize a new instance. public TerminalLoggerExceptionHandler(ILogger<TerminalLoggerExceptionHandler> logger) Parameters logger ILogger<TerminalLoggerExceptionHandler> The logger. Methods HandleExceptionAsync(TerminalExceptionHandlerContext) Publish the Exception asynchronously to the logger. public Task HandleExceptionAsync(TerminalExceptionHandlerContext context) Parameters context TerminalExceptionHandlerContext The error to publish. Returns Task The string representation."
  },
  "api/OneImlx.Terminal.Runtime.TerminalLoggerHelpProvider.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalLoggerHelpProvider.html",
    "title": "Class TerminalLoggerHelpProvider",
    "summary": "Class TerminalLoggerHelpProvider Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The default ITerminalHelpProvider that logs the command help using ILogger. public sealed class TerminalLoggerHelpProvider : ITerminalHelpProvider Inheritance object TerminalLoggerHelpProvider Implements ITerminalHelpProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalLoggerHelpProvider(TerminalOptions, ILogger<TerminalLoggerHelpProvider>) Initializes new instance. public TerminalLoggerHelpProvider(TerminalOptions terminalOptions, ILogger<TerminalLoggerHelpProvider> logger) Parameters terminalOptions TerminalOptions logger ILogger<TerminalLoggerHelpProvider> Methods ProvideHelpAsync(TerminalHelpProviderContext) Provides help asynchronously. public Task ProvideHelpAsync(TerminalHelpProviderContext context) Parameters context TerminalHelpProviderContext Returns Task"
  },
  "api/OneImlx.Terminal.Runtime.TerminalNoConsole.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalNoConsole.html",
    "title": "Class TerminalNoConsole",
    "summary": "Class TerminalNoConsole Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll A no-operation console implementation for the ITerminalConsole interface. This implementation does not perform any actual console input/output operations. public class TerminalNoConsole : ITerminalConsole Inheritance object TerminalNoConsole Implements ITerminalConsole Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BackgroundColor The background color of the ITerminalConsole. public ConsoleColor BackgroundColor { get; set; } Property Value ConsoleColor ForegroundColor The foreground color of the ITerminalConsole. public ConsoleColor ForegroundColor { get; set; } Property Value ConsoleColor Methods ClearAsync() Clears the ITerminalConsole buffer and the corresponding display information. public Task ClearAsync() Returns Task Ignore(string?) Return true if the specified string value is ignored by the ITerminalConsole, otherwise false. public bool Ignore(string? value) Parameters value string The value to check. Returns bool ReadAnswerAsync(string, params string[]?) Prints the question to the ITerminalConsole standard output stream and waits for an answer asynchronously. public Task<string> ReadAnswerAsync(string question, params string[]? answers) Parameters question string The question to print. answers string[] The optional allowed answers. Returns Task<string> The answer to the question. ReadLineAsync() Reads the next line of characters from the ITerminalConsole input stream asynchronously. public Task<string?> ReadLineAsync() Returns Task<string> The next line of characters from the input stream, or null if no more lines are available. WriteAsync(string, params object[]) Writes the specified string value to the ITerminalConsole standard output stream. public Task WriteAsync(string value, params object[] args) Parameters value string The text to write. args object[] The format arguments. Returns Task WriteColorAsync(ConsoleColor, string, params object[]) Writes the specified string value in the foreground color to the ITerminalConsole standard output stream. public Task WriteColorAsync(ConsoleColor foregroundColor, string value, params object[] args) Parameters foregroundColor ConsoleColor The foreground text color. value string The text to write. args object[] The format arguments. Returns Task WriteLineAsync() Writes the current newline terminator to the ITerminalConsole standard output stream asynchronously. public Task WriteLineAsync() Returns Task WriteLineAsync(string, params object[]) Writes the specified string value followed by the current newline terminator to the ITerminalConsole standard output stream. public Task WriteLineAsync(string value, params object[] args) Parameters value string The text to write. args object[] The format arguments. Returns Task WriteLineColorAsync(ConsoleColor, string, params object[]) Writes the specified string value in the foreground color followed by the current newline terminator to the ITerminalConsole standard output stream. public Task WriteLineColorAsync(ConsoleColor foregroundColor, string value, params object[] args) Parameters foregroundColor ConsoleColor The foreground text color. value string The text to write. args object[] The format arguments. Returns Task"
  },
  "api/OneImlx.Terminal.Runtime.TerminalParsedRequest.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalParsedRequest.html",
    "title": "Class TerminalParsedRequest",
    "summary": "Class TerminalParsedRequest Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The raw representation of a parsed TerminalRequest. public sealed class TerminalParsedRequest Inheritance object TerminalParsedRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalParsedRequest(IEnumerable<string>, Dictionary<string, (string, bool)>) Initializes a new instance of the TerminalParsedRequest class. public TerminalParsedRequest(IEnumerable<string> tokens, Dictionary<string, (string, bool)> options) Parameters tokens IEnumerable<string> The parsed tokens that represent a root, groups, command, and arguments. options Dictionary<string, (string, bool)> The parsed options. Properties Options Gets the parsed options. public Dictionary<string, (string, bool)> Options { get; } Property Value Dictionary<string, (string, bool)> Tokens Gets the parsed tokens that represent an ordered collection of root, groups, command, and arguments. public IEnumerable<string> Tokens { get; } Property Value IEnumerable<string>"
  },
  "api/OneImlx.Terminal.Runtime.TerminalProcessor.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalProcessor.html",
    "title": "Class TerminalProcessor",
    "summary": "Class TerminalProcessor Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The default implementation of ITerminalProcessor for processing inputs in a terminal environment. public sealed class TerminalProcessor : ITerminalProcessor, IAsyncDisposable Inheritance object TerminalProcessor Implements ITerminalProcessor IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks The TerminalProcessor manages a queue of TerminalInputOutput that are processed asynchronously in the background. It routes individual requests to the ICommandRouter for execution. The processor supports handling both single requests and batches of requests, as well as partial streams sent by clients. Constructors TerminalProcessor(ICommandRouter, ITerminalExceptionHandler, IOptions<TerminalOptions>, ITerminalTextHandler, ILogger<TerminalProcessor>) Initializes a new instance of the TerminalProcessor class. public TerminalProcessor(ICommandRouter commandRouter, ITerminalExceptionHandler terminalExceptionHandler, IOptions<TerminalOptions> terminalOptions, ITerminalTextHandler textHandler, ILogger<TerminalProcessor> logger) Parameters commandRouter ICommandRouter The command router to process commands. terminalExceptionHandler ITerminalExceptionHandler The handler for exceptions thrown during command processing. terminalOptions IOptions<TerminalOptions> Configuration options for the terminal. textHandler ITerminalTextHandler The terminal text handler. logger ILogger<TerminalProcessor> Logger for logging operations within the queue. Properties IsBackground Gets a value indicating whether the processor is running in the background. public bool IsBackground { get; } Property Value bool IsProcessing Gets a value indicating whether the processor is actively handling requests. public bool IsProcessing { get; } Property Value bool UnprocessedIOs Retrieves a snapshot of inputs that are pending processing. public IReadOnlyCollection<TerminalInputOutput> UnprocessedIOs { get; } Property Value IReadOnlyCollection<TerminalInputOutput> Remarks The returned collection represents the state of unprocessed inputs at the time of retrieval. The actual state may change by the time the caller processes it. Methods AddAsync(TerminalInputOutput) Asynchronously adds a TerminalInputOutput for processing. public Task AddAsync(TerminalInputOutput terminalIO) Parameters terminalIO TerminalInputOutput The input to add. Returns Task A task representing the asynchronous operation. DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public ValueTask DisposeAsync() Returns ValueTask ExecuteAsync(TerminalInputOutput) Asynchronously executes the input and populates the output. public Task ExecuteAsync(TerminalInputOutput terminalIO) Parameters terminalIO TerminalInputOutput The input to execute. Returns Task Remarks The ExecuteAsync(TerminalInputOutput) method processes the input immediately and returns the output. For background processing, use AddAsync(TerminalInputOutput). StartProcessing(TerminalRouterContext, bool, Func<TerminalInputOutput, Task>?) Starts processing terminal inputs with the specified context and configuration. public void StartProcessing(TerminalRouterContext terminalRouterContext, bool background, Func<TerminalInputOutput, Task>? responseHandler = null) Parameters terminalRouterContext TerminalRouterContext The context for the terminal router. background bool If true, the processor operates in the background, handling multiple requests asynchronously. If false, it processes individual requests and sends responses asynchronously. responseHandler Func<TerminalInputOutput, Task> An optional handler for processing responses. StopProcessingAsync(int) Attempts to stop background processing within a specified timeout period. public Task<bool> StopProcessingAsync(int timeout) Parameters timeout int The timeout duration in milliseconds. Returns Task<bool> A task representing the asynchronous operation, returning true if processing stopped within the timeout; otherwise, false. StreamAsync(byte[], int, string, string?) Asynchronously streams a continuous flow of TerminalInputOutput as a byte array. public Task StreamAsync(byte[] bytes, int bytesLength, string senderId, string? senderEndpoint) Parameters bytes byte[] The data to stream. bytesLength int The length of the data to process. Use the total length to process all bytes. senderId string The identifier of the sender. senderEndpoint string An optional endpoint of the sender. Returns Task Remarks The StreamAsync(byte[], int, string, string?) method is optimized for handling continuous streams of data. The bytesLength parameter specifies the portion of the input to process, avoiding unnecessary duplication of data. WaitUntilCanceledAsync(CancellationToken) Initiates a task that delays indefinitely until cancellation is requested. public Task WaitUntilCanceledAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The cancellation token to trigger termination. Returns Task"
  },
  "api/OneImlx.Terminal.Runtime.TerminalRequestQueueParser.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalRequestQueueParser.html",
    "title": "Class TerminalRequestQueueParser",
    "summary": "Class TerminalRequestQueueParser Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The default ITerminalRequestParser that uses a queue to parse the terminal request. public class TerminalRequestQueueParser : ITerminalRequestParser Inheritance object TerminalRequestQueueParser Implements ITerminalRequestParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalRequestQueueParser(ITerminalTextHandler, IOptions<TerminalOptions>, ILogger<TerminalRequestQueueParser>) Initializes a new instance of the TerminalRequestQueueParser class. public TerminalRequestQueueParser(ITerminalTextHandler textHandler, IOptions<TerminalOptions> terminalOptions, ILogger<TerminalRequestQueueParser> logger) Parameters textHandler ITerminalTextHandler The text handler. terminalOptions IOptions<TerminalOptions> The terminal configuration options. logger ILogger<TerminalRequestQueueParser> The logger. Methods ParseRequestAsync(TerminalRequest) Parses the terminal request asynchronously. public Task<TerminalParsedRequest> ParseRequestAsync(TerminalRequest request) Parameters request TerminalRequest The terminal request to parse. Returns Task<TerminalParsedRequest> A task that represents the asynchronous parse operation. The task result contains the parsed request."
  },
  "api/OneImlx.Terminal.Runtime.TerminalRouterContext.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalRouterContext.html",
    "title": "Class TerminalRouterContext",
    "summary": "Class TerminalRouterContext Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The ITerminalRouter<TContext> context. public abstract class TerminalRouterContext Inheritance object TerminalRouterContext Derived TerminalConsoleRouterContext TerminalCustomRouterContext TerminalGrpcRouterContext TerminalHttpRouterContext TerminalTcpRouterContext TerminalUdpRouterContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalRouterContext(TerminalStartMode, Dictionary<string, object>?, string[]?) Initializes a new TerminalRouterContext instance. protected TerminalRouterContext(TerminalStartMode startMode, Dictionary<string, object>? customProperties = null, string[]? arguments = null) Parameters startMode TerminalStartMode The terminal start mode. customProperties Dictionary<string, object> The custom properties. arguments string[] The command line arguments. Properties Arguments The terminal driver arguments or command line arguments. public string[]? Arguments { get; } Property Value string[] Remarks These arguments are the command line inputs provided at the application's main entry point when starting a terminal session via a driver or via Process. This allows for dynamic and flexible terminal session configuration, adapting to different operational parameters and user-defined settings. It's particularly useful for modifying startup behaviors and handling various runtime environments, ensuring the terminal adapts to specific needs and contexts. CustomProperties The custom properties. public Dictionary<string, object>? CustomProperties { get; } Property Value Dictionary<string, object> Remarks A collection of key-value pairs that can be used to pass additional information or configuration settings to the terminal session. These properties offer a way to extend the functionality and behavior of the terminal without modifying the core implementation. StartMode The terminal start mode. public TerminalStartMode StartMode { get; } Property Value TerminalStartMode TerminalCancellationToken The cancellation token to cancel the global terminal routing. public CancellationToken TerminalCancellationToken { get; } Property Value CancellationToken Remarks This cancellation token is used for global control over the entire terminal routing. When triggered, it cancels the entire terminal routing, effectively stopping the routing any further commands. This is particularly useful in scenarios where a complete shutdown of the terminal's operational context is required, such as during application termination or critical error handling."
  },
  "api/OneImlx.Terminal.Runtime.TerminalStartMode.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalStartMode.html",
    "title": "Enum TerminalStartMode",
    "summary": "Enum TerminalStartMode Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The terminal start mode. public enum TerminalStartMode Fields Console = 100 The terminal starts as a console server or a console application and listens to an incoming user message. Custom = 0 The terminal starts as a custom service. Grpc = 3 The terminal starts as a gRPC server that listens to an incoming message. Http = 2 The terminal starts as a HTTP server that listens to an incoming message. Tcp = 1 The terminal starts as a TCP server that listens to an incoming connection. Udp = 4 The terminal starts as a UDP server that listens to an incoming message."
  },
  "api/OneImlx.Terminal.Runtime.TerminalSystemConsole.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalSystemConsole.html",
    "title": "Class TerminalSystemConsole",
    "summary": "Class TerminalSystemConsole Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The default implementation of ITerminalConsole that uses the system Console. public class TerminalSystemConsole : ITerminalConsole Inheritance object TerminalSystemConsole Implements ITerminalConsole Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The TerminalSystemConsole is thread safe and allows multiple tasks to write to the console concurrently. Constructors TerminalSystemConsole() Initializes a new instance of the TerminalSystemConsole class. public TerminalSystemConsole() Properties BackgroundColor Gets or sets the background color of the console. public ConsoleColor BackgroundColor { get; set; } Property Value ConsoleColor ForegroundColor Gets or sets the foreground color of the console. public ConsoleColor ForegroundColor { get; set; } Property Value ConsoleColor Methods ClearAsync() Clears the console buffer and display information asynchronously. public Task ClearAsync() Returns Task Ignore(string?) Determines whether the specified string value should be ignored by the ITerminalConsole. public bool Ignore(string? value) Parameters value string The value to check. Returns bool true if the value is null, empty, or whitespace; otherwise, false. ReadAnswerAsync(string, params string[]?) Prints a question to the console and waits for an answer asynchronously. public Task<string> ReadAnswerAsync(string question, params string[]? answers) Parameters question string The question to print. A ? will be appended at the end. answers string[] The allowed answers, or null if all answers are allowed. If specified, this method prints the answers in the format {question} ({answer1}/{answer2}/{answer3})?. Returns Task<string> The user's answer, or null if canceled. ReadLineAsync() Reads the next line of input from the console asynchronously. public Task<string?> ReadLineAsync() Returns Task<string> The next line of input, or null if no more lines are available. WriteAsync(string, params object[]) Writes a formatted string to the console asynchronously. public Task WriteAsync(string value, params object[] args) Parameters value string The string to write. args object[] The format arguments. Returns Task WriteColorAsync(ConsoleColor, string, params object[]) Writes a formatted string to the console in the specified foreground color asynchronously. public Task WriteColorAsync(ConsoleColor foregroundColor, string value, params object[] args) Parameters foregroundColor ConsoleColor The foreground color. value string The string to write. args object[] The format arguments. Returns Task WriteLineAsync() Writes a newline to the console asynchronously. public Task WriteLineAsync() Returns Task WriteLineAsync(string, params object[]) Writes a formatted string followed by a newline to the console asynchronously. public Task WriteLineAsync(string value, params object[] args) Parameters value string The string to write. args object[] The format arguments. Returns Task WriteLineColorAsync(ConsoleColor, string, params object[]) Writes a formatted string followed by a newline in the specified foreground color to the console asynchronously. public Task WriteLineColorAsync(ConsoleColor foregroundColor, string value, params object[] args) Parameters foregroundColor ConsoleColor The foreground color. value string The string to write. args object[] The format arguments. Returns Task"
  },
  "api/OneImlx.Terminal.Runtime.TerminalTcpRouter.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalTcpRouter.html",
    "title": "Class TerminalTcpRouter",
    "summary": "Class TerminalTcpRouter Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The default ITerminalRouter<TContext> for TCP client-server communication. public class TerminalTcpRouter : ITerminalRouter<TerminalTcpRouterContext> Inheritance object TerminalTcpRouter Implements ITerminalRouter<TerminalTcpRouterContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class implements the ITerminalRouter<TContext> interface and is responsible for handling TCP client-server communication. It runs a terminal as a TCP server on the specified endpoint and waits for incoming client connections. The server can be gracefully stopped by triggering a cancellation token in the context. Constructors TerminalTcpRouter(IOptions<TerminalOptions>, ITerminalExceptionHandler, ITerminalProcessor, ILogger<TerminalTcpRouter>) Initializes a new instance of the TerminalTcpRouter class. public TerminalTcpRouter(IOptions<TerminalOptions> options, ITerminalExceptionHandler exceptionHandler, ITerminalProcessor terminalProcessor, ILogger<TerminalTcpRouter> logger) Parameters options IOptions<TerminalOptions> The configuration options. exceptionHandler ITerminalExceptionHandler The exception handler. terminalProcessor ITerminalProcessor The terminal processing queue. logger ILogger<TerminalTcpRouter> The logger. Remarks This constructor creates a new instance of the TerminalTcpRouter class. It takes several dependencies that are required for handling TCP client-server communication. Properties IsRunning Gets a value indicating whether the TerminalTcpRouter is running. public bool IsRunning { get; protected set; } Property Value bool Name The terminal router name. public string Name { get; } Property Value string Methods RunAsync(TerminalTcpRouterContext) Runs the TCP server for handling client connections asynchronously. public virtual Task RunAsync(TerminalTcpRouterContext context) Parameters context TerminalTcpRouterContext The routing context. Returns Task A task representing the asynchronous operation. Remarks This method starts a TCP server on the specified IP endpoint and waits for incoming client connections. It handles the client connections asynchronously by creating a task for each incoming connection. The server can be gracefully stopped by canceling the provided cancellation token in the context. The method will also stop if an exception is encountered while handling client connections. See Also TerminalUdpRouter TerminalConsoleRouter"
  },
  "api/OneImlx.Terminal.Runtime.TerminalTcpRouterContext.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalTcpRouterContext.html",
    "title": "Class TerminalTcpRouterContext",
    "summary": "Class TerminalTcpRouterContext Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The TerminalTcpRouter connection context. public sealed class TerminalTcpRouterContext : TerminalRouterContext Inheritance object TerminalRouterContext TerminalTcpRouterContext Inherited Members TerminalRouterContext.Arguments TerminalRouterContext.CustomProperties TerminalRouterContext.StartMode TerminalRouterContext.TerminalCancellationToken object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalTcpRouterContext(IPEndPoint, TerminalStartMode, Dictionary<string, object>?, string[]?) Initialize a new instance. public TerminalTcpRouterContext(IPEndPoint iPEndPoint, TerminalStartMode startMode, Dictionary<string, object>? customProperties = null, string[]? arguments = null) Parameters iPEndPoint IPEndPoint The network IP endpoint server will connect. startMode TerminalStartMode The terminal start mode. customProperties Dictionary<string, object> The custom properties. arguments string[] The command line arguments. Properties IPEndPoint The IP endpoint for the TcpListener. The clients need to send the messages to this end point. public IPEndPoint IPEndPoint { get; } Property Value IPEndPoint"
  },
  "api/OneImlx.Terminal.Runtime.TerminalTextHandler.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalTextHandler.html",
    "title": "Class TerminalTextHandler",
    "summary": "Class TerminalTextHandler Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The default ITerminalTextHandler. public sealed class TerminalTextHandler : ITerminalTextHandler Inheritance object TerminalTextHandler Implements ITerminalTextHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalTextHandler(StringComparison, Encoding) Initializes a new instance of the TerminalTextHandler class with specified comparison and encoding. public TerminalTextHandler(StringComparison comparison, Encoding encoding) Parameters comparison StringComparison The string comparison to use. encoding Encoding The text encoding to use. Properties Comparison The string comparison. public StringComparison Comparison { get; } Property Value StringComparison Encoding The text encoding. public Encoding Encoding { get; } Property Value Encoding Methods CharEquals(char?, char?) Determines whether the two characters are equal using Comparison. public bool CharEquals(char? ch1, char? ch2) Parameters ch1 char? The first char to compare. ch2 char? The second char to compare. Returns bool true if the characters are equal, false otherwise. EqualityComparer() Returns the InvariantCultureIgnoreCase equality comparer. public IEqualityComparer<string> EqualityComparer() Returns IEqualityComparer<string> SingleEquals(char?, string?) Determines whether a characters and text are equal using Comparison. public bool SingleEquals(char? ch1, string? s2) Parameters ch1 char? The first char to compare. s2 string The second text to compare. Returns bool true if the texts are equal, false otherwise. TextEquals(string?, string?) Determines whether the two ASCII texts are equal using Comparison. public bool TextEquals(string? s1, string? s2) Parameters s1 string The first text to compare. s2 string The second text to compare. Returns bool true if the texts are equal, false otherwise. TextLength(string?) Returns the ASCII text length. public int TextLength(string? s1) Parameters s1 string Returns int"
  },
  "api/OneImlx.Terminal.Runtime.TerminalUdpRouter.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalUdpRouter.html",
    "title": "Class TerminalUdpRouter",
    "summary": "Class TerminalUdpRouter Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The default ITerminalRouter<TContext> for UDP server communication. public class TerminalUdpRouter : ITerminalRouter<TerminalUdpRouterContext> Inheritance object TerminalUdpRouter Implements ITerminalRouter<TerminalUdpRouterContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class implements the ITerminalRouter<TContext> interface and is responsible for handling UDP server communication. It runs a terminal as a UDP server on the specified IP endpoint and listens for incoming UDP datagrams. Unlike TCP, UDP is connectionless, allowing this server to receive messages from multiple clients without establishing a dedicated connection for each. Messages can be received and processed concurrently from various sources, making UDP suitable for scenarios where low latency or high-throughput communication is required, albeit with the trade-off of reliability. The server can be gracefully stopped by canceling the provided cancellation token in the context, ensuring any ongoing operations are terminated and resources are cleanly released. Constructors TerminalUdpRouter(ITerminalExceptionHandler, IOptions<TerminalOptions>, ITerminalTextHandler, ITerminalProcessor, ILogger<TerminalUdpRouter>) Initializes a new instance of the TerminalUdpRouter class. public TerminalUdpRouter(ITerminalExceptionHandler exceptionHandler, IOptions<TerminalOptions> terminalOptions, ITerminalTextHandler textHandler, ITerminalProcessor terminalProcessor, ILogger<TerminalUdpRouter> logger) Parameters exceptionHandler ITerminalExceptionHandler The handler for exceptions that occur during routing. terminalOptions IOptions<TerminalOptions> Configuration options for the terminal. textHandler ITerminalTextHandler The handler for processing text data. terminalProcessor ITerminalProcessor The terminal processing queue. logger ILogger<TerminalUdpRouter> The logger for logging information and errors. Properties IsRunning Gets a value indicating whether the TerminalUdpRouter is running. public bool IsRunning { get; protected set; } Property Value bool Name The terminal router name. public string Name { get; } Property Value string Methods RunAsync(TerminalUdpRouterContext) Asynchronously runs the UDP router, listening for incoming UDP packets and processing them. public Task RunAsync(TerminalUdpRouterContext context) Parameters context TerminalUdpRouterContext The UDP router context containing configuration and runtime information. Returns Task A task that represents the asynchronous operation. See Also TerminalConsoleRouter TerminalTcpRouter"
  },
  "api/OneImlx.Terminal.Runtime.TerminalUdpRouterContext.html": {
    "href": "api/OneImlx.Terminal.Runtime.TerminalUdpRouterContext.html",
    "title": "Class TerminalUdpRouterContext",
    "summary": "Class TerminalUdpRouterContext Namespace OneImlx.Terminal.Runtime Assembly OneImlx.Terminal.dll The TerminalUdpRouter connection context. public sealed class TerminalUdpRouterContext : TerminalRouterContext Inheritance object TerminalRouterContext TerminalUdpRouterContext Inherited Members TerminalRouterContext.Arguments TerminalRouterContext.CustomProperties TerminalRouterContext.StartMode TerminalRouterContext.TerminalCancellationToken object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalUdpRouterContext(IPEndPoint, TerminalStartMode, Dictionary<string, object>?, string[]?) Initialize a new instance. public TerminalUdpRouterContext(IPEndPoint iPEndPoint, TerminalStartMode startMode, Dictionary<string, object>? customProperties = null, string[]? arguments = null) Parameters iPEndPoint IPEndPoint The network IP endpoint server will connect. startMode TerminalStartMode The terminal start mode. customProperties Dictionary<string, object> The custom properties. arguments string[] The arguments. Properties IPEndPoint The network IP endpoint terminal will connect. public IPEndPoint IPEndPoint { get; } Property Value IPEndPoint"
  },
  "api/OneImlx.Terminal.Runtime.html": {
    "href": "api/OneImlx.Terminal.Runtime.html",
    "title": "Namespace OneImlx.Terminal.Runtime",
    "summary": "Namespace OneImlx.Terminal.Runtime Classes Terminal Terminals, also known as command lines, consoles, or CLI applications, allow organizations and users to accomplish and automate tasks on a computer without using a graphical user interface. If a CLI terminal supports user interaction, the UX is the terminal. TerminalConsoleExceptionHandler The default ITerminalExceptionHandler to handle an Exception and log the error message to ITerminalConsole. TerminalConsoleHelpProvider The default ITerminalHelpProvider that logs the command help using ITerminalConsole. TerminalConsoleRouter The default ITerminalRouter<TContext> for console based terminals. TerminalConsoleRouterContext The TerminalRouterContext for TerminalConsoleRouter. TerminalCustomRouter The default ITerminalRouter<TContext> for custom routing. TerminalCustomRouterContext The TerminalRouterContext for TerminalCustomRouter. TerminalExceptionHandlerContext The ITerminalExceptionHandler context. TerminalGrpcRouter Represents the gRPC router responsible for managing gRPC communication in the terminal. This router handles incoming gRPC commands and routes them to the appropriate command runners. TerminalGrpcRouterContext Represents the context for configuring and managing the gRPC router in the terminal. TerminalHelpProviderContext The ITerminalHelpProvider context. TerminalHttpRouter Represents the HTTP router responsible for managing HTTP communication in the terminal. This router handles incoming HTTP commands and routes them to the appropriate command runners. TerminalHttpRouterContext Represents the context for the terminal router when running in HTTP mode. TerminalLoggerExceptionHandler The default ITerminalExceptionHandler to handle an Exception and log the error message to ILogger. TerminalLoggerHelpProvider The default ITerminalHelpProvider that logs the command help using ILogger. TerminalNoConsole A no-operation console implementation for the ITerminalConsole interface. This implementation does not perform any actual console input/output operations. TerminalParsedRequest The raw representation of a parsed TerminalRequest. TerminalProcessor The default implementation of ITerminalProcessor for processing inputs in a terminal environment. TerminalRequestQueueParser The default ITerminalRequestParser that uses a queue to parse the terminal request. TerminalRouterContext The ITerminalRouter<TContext> context. TerminalSystemConsole The default implementation of ITerminalConsole that uses the system Console. TerminalTcpRouter The default ITerminalRouter<TContext> for TCP client-server communication. TerminalTcpRouterContext The TerminalTcpRouter connection context. TerminalTextHandler The default ITerminalTextHandler. TerminalUdpRouter The default ITerminalRouter<TContext> for UDP server communication. TerminalUdpRouterContext The TerminalUdpRouter connection context. Interfaces ITerminalConsole An abstraction of a console for terminal framework. ITerminalExceptionHandler An abstraction to handle Exception. ITerminalHelpProvider An abstraction to provide help for commands. ITerminalProcessor An abstraction for processing the TerminalInputOutput individually or in batches, with optional asynchronous handling of responses in the background. ITerminalRequestParser An abstraction to parse a TerminalRequest. ITerminalRouter<TContext> An abstraction of a context aware terminal router. ITerminalTextHandler An abstraction of a terminal text handler. Enums TerminalStartMode The terminal start mode."
  },
  "api/OneImlx.Terminal.Server.Extensions.EndpointRouteBuilderExtensions.html": {
    "href": "api/OneImlx.Terminal.Server.Extensions.EndpointRouteBuilderExtensions.html",
    "title": "Class EndpointRouteBuilderExtensions",
    "summary": "Class EndpointRouteBuilderExtensions Namespace OneImlx.Terminal.Server.Extensions Assembly OneImlx.Terminal.Server.dll The IEndpointRouteBuilder extension methods. public static class EndpointRouteBuilderExtensions Inheritance object EndpointRouteBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MapTerminalHttp(IEndpointRouteBuilder) Maps the terminal HTTP commands endpoint to handle incoming HTTP requests for the terminal server. public static IEndpointConventionBuilder MapTerminalHttp(this IEndpointRouteBuilder endpoints) Parameters endpoints IEndpointRouteBuilder The IEndpointRouteBuilder to configure routing for terminal commands. Returns IEndpointConventionBuilder The IEndpointConventionBuilder for the mapped endpoint. Remarks This method registers a POST endpoint at /oneimlx/terminal/httprouter that integrates with the TerminalHttpMapService to handle command requests."
  },
  "api/OneImlx.Terminal.Server.Extensions.html": {
    "href": "api/OneImlx.Terminal.Server.Extensions.html",
    "title": "Namespace OneImlx.Terminal.Server.Extensions",
    "summary": "Namespace OneImlx.Terminal.Server.Extensions Classes EndpointRouteBuilderExtensions The IEndpointRouteBuilder extension methods."
  },
  "api/OneImlx.Terminal.Server.OneimlxTerminalReflection.html": {
    "href": "api/OneImlx.Terminal.Server.OneimlxTerminalReflection.html",
    "title": "Class OneimlxTerminalReflection",
    "summary": "Class OneimlxTerminalReflection Namespace OneImlx.Terminal.Server Assembly OneImlx.Terminal.Server.dll Holder for reflection information generated from Protos/oneimlx_terminal.proto public static class OneimlxTerminalReflection Inheritance object OneimlxTerminalReflection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Descriptor File descriptor for Protos/oneimlx_terminal.proto public static FileDescriptor Descriptor { get; } Property Value FileDescriptor"
  },
  "api/OneImlx.Terminal.Server.TerminalGrpcMapService.html": {
    "href": "api/OneImlx.Terminal.Server.TerminalGrpcMapService.html",
    "title": "Class TerminalGrpcMapService",
    "summary": "Class TerminalGrpcMapService Namespace OneImlx.Terminal.Server Assembly OneImlx.Terminal.Server.dll Represents the gRPC service responsible for managing gRPC communication in the OneImlx terminal framework. public sealed class TerminalGrpcMapService : TerminalGrpcRouterProto.TerminalGrpcRouterProtoBase Inheritance object TerminalGrpcRouterProto.TerminalGrpcRouterProtoBase TerminalGrpcMapService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalGrpcMapService(ITerminalRouter<TerminalGrpcRouterContext>, ITerminalProcessor, ILogger<TerminalGrpcMapService>) Initializes a new instance of the TerminalGrpcMapService class. public TerminalGrpcMapService(ITerminalRouter<TerminalGrpcRouterContext> terminalRouter, ITerminalProcessor terminalProcessor, ILogger<TerminalGrpcMapService> logger) Parameters terminalRouter ITerminalRouter<TerminalGrpcRouterContext> The terminal router instance for routing commands. terminalProcessor ITerminalProcessor The terminal processor. logger ILogger<TerminalGrpcMapService> The logger instance for logging router events and errors. Methods RouteCommand(TerminalGrpcRouterProtoInput, ServerCallContext) Routes the TerminalGrpcRouterProtoInput to the appropriate command runner. public override Task<TerminalGrpcRouterProtoOutput> RouteCommand(TerminalGrpcRouterProtoInput protoInput, ServerCallContext context) Parameters protoInput TerminalGrpcRouterProtoInput The gRPC input containing the TerminalInputOutput. context ServerCallContext The gRPC server call context. Returns Task<TerminalGrpcRouterProtoOutput> A task representing the asynchronous operation, including the TerminalGrpcRouterProtoOutput. Remarks Application code should not call this method directly. Instead, use the client NuGet package to send the command to the gRPC terminal server. Exceptions TerminalException Thrown when the terminal gRPC router is not running."
  },
  "api/OneImlx.Terminal.Server.TerminalGrpcRouterProto.TerminalGrpcRouterProtoBase.html": {
    "href": "api/OneImlx.Terminal.Server.TerminalGrpcRouterProto.TerminalGrpcRouterProtoBase.html",
    "title": "Class TerminalGrpcRouterProto.TerminalGrpcRouterProtoBase",
    "summary": "Class TerminalGrpcRouterProto.TerminalGrpcRouterProtoBase Namespace OneImlx.Terminal.Server Assembly OneImlx.Terminal.Server.dll Base class for server-side implementations of TerminalGrpcRouterProto [BindServiceMethod(typeof(TerminalGrpcRouterProto), \"BindService\")] public abstract class TerminalGrpcRouterProto.TerminalGrpcRouterProtoBase Inheritance object TerminalGrpcRouterProto.TerminalGrpcRouterProtoBase Derived TerminalGrpcMapService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RouteCommand(TerminalGrpcRouterProtoInput, ServerCallContext) Routes a command asynchronously. public virtual Task<TerminalGrpcRouterProtoOutput> RouteCommand(TerminalGrpcRouterProtoInput request, ServerCallContext context) Parameters request TerminalGrpcRouterProtoInput The request received from the client. context ServerCallContext The context of the server-side call handler being invoked. Returns Task<TerminalGrpcRouterProtoOutput> The response to send back to the client (wrapped by a task)."
  },
  "api/OneImlx.Terminal.Server.TerminalGrpcRouterProto.html": {
    "href": "api/OneImlx.Terminal.Server.TerminalGrpcRouterProto.html",
    "title": "Class TerminalGrpcRouterProto",
    "summary": "Class TerminalGrpcRouterProto Namespace OneImlx.Terminal.Server Assembly OneImlx.Terminal.Server.dll The OneImlx terminal router command service to request the command. public static class TerminalGrpcRouterProto Inheritance object TerminalGrpcRouterProto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Descriptor Service descriptor public static ServiceDescriptor Descriptor { get; } Property Value ServiceDescriptor Methods BindService(ServiceBinderBase, TerminalGrpcRouterProtoBase) Register service method with a service binder with or without implementation. Useful when customizing the service binding logic. Note: this method is part of an experimental API that can change or be removed without any prior notice. public static void BindService(ServiceBinderBase serviceBinder, TerminalGrpcRouterProto.TerminalGrpcRouterProtoBase serviceImpl) Parameters serviceBinder ServiceBinderBase Service methods will be bound by calling AddMethod on this object. serviceImpl TerminalGrpcRouterProto.TerminalGrpcRouterProtoBase An object implementing the server-side handling logic. BindService(TerminalGrpcRouterProtoBase) Creates service definition that can be registered with a server public static ServerServiceDefinition BindService(TerminalGrpcRouterProto.TerminalGrpcRouterProtoBase serviceImpl) Parameters serviceImpl TerminalGrpcRouterProto.TerminalGrpcRouterProtoBase An object implementing the server-side handling logic. Returns ServerServiceDefinition"
  },
  "api/OneImlx.Terminal.Server.TerminalGrpcRouterProtoInput.html": {
    "href": "api/OneImlx.Terminal.Server.TerminalGrpcRouterProtoInput.html",
    "title": "Class TerminalGrpcRouterProtoInput",
    "summary": "Class TerminalGrpcRouterProtoInput Namespace OneImlx.Terminal.Server Assembly OneImlx.Terminal.Server.dll The terminal router command request. public sealed class TerminalGrpcRouterProtoInput : IMessage<TerminalGrpcRouterProtoInput>, IEquatable<TerminalGrpcRouterProtoInput>, IDeepCloneable<TerminalGrpcRouterProtoInput>, IBufferMessage, IMessage Inheritance object TerminalGrpcRouterProtoInput Implements IMessage<TerminalGrpcRouterProtoInput> IEquatable<TerminalGrpcRouterProtoInput> IDeepCloneable<TerminalGrpcRouterProtoInput> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TerminalGrpcRouterProtoInput() public TerminalGrpcRouterProtoInput() TerminalGrpcRouterProtoInput(TerminalGrpcRouterProtoInput) public TerminalGrpcRouterProtoInput(TerminalGrpcRouterProtoInput other) Parameters other TerminalGrpcRouterProtoInput Fields InputJsonFieldNumber Field number for the \"InputJson\" field. public const int InputJsonFieldNumber = 1 Field Value int Properties Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor InputJson The terminal input. public string InputJson { get; set; } Property Value string Parser public static MessageParser<TerminalGrpcRouterProtoInput> Parser { get; } Property Value MessageParser<TerminalGrpcRouterProtoInput> Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. Clone() Creates a deep clone of this object. public TerminalGrpcRouterProtoInput Clone() Returns TerminalGrpcRouterProtoInput A deep clone of this object. Equals(TerminalGrpcRouterProtoInput) Indicates whether the current object is equal to another object of the same type. public bool Equals(TerminalGrpcRouterProtoInput other) Parameters other TerminalGrpcRouterProtoInput An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object other) Parameters other object Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(TerminalGrpcRouterProtoInput) Merges the given message into this one. public void MergeFrom(TerminalGrpcRouterProtoInput other) Parameters other TerminalGrpcRouterProtoInput Remarks See the user guide for precise merge semantics. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/OneImlx.Terminal.Server.TerminalGrpcRouterProtoOutput.html": {
    "href": "api/OneImlx.Terminal.Server.TerminalGrpcRouterProtoOutput.html",
    "title": "Class TerminalGrpcRouterProtoOutput",
    "summary": "Class TerminalGrpcRouterProtoOutput Namespace OneImlx.Terminal.Server Assembly OneImlx.Terminal.Server.dll The terminal router command request. public sealed class TerminalGrpcRouterProtoOutput : IMessage<TerminalGrpcRouterProtoOutput>, IEquatable<TerminalGrpcRouterProtoOutput>, IDeepCloneable<TerminalGrpcRouterProtoOutput>, IBufferMessage, IMessage Inheritance object TerminalGrpcRouterProtoOutput Implements IMessage<TerminalGrpcRouterProtoOutput> IEquatable<TerminalGrpcRouterProtoOutput> IDeepCloneable<TerminalGrpcRouterProtoOutput> IBufferMessage IMessage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TerminalGrpcRouterProtoOutput() public TerminalGrpcRouterProtoOutput() TerminalGrpcRouterProtoOutput(TerminalGrpcRouterProtoOutput) public TerminalGrpcRouterProtoOutput(TerminalGrpcRouterProtoOutput other) Parameters other TerminalGrpcRouterProtoOutput Fields OutputJsonFieldNumber Field number for the \"OutputJson\" field. public const int OutputJsonFieldNumber = 1 Field Value int Properties Descriptor public static MessageDescriptor Descriptor { get; } Property Value MessageDescriptor OutputJson The terminal output. public string OutputJson { get; set; } Property Value string Parser public static MessageParser<TerminalGrpcRouterProtoOutput> Parser { get; } Property Value MessageParser<TerminalGrpcRouterProtoOutput> Methods CalculateSize() Calculates the size of this message in Protocol Buffer wire format, in bytes. public int CalculateSize() Returns int The number of bytes required to write this message to a coded output stream. Clone() Creates a deep clone of this object. public TerminalGrpcRouterProtoOutput Clone() Returns TerminalGrpcRouterProtoOutput A deep clone of this object. Equals(TerminalGrpcRouterProtoOutput) Indicates whether the current object is equal to another object of the same type. public bool Equals(TerminalGrpcRouterProtoOutput other) Parameters other TerminalGrpcRouterProtoOutput An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object other) Parameters other object Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. MergeFrom(CodedInputStream) Merges the data from the specified coded input stream with the current message. public void MergeFrom(CodedInputStream input) Parameters input CodedInputStream Remarks See the user guide for precise merge semantics. MergeFrom(TerminalGrpcRouterProtoOutput) Merges the given message into this one. public void MergeFrom(TerminalGrpcRouterProtoOutput other) Parameters other TerminalGrpcRouterProtoOutput Remarks See the user guide for precise merge semantics. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WriteTo(CodedOutputStream) Writes the data to the given coded output stream. public void WriteTo(CodedOutputStream output) Parameters output CodedOutputStream Coded output stream to write the data to. Must not be null."
  },
  "api/OneImlx.Terminal.Server.TerminalHttpMapService.html": {
    "href": "api/OneImlx.Terminal.Server.TerminalHttpMapService.html",
    "title": "Class TerminalHttpMapService",
    "summary": "Class TerminalHttpMapService Namespace OneImlx.Terminal.Server Assembly OneImlx.Terminal.Server.dll Represents the HTTP service responsible for managing HTTP communication in the OneImlx terminal framework. This router handles incoming HTTP commands and routes them to the appropriate command runners. public sealed class TerminalHttpMapService Inheritance object TerminalHttpMapService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalHttpMapService(ITerminalRouter<TerminalHttpRouterContext>, ITerminalProcessor, ILogger<TerminalHttpMapService>) Initializes a new instance of the TerminalHttpMapService class. public TerminalHttpMapService(ITerminalRouter<TerminalHttpRouterContext> terminalRouter, ITerminalProcessor terminalProcessor, ILogger<TerminalHttpMapService> logger) Parameters terminalRouter ITerminalRouter<TerminalHttpRouterContext> The terminal router. terminalProcessor ITerminalProcessor The terminal processor. logger ILogger<TerminalHttpMapService> The logger instance for logging router events and errors. Methods RouteAsync(HttpContext) Routes the TerminalInputOutput via HTTP. public Task RouteAsync(HttpContext httpContext) Parameters httpContext HttpContext The HTTP context containing the request. Returns Task A task representing the asynchronous operation. Remarks This method is designed to enqueue commands for processing by the terminal router's command queue. It expects a valid HTTP request containing a JSON body with the command string. The method extracts the command from the request body and adds it to the queue, associating it with the client information from the HTTP context. The method assumes that the terminal router is running and its command queue is initialized. If the queue is not active, a TerminalException is thrown to indicate that the router is not ready to process commands. Ensure the terminal router is correctly started before invoking this method. This method is primarily intended to be called by HTTP clients. It should not be invoked directly from within the application without proper context, as it depends on HTTP infrastructure and client context information. Exceptions TerminalException Thrown when the terminal HTTP router is not running."
  },
  "api/OneImlx.Terminal.Server.html": {
    "href": "api/OneImlx.Terminal.Server.html",
    "title": "Namespace OneImlx.Terminal.Server",
    "summary": "Namespace OneImlx.Terminal.Server Classes OneimlxTerminalReflection Holder for reflection information generated from Protos/oneimlx_terminal.proto TerminalGrpcMapService Represents the gRPC service responsible for managing gRPC communication in the OneImlx terminal framework. TerminalGrpcRouterProto The OneImlx terminal router command service to request the command. TerminalGrpcRouterProto.TerminalGrpcRouterProtoBase Base class for server-side implementations of TerminalGrpcRouterProto TerminalGrpcRouterProtoInput The terminal router command request. TerminalGrpcRouterProtoOutput The terminal router command request. TerminalHttpMapService Represents the HTTP service responsible for managing HTTP communication in the OneImlx terminal framework. This router handles incoming HTTP commands and routes them to the appropriate command runners."
  },
  "api/OneImlx.Terminal.Shared.TerminalErrors.html": {
    "href": "api/OneImlx.Terminal.Shared.TerminalErrors.html",
    "title": "Class TerminalErrors",
    "summary": "Class TerminalErrors Namespace OneImlx.Terminal.Shared Assembly OneImlx.Terminal.Shared.dll The errors for the terminal framework. public static class TerminalErrors Inheritance object TerminalErrors Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ConnectionClosed The network connection is closed. public const string ConnectionClosed = \"connection_closed\" Field Value string DuplicateOption The option is not already added to the command. public const string DuplicateOption = \"duplicate_option\" Field Value string InvalidArgument The argument is not valid. public const string InvalidArgument = \"invalid_argument\" Field Value string InvalidCommand The command is not valid. public const string InvalidCommand = \"invalid_command\" Field Value string InvalidConfiguration The configuration is not valid. public const string InvalidConfiguration = \"invalid_configuration\" Field Value string InvalidDeclaration The configuration is not valid. public const string InvalidDeclaration = \"invalid_declaration\" Field Value string InvalidLicense The license is not valid. public const string InvalidLicense = \"invalid_license\" Field Value string InvalidOption The option is not valid. public const string InvalidOption = \"invalid_option\" Field Value string InvalidRequest The request is not valid. public const string InvalidRequest = \"invalid_request\" Field Value string MissingArgument The argument is missing. public const string MissingArgument = \"missing_argument\" Field Value string MissingClaim The claim is missing. public const string MissingClaim = \"missing_claim\" Field Value string MissingCommand The argument is missing. public const string MissingCommand = \"missing_command\" Field Value string MissingIdentity The identity or an account is missing. public const string MissingIdentity = \"missing_identity\" Field Value string MissingOption The option is missing. public const string MissingOption = \"missing_option\" Field Value string RequestCanceled The request is canceled. public const string RequestCanceled = \"request_canceled\" Field Value string ServerError The server error. public const string ServerError = \"server_error\" Field Value string UnauthorizedAccess The access is not authorized. public const string UnauthorizedAccess = \"unauthorized_access\" Field Value string UnsupportedArgument The argument is not supported. public const string UnsupportedArgument = \"unsupported_argument\" Field Value string UnsupportedCommand The command is not supported. public const string UnsupportedCommand = \"unsupported_command\" Field Value string UnsupportedOption The option is not supported. public const string UnsupportedOption = \"unsupported_option\" Field Value string"
  },
  "api/OneImlx.Terminal.Shared.TerminalException.html": {
    "href": "api/OneImlx.Terminal.Shared.TerminalException.html",
    "title": "Class TerminalException",
    "summary": "Class TerminalException Namespace OneImlx.Terminal.Shared Assembly OneImlx.Terminal.Shared.dll The exception that represents a terminal error. public sealed class TerminalException : ErrorException, ISerializable Inheritance object Exception ErrorException TerminalException Implements ISerializable Inherited Members ErrorException.Error ErrorException.Message Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors TerminalException(Error) Initializes a new instance. public TerminalException(Error error) Parameters error Error The error. TerminalException(string, string) Initializes a new instance. public TerminalException(string error, string errorDescription) Parameters error string The error code. errorDescription string The error description. TerminalException(string, string, params object?[]) Initializes a new instance. public TerminalException(string error, string errorDescription, params object?[] args) Parameters error string The error code. errorDescription string The error description. args object[] The error description format arguments."
  },
  "api/OneImlx.Terminal.Shared.TerminalIdentifiers.html": {
    "href": "api/OneImlx.Terminal.Shared.TerminalIdentifiers.html",
    "title": "Class TerminalIdentifiers",
    "summary": "Class TerminalIdentifiers Namespace OneImlx.Terminal.Shared Assembly OneImlx.Terminal.Shared.dll The standard terminal identifiers. public sealed class TerminalIdentifiers Inheritance object TerminalIdentifiers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields CustomHandler The custom handler. public const string CustomHandler = \"custom\" Field Value string DefaultHandler The default handler. public const string DefaultHandler = \"default\" Field Value string IsolatedDeployment The isolated deployment. public const string IsolatedDeployment = \"isolated\" Field Value string OfflineLicenseMode The offline license mode. public const string OfflineLicenseMode = \"offline\" Field Value string OnPremiseDeployment The onpremise deployment. public const string OnPremiseDeployment = \"onpremise\" Field Value string SenderEndpointToken The sender_endpoint token. public const string SenderEndpointToken = \"sender_endpoint\" Field Value string SenderIdToken The sender_id token. public const string SenderIdToken = \"sender_id\" Field Value string SpaceSeparator The space character used as a separator. public const char SpaceSeparator = ' ' Field Value char StreamDelimiter The data stream delimiter byte. Defaults to 0x1E or Record Separator. public const byte StreamDelimiter = 30 Field Value byte TestApplicationId The test application identifier for internal testing. public const string TestApplicationId = \"08c6925f-a734-4e24-8d84-e06737420766\" Field Value string Remarks NOTE: This application is reserved for our internal testing purposes. Do not use in your application code."
  },
  "api/OneImlx.Terminal.Shared.TerminalInputOutput.html": {
    "href": "api/OneImlx.Terminal.Shared.TerminalInputOutput.html",
    "title": "Class TerminalInputOutput",
    "summary": "Class TerminalInputOutput Namespace OneImlx.Terminal.Shared Assembly OneImlx.Terminal.Shared.dll Represents the terminal IO class that is sent to the terminal server as an ordered collection of TerminalRequest. public sealed class TerminalInputOutput Inheritance object TerminalInputOutput Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks The requests in the TerminalInputOutput are executed by the router in the order they are added. Constructors TerminalInputOutput() THIS METHOD IS RESERVED FOR OUR INTERNAL INFRASTRUCTURE USE ONLY. DO NOT USE IT IN YOUR APPLICATION. To create a new instance of TerminalInputOutput, use the Single(string, string, string?, string?) or Batch(string, TerminalRequest[], string?, string?) method. public TerminalInputOutput() See Also Single(string, string, string?, string?) Batch(string, TerminalRequest[], string?, string?) Batch(string, string[], string[], string?, string?) Properties BatchId The batch identifier. [JsonPropertyName(\"batch_id\")] [JsonInclude] public string? BatchId { get; } Property Value string Count Gets the number of requests. [JsonIgnore] public int Count { get; } Property Value int IsBatch Gets a value indicating whether the input is a batch. [JsonIgnore] public bool IsBatch { get; } Property Value bool this[int] Gets or sets the TerminalRequest at the specified index. public TerminalRequest this[int index] { get; set; } Parameters index int The index. Property Value TerminalRequest Requests The requests in the input. [JsonPropertyName(\"requests\")] [JsonInclude] public TerminalRequest[] Requests { get; } Property Value TerminalRequest[] SenderEndpoint The sender endpoint if known. This is typically set automatically by the router. [JsonPropertyName(\"sender_endpoint\")] public string? SenderEndpoint { get; set; } Property Value string SenderId The sender identifier if known. This is typically set automatically by the router. [JsonPropertyName(\"sender_id\")] public string? SenderId { get; set; } Property Value string Methods Batch(string, TerminalRequest[], string?, string?) Creates a new TerminalInputOutput for a batch of requests. public static TerminalInputOutput Batch(string batchId, TerminalRequest[] requests, string? senderId = null, string? senderEndpoint = null) Parameters batchId string The batch identifier. requests TerminalRequest[] The array of TerminalRequest objects. senderId string The sender id. senderEndpoint string The sender endpoint. Returns TerminalInputOutput A new TerminalInputOutput instance. Exceptions ArgumentException Thrown if the number of requests is zero. Batch(string, string[], string[], string?, string?) Creates a new TerminalInputOutput for a batch of commands. public static TerminalInputOutput Batch(string batchId, string[] ids, string[] raws, string? senderId = null, string? senderEndpoint = null) Parameters batchId string The batch identifier. ids string[] The command identifiers. raws string[] The raw commands. senderId string The sender id. senderEndpoint string The sender endpoint. Returns TerminalInputOutput A new TerminalInputOutput instance. Exceptions ArgumentException Thrown if the number of IDs does not match the number of raw commands. GetDeserializedResult<T>(int) Retrieves a result at a given index, converting it to the specified type if necessary. public T GetDeserializedResult<T>(int index) Parameters index int Returns T Type Parameters T Single(string, string, string?, string?) Creates a new TerminalInputOutput for a single command. public static TerminalInputOutput Single(string id, string raw, string? senderId = null, string? senderEndpoint = null) Parameters id string The command identifier. raw string The raw command. senderId string The sender id. senderEndpoint string The sender endpoint. Returns TerminalInputOutput A new TerminalInputOutput instance."
  },
  "api/OneImlx.Terminal.Shared.TerminalRequest.html": {
    "href": "api/OneImlx.Terminal.Shared.TerminalRequest.html",
    "title": "Class TerminalRequest",
    "summary": "Class TerminalRequest Namespace OneImlx.Terminal.Shared Assembly OneImlx.Terminal.Shared.dll A terminal request with a unique identifier, raw input, result, and error status. public sealed class TerminalRequest : IEquatable<TerminalRequest?> Inheritance object TerminalRequest Implements IEquatable<TerminalRequest> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TerminalRequest(string, string) Initializes a new instance of the TerminalRequest class. [JsonConstructor] public TerminalRequest(string id, string raw) Parameters id string The unique identifier for the command item. raw string The raw command string to be processed. Properties Id Gets the unique identifier for the command item. [JsonPropertyName(\"id\")] public string Id { get; } Property Value string IsError Gets a value indicating whether the result is an Error. [JsonPropertyName(\"is_error\")] public bool IsError { get; set; } Property Value bool Raw The raw command or a batch that needs to be processed. [JsonPropertyName(\"raw\")] public string Raw { get; } Property Value string Result The result of the command or batch processing. [JsonPropertyName(\"result\")] public object? Result { get; set; } Property Value object Methods Equals(TerminalRequest?) public bool Equals(TerminalRequest? other) Parameters other TerminalRequest Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(TerminalRequest?, TerminalRequest?) public static bool operator ==(TerminalRequest? left, TerminalRequest? right) Parameters left TerminalRequest right TerminalRequest Returns bool operator !=(TerminalRequest?, TerminalRequest?) public static bool operator !=(TerminalRequest? left, TerminalRequest? right) Parameters left TerminalRequest right TerminalRequest Returns bool"
  },
  "api/OneImlx.Terminal.Shared.TerminalServices.html": {
    "href": "api/OneImlx.Terminal.Shared.TerminalServices.html",
    "title": "Class TerminalServices",
    "summary": "Class TerminalServices Namespace OneImlx.Terminal.Shared Assembly OneImlx.Terminal.Shared.dll Provides common terminal services. public static class TerminalServices Inheritance object TerminalServices Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DecodeLicenseContents(string) Decodes the license contents to be used by the license extractor. public static string DecodeLicenseContents(string encodedLicenseContents) Parameters encodedLicenseContents string Returns string DelimitBytes(byte[], byte) Delimits the byte array with the specified delimiter. public static byte[] DelimitBytes(byte[] bytes, byte delimiter) Parameters bytes byte[] The byte array to delimit. delimiter byte The delimiter byte. Returns byte[] EncodeLicenseContents(string) Encodes the license contents to set it in the licensing options. public static string EncodeLicenseContents(string licenseContents) Parameters licenseContents string Returns string IsOption(string, char, out bool) Determines if the given token is an option based on specified prefix. public static bool IsOption(string token, char optionPrefix, out bool isAlias) Parameters token string The token to check. optionPrefix char The terminal option prefix to use checking. isAlias bool Outputs whether the option is an alias. Returns bool True if the token is an option; otherwise, false."
  },
  "api/OneImlx.Terminal.Shared.html": {
    "href": "api/OneImlx.Terminal.Shared.html",
    "title": "Namespace OneImlx.Terminal.Shared",
    "summary": "Namespace OneImlx.Terminal.Shared Classes TerminalErrors The errors for the terminal framework. TerminalException The exception that represents a terminal error. TerminalIdentifiers The standard terminal identifiers. TerminalInputOutput Represents the terminal IO class that is sent to the terminal server as an ordered collection of TerminalRequest. TerminalRequest A terminal request with a unique identifier, raw input, result, and error status. TerminalServices Provides common terminal services."
  },
  "api/OneImlx.Terminal.Stores.ITerminalCommandStore.html": {
    "href": "api/OneImlx.Terminal.Stores.ITerminalCommandStore.html",
    "title": "Interface ITerminalCommandStore",
    "summary": "Interface ITerminalCommandStore Namespace OneImlx.Terminal.Stores Assembly OneImlx.Terminal.dll A store of CommandDescriptor. public interface ITerminalCommandStore Methods AllAsync() Returns all CommandDescriptor asynchronously. Task<CommandDescriptors> AllAsync() Returns Task<CommandDescriptors> A Dictionary<TKey, TValue> of command descriptors. TryAddAsync(string, CommandDescriptor) Adds a CommandDescriptor to the store. Task<bool> TryAddAsync(string id, CommandDescriptor commandDescriptor) Parameters id string The command id. commandDescriptor CommandDescriptor The command descriptor to add. Returns Task<bool> true if added, false otherwise. TryFindByIdAsync(string, out CommandDescriptor?) Attempts to finds a CommandDescriptor by its id asynchronously. Task<bool> TryFindByIdAsync(string id, out CommandDescriptor? commandDescriptor) Parameters id string The command id. commandDescriptor CommandDescriptor The CommandDescriptor if found, otherwise null Returns Task<bool> Remarks This method should never throw an exception. If the command is not found then return false."
  },
  "api/OneImlx.Terminal.Stores.TerminalInMemoryCommandStore.html": {
    "href": "api/OneImlx.Terminal.Stores.TerminalInMemoryCommandStore.html",
    "title": "Class TerminalInMemoryCommandStore",
    "summary": "Class TerminalInMemoryCommandStore Namespace OneImlx.Terminal.Stores Assembly OneImlx.Terminal.dll The default in-memory ITerminalCommandStore. public class TerminalInMemoryCommandStore : ITerminalCommandStore Inheritance object TerminalInMemoryCommandStore Implements ITerminalCommandStore Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalInMemoryCommandStore(ITerminalTextHandler, IEnumerable<CommandDescriptor>) Initialize a new instance. public TerminalInMemoryCommandStore(ITerminalTextHandler textHandler, IEnumerable<CommandDescriptor> commandDescriptors) Parameters textHandler ITerminalTextHandler commandDescriptors IEnumerable<CommandDescriptor> The command identities. Methods AllAsync() Returns all command descriptors asynchronously. public Task<CommandDescriptors> AllAsync() Returns Task<CommandDescriptors> A ReadOnlyDictionary<TKey, TValue> of command descriptors. TryAddAsync(string, CommandDescriptor) Adds a CommandDescriptor to the store. public Task<bool> TryAddAsync(string id, CommandDescriptor commandDescriptor) Parameters id string The command id. commandDescriptor CommandDescriptor The command descriptor to add. Returns Task<bool> true if added, false otherwise. TryFindByIdAsync(string, out CommandDescriptor?) Attempts to finds a CommandDescriptor by its id asynchronously. public Task<bool> TryFindByIdAsync(string id, out CommandDescriptor? commandDescriptor) Parameters id string The command id. commandDescriptor CommandDescriptor The CommandDescriptor if found, otherwise null Returns Task<bool> Remarks This method should never throw an exception. If the command is not found then return false."
  },
  "api/OneImlx.Terminal.Stores.html": {
    "href": "api/OneImlx.Terminal.Stores.html",
    "title": "Namespace OneImlx.Terminal.Stores",
    "summary": "Namespace OneImlx.Terminal.Stores Classes TerminalInMemoryCommandStore The default in-memory ITerminalCommandStore. Interfaces ITerminalCommandStore A store of CommandDescriptor."
  },
  "api/OneImlx.Test.FluentAssertions.AssemblyFluentAssertions.html": {
    "href": "api/OneImlx.Test.FluentAssertions.AssemblyFluentAssertions.html",
    "title": "Class AssemblyFluentAssertions",
    "summary": "Class AssemblyFluentAssertions Namespace OneImlx.Test.FluentAssertions Assembly OneImlx.Test.dll The fluent assertions for Assembly. public static class AssemblyFluentAssertions Inheritance object AssemblyFluentAssertions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HaveTypesInRootNamespace(AssemblyAssertions, string) Asserts that the assembly has a valid namespace based on its name. public static AndConstraint<AssemblyAssertions> HaveTypesInRootNamespace(this AssemblyAssertions assertions, string rootNamespace) Parameters assertions AssemblyAssertions Fluent Assertions wrapper for the assembly. rootNamespace string The expected root namespace. Returns AndConstraint<AssemblyAssertions> HaveTypesInValidLocations(AssemblyAssertions, IEnumerable<Type>?) Asserts that the assembly has all types in the valid files or locations. public static AndConstraint<AssemblyAssertions> HaveTypesInValidLocations(this AssemblyAssertions assertions, IEnumerable<Type>? excludeTypes = null) Parameters assertions AssemblyAssertions Fluent Assertions wrapper for the assembly. excludeTypes IEnumerable<Type> The types to exclude checks. Returns AndConstraint<AssemblyAssertions>"
  },
  "api/OneImlx.Test.FluentAssertions.ErrorExceptionFluentAssertions.html": {
    "href": "api/OneImlx.Test.FluentAssertions.ErrorExceptionFluentAssertions.html",
    "title": "Class ErrorExceptionFluentAssertions",
    "summary": "Class ErrorExceptionFluentAssertions Namespace OneImlx.Test.FluentAssertions Assembly OneImlx.Test.dll Extension methods for asserting expected properties on ErrorException instances. public static class ErrorExceptionFluentAssertions Inheritance object ErrorExceptionFluentAssertions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WithErrorCode<TException>(ExceptionAssertions<TException>, string, string, params object[]) Asserts that a thrown ErrorException contains a specific error code. public static ExceptionAssertions<TException> WithErrorCode<TException>(this ExceptionAssertions<TException> assertions, string expectedErrorCode, string because = \"\", params object[] becauseArgs) where TException : Exception Parameters assertions ExceptionAssertions<TException> The Fluent Assertions object which holds the exception. expectedErrorCode string The expected error code that the exception should contain. because string A formatted phrase as a reason for the expected error code. This parameter can be used to provide a more detailed explanation of the assertion, improving the readability and maintainability of test code. becauseArgs object[] An array of objects to format the because phrase. This allows for dynamic messages in the assertion failure output, making it clearer why the assertion failed. Returns ExceptionAssertions<TException> The original ExceptionAssertions<TException> object, allowing for method chaining with other assertions. Type Parameters TException The type of the exception that is expected to be thrown. This must be ErrorException or a derived class. WithErrorCode<TException>(Task<ExceptionAssertions<TException>>, string, string, params object[]) Asserts that a thrown ErrorException has a specific error code. This method should be used after an asynchronous operation that is expected to throw an exception. public static Task<ExceptionAssertions<TException>> WithErrorCode<TException>(this Task<ExceptionAssertions<TException>> task, string expectedErrorCode, string because = \"\", params object[] becauseArgs) where TException : ErrorException Parameters task Task<ExceptionAssertions<TException>> The task resulting from the asynchronous operation. expectedErrorCode string The expected error code. because string A formatted phrase explaining why the assertion should be satisfied. becauseArgs object[] Zero or more values to use for filling in any gaps in the because phrase. Returns Task<ExceptionAssertions<TException>> A continuation object for method chaining. Type Parameters TException WithErrorDescription<TException>(ExceptionAssertions<TException>, string, string, params object[]) Asserts that a thrown ErrorException contains a specific error description. public static ExceptionAssertions<TException> WithErrorDescription<TException>(this ExceptionAssertions<TException> assertions, string expectedErrorDescription, string because = \"\", params object[] becauseArgs) where TException : ErrorException Parameters assertions ExceptionAssertions<TException> The Fluent Assertions object which holds the exception. expectedErrorDescription string The expected error code that the exception should contain. because string A formatted phrase as a reason for the expected error code. This parameter can be used to provide a more detailed explanation of the assertion, improving the readability and maintainability of test code. becauseArgs object[] An array of objects to format the because phrase. This allows for dynamic messages in the assertion failure output, making it clearer why the assertion failed. Returns ExceptionAssertions<TException> The original ExceptionAssertions<TException> object, allowing for method chaining with other assertions. Type Parameters TException The type of the exception that is expected to be thrown. This must be ErrorException or a derived class. WithErrorDescription<TException>(Task<ExceptionAssertions<TException>>, string, string, params object[]) Asserts that a thrown ErrorException has a specific error description. This method should be used after an asynchronous operation that is expected to throw an exception. public static Task<ExceptionAssertions<TException>> WithErrorDescription<TException>(this Task<ExceptionAssertions<TException>> task, string expectedErrorDescription, string because = \"\", params object[] becauseArgs) where TException : ErrorException Parameters task Task<ExceptionAssertions<TException>> The task resulting from the asynchronous operation. expectedErrorDescription string The expected error description. because string A formatted phrase explaining why the assertion should be satisfied. becauseArgs object[] Zero or more values to use for filling in any gaps in the because phrase. Returns Task<ExceptionAssertions<TException>> A continuation object for method chaining. Type Parameters TException WithError<TException>(ExceptionAssertions<TException>, Error, string, params object[]) Asserts that a thrown ErrorException has a specific error description. This method should be used after an asynchronous operation that is expected to throw an exception. public static ExceptionAssertions<TException> WithError<TException>(this ExceptionAssertions<TException> exceptionAssertions, Error expectedError, string because = \"\", params object[] becauseArgs) where TException : ErrorException Parameters exceptionAssertions ExceptionAssertions<TException> The task operation. expectedError Error The expected error. because string A formatted phrase explaining why the assertion should be satisfied. becauseArgs object[] Zero or more values to use for filling in any gaps in the because phrase. Returns ExceptionAssertions<TException> A continuation object for method chaining. Type Parameters TException WithError<TException>(Task<ExceptionAssertions<TException>>, Error, string, params object[]) Asserts that a thrown ErrorException has a specific error description. This method should be used after an asynchronous operation that is expected to throw an exception. public static Task<ExceptionAssertions<TException>> WithError<TException>(this Task<ExceptionAssertions<TException>> task, Error expectedError, string because = \"\", params object[] becauseArgs) where TException : ErrorException Parameters task Task<ExceptionAssertions<TException>> The task resulting from the asynchronous operation. expectedError Error The expected error. because string A formatted phrase explaining why the assertion should be satisfied. becauseArgs object[] Zero or more values to use for filling in any gaps in the because phrase. Returns Task<ExceptionAssertions<TException>> A continuation object for method chaining. Type Parameters TException"
  },
  "api/OneImlx.Test.FluentAssertions.TypeFluentAssertions.html": {
    "href": "api/OneImlx.Test.FluentAssertions.TypeFluentAssertions.html",
    "title": "Class TypeFluentAssertions",
    "summary": "Class TypeFluentAssertions Namespace OneImlx.Test.FluentAssertions Assembly OneImlx.Test.dll The fluent assertion extension methods for Type. public static class TypeFluentAssertions Inheritance object TypeFluentAssertions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HaveConstantCount(TypeAssertions, int) Asserts that the specified type has the defined number of constants. public static AndConstraint<TypeAssertions> HaveConstantCount(this TypeAssertions assertions, int expectedCount) Parameters assertions TypeAssertions Fluent Assertions wrapper for the type. expectedCount int The expected number of constants. Returns AndConstraint<TypeAssertions> An AndConstraint object for method chaining. HaveJsonProperty(TypeAssertions, string, string) Asserts that a specified property of a type is decorated with the JsonPropertyNameAttribute having a specific name. public static AndConstraint<TypeAssertions> HaveJsonProperty(this TypeAssertions typeAssertions, string propertyName, string jsonPropertyName) Parameters typeAssertions TypeAssertions The TypeAssertions instance on which this method extends. propertyName string The name of the property to check. jsonPropertyName string The expected name value of the JsonPropertyNameAttribute. Returns AndConstraint<TypeAssertions> An AndConstraint for continuing the assertion chain. HavePropertyCount(TypeAssertions, int) Asserts that the specified type has the defined number of properties. public static AndConstraint<TypeAssertions> HavePropertyCount(this TypeAssertions assertions, int expectedCount) Parameters assertions TypeAssertions Fluent Assertions wrapper for the type. expectedCount int The expected number of properties. Returns AndConstraint<TypeAssertions> An AndConstraint object for method chaining."
  },
  "api/OneImlx.Test.FluentAssertions.html": {
    "href": "api/OneImlx.Test.FluentAssertions.html",
    "title": "Namespace OneImlx.Test.FluentAssertions",
    "summary": "Namespace OneImlx.Test.FluentAssertions Classes AssemblyFluentAssertions The fluent assertions for Assembly. ErrorExceptionFluentAssertions Extension methods for asserting expected properties on ErrorException instances. TypeFluentAssertions The fluent assertion extension methods for Type."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Classes",
    "summary": "Classes Explore our extensive collection of .NET classes, compatible with a variety of platforms and .NET-supported languages such as C#, F#, and Visual Basic."
  },
  "articles/announcements.html": {
    "href": "articles/announcements.html",
    "title": "Announcements",
    "summary": "Announcements Migrations OneImlx.Terminal The PerpetualIntelligence.Terminal Nuget package is obsolete in favor of OneImlx.Terminal. Please migrate your terminal applications to use OneImlx.Terminal Nuget package. Known Issues First-time Website Load Error Some users may experience an error when loading our websites for the first time, especially when using chromium browsers. This issue is influenced by network speed of your region. We are actively working with Microsoft to find a resolution as quickly as possible. Note: This issue does not impact our Nuget package usage, only the website. Impacted Sites Main Website Consumer Portal Workaround If you encounter this issue, try the following steps: Refresh the page or perform a hard reload in the same browser tab. You can use: F5 for a regular refresh. Ctrl + R or Cmd + R (on Mac) for a hard reload. Ctrl + Shift + R or Cmd + Shift + R (on Mac) for a hard reload. If the problem persists, please report it by creating an issue here."
  },
  "articles/buying/buyonmsappsource.html": {
    "href": "articles/buying/buyonmsappsource.html",
    "title": "",
    "summary": "Buy on Microsoft AppSource Requirements A Microsoft work or school account. If you don't have an account, follow the link to \"Sign up for a free account\" during the purchase process. A valid credit card in the country/region where you are purchasing the offer. Credit cards supported: Visa, Master Card, American Express, and Discover. Search the offer You can directly use the app source link or search offer name, for example \"Cross-Platform Terminal Framework\" from Perpetual Intelligence L.L.C. Purchase the offer You can start free with our Demo edition for educational, test, and evaluation purposes. For non-educational and production environments, you require a paid commercial license. Select Get it now Choose the plan Set the billing term Enter your billing address Enter your payment method (credit card information) Review your order Select Place order For more information go to Purchase software from AppSource | Microsoft Docs. Configure the purchase After your order is received, it can take several minutes to get confirmed. You will receive a link to configure your SaaS subscription on the page, as well as an email confirming the purchase and the link to complete the configuration. On the Order Confirmation page, select Configure or Configure SaaS account. Alternatively, you can use the Configuration link sent to you in the confirmation email. Complete provisioning and set up on our consumer portal. Note: This step is mandatory, and you must initiate it from your order confirmation page or the link sent you in the confirmation email. Activate your subscription Upon initiating the configure or activation, you will be redirected to our consumer portal to activate your subscription. Login with your Microsoft account Review your subscription details Select Activate"
  },
  "articles/buying/buyonmsazure.html": {
    "href": "articles/buying/buyonmsazure.html",
    "title": "",
    "summary": "Buy on Microsoft Azure Requirements An Azure user account with access to an appropriate Azure subscription. This subscription will be used for billing of your purchased SaaS offer. Permission to purchase from Azure Marketplace. Search the offer You can directly use the Microsoft Azure Portal. From your Azure portal, search the SaaS offer \"Cross-Platform Terminal Framework\" from Perpetual Intelligence L.L.C. Purchase the offer You can start free with our Demo edition for educational, test, and evaluation purposes. For non-educational and production environments, you require a paid commercial license. Choose the plan Select Subscribe You're redirected to the Basics tab, where you: Define which subscription you want to use for billing. Choose or create a resource group to hold the SaaS application. Type a name for the SaaS subscription, to easily identify it later. You can't change this name after you have purchased the SaaS subscription. Under Plan, you'll see the plan you selected in the product details page (PDP) Proceed to the Tags tab. Tags are key/value pairs that you can define. Continue to Review + Subscribe to go through the offer and plan details. Upon confirmation, select Subscribe. For more information go to Purchase a SaaS offer in the Azure portal | Microsoft Docs. Configure the purchase When you select Subscribe, you see the following message: Your SaaS subscription is in progress. This process takes a few minutes. Don't close the window until it's finished. After the subscription is completed, you'll receive an email requesting you to activate the new subscription. To complete the process and start using the SaaS offer, you're required to configure your subscription. In the SaaS offer in the online store, select Configure account now or in the email, select Configure now. You're redirected to the our consumer portal. Billing starts after your account is configured on our consumer fullfillment portal. Note: This step is mandatory, and you must initiate it from your Azure Portal or the link sent you in the confirmation email. If you don�t complete the configuration process within 30 days, the SaaS subscription is automatically cacelled. Activate your subscription Upon initiating the configure or activation, you will be redirected to our consumer portal to activate your subscription. Login with your Microsoft account Review your subscription details Select Activate"
  },
  "articles/buying/intro.html": {
    "href": "articles/buying/intro.html",
    "title": "Introduction",
    "summary": "Introduction Our products and services are available for purchase using the following channels. Microsoft We have partnered with Microsoft to provide a streamlined, integrated and secured buying experience. You will need a Microsoft account. If you don't have it, follow the link to \"Sign up for a free account\" during the purchase process. SaaS Offering We offer our products and services under SaaS (Software as a Service) model to our users, customers, and Internet service vendors (ISV) on the Microsoft Commercial Marketplace. You can purchase our SaaS offerings with Microsoft from one of the following online stores: Azure marketplace AppSource Azure Portal Getting Started Buy on Microsoft AppStore Buy on Microsoft Azure Support For billing and payment related queries, please contact Microsoft directly. Azure Marketplace | Microsoft Docs AppSource | Microsoft Docs Manage Azure Marketplace on Azure portal | Microsoft Docs Invoices for MOSP accounts | Microsoft Docs Billing and invoicing for Azure Marketplace customers - Microsoft marketplace | Microsoft Docs Understand your Azure external service charges | Microsoft Docs For technical support, please contact us here."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "",
    "summary": "Welcome to the conceptual and class documentation for Perpetual Intelligence® L.L.C.'s managed services, cross-platform frameworks, and developer tools. Browse our NuGet packages Browse our source code Browse our test apps"
  },
  "articles/marketplace/architectural_flow.html": {
    "href": "articles/marketplace/architectural_flow.html",
    "title": "",
    "summary": "flowchart TD A[\"\uD83D\uDDA5️ Customer Azure Portal\"] --> B[\"☁️ Create SaaS Resource\"] B --> C[\"\uD83D\uDEE0️ OneImlx.Terminal Framework\"] C --> D[\"\uD83C\uDF10 Consumer Portal (consumer.perpetualintelligence.com)\"] D --> F[\"\uD83D\uDCC4 Activate Subscription\"] F --> G[\"⚙️ Generate Application\"] G --> H[\"\uD83D\uDD11 Generate License\"] H --> H1[\"\uD83C\uDFE2 On-Prem License\"] H --> H2[\"☁️ Cloud License\"] H --> H3[\"\uD83E\uDDEA Demo License\"] G --> I[\"\uD83D\uDCDD Create Terminal Application\"] I --> J[\"\uD83D\uDCDA Review Documentation (docs.perpetualintelligence.com)\"] J --> K[\"\uD83D\uDEE1️ Configure License\"] K --> L[\"\uD83E\uDDEA Test Terminal Application\"] L --> M[\"\uD83D\uDE80 Deploy Terminal Application\"] M --> M1[\"\uD83C\uDF10 On-Cloud (Web Terminal)\"] M --> M2[\"\uD83C\uDFE2 On-Premise\"] M --> M3[\"\uD83D\uDCBB Desktop Servers\"] M1 --> M1A[\"\uD83D\uDD35 Azure Cloud\"] M1 --> M1B[\"\uD83D\uDFE0 AWS Cloud\"] M1 --> M1C[\"\uD83D\uDFE1 GCP Cloud\"]"
  },
  "articles/marketplace/intro.html": {
    "href": "articles/marketplace/intro.html",
    "title": "Introduction",
    "summary": "Introduction This section contains branding and marketing documentation in integrating the OneImlx.Terminal framework with marketplace platforms like Microsoft Azure Marketplace. Overview Access essential materials for marketplace integration and understand how to best communicate the unique features and capabilities of our terminal framework. For in-depth technical information, refer to our official product documentation. Feedback For issues or feature requests, please use our internal GitHub repository."
  },
  "articles/marketplace/microsoftmarketpacesupportingdoc.html": {
    "href": "articles/marketplace/microsoftmarketpacesupportingdoc.html",
    "title": "OneImlx.Terminal",
    "summary": "OneImlx.Terminal Microsoft Partner Open. Flexible. Secured. Cross-Platform. The most flexible cross-platform framework for building modern and secured terminal apps. OneImlx.Terminal is the cross-platform adaptable framework designed for crafting modern terminal applications. It simplifies the complexity of terminal infrastructure, enabling you to focus on building enterprise-grade terminal applications with Unicode support and extensive command hierarchies. Quick Links GitHub (https://github.com/perpetualintelligence/terminal) Documentation (https://docs.perpetualintelligence.com/articles/terminal/intro.html) Licensing (https://docs.perpetualintelligence.com/articles/terminal/licensing/intro.html) Demo License (https://docs.perpetualintelligence.com/articles/terminal/gs/demo.html) Test Applications (https://github.com/perpetualintelligence/terminal/tree/main/apps) Announcements (https://docs.perpetualintelligence.com/articles/announcements.html) NuGet Packages: Support For issues and support, please visit our GitHub Issues (https://github.com/perpetualintelligence/terminal/issues) page. Copyright © 2019-2025 Perpetual Intelligence® L.L.C. All Rights Reserved. Terms | Website | Consumer Portal | GitHub"
  },
  "articles/terminal/concepts/authentication.html": {
    "href": "articles/terminal/concepts/authentication.html",
    "title": "Authentication",
    "summary": "Authentication Introduction The OneImlx.Terminal.Authentication extends the OneImlx.Terminal framework to include authentication capabilities for your terminal applications. This package emphasizes a secure, zero-trust architecture and compliance with OAuth and OpenID Connect (OIDC) standards. Note: The OneImlx.Terminal.Authentication is a preview release. Features and implementations are subject to change. Currently we integrate with Microsoft's Authentication Library (MSAL) and supports the development of secure CLI, terminal applications and servers. In future we plan to support other IdP such as IdentityServer, Google Authentication etc. Key Components ITerminalBuilderExtensions.cs: Contains extension methods for ITerminalBuilder. These methods integrate authentication handlers and token acquisition services into the application service pipeline. MSAL IMsalTokenAcquisition.cs: Interface for token acquisition, standardizing the token fetching and refreshing process. MsalAccessTokenProviderDelegatingHandler.cs: Delegating handler that appends access tokens to HTTP requests to authenticate outgoing requests. MsalAuthenticationProviderDelegatingHandler.cs: Delegating handler that manages the providing of credentials for outgoing requests. MsalKiotaAuthProvider.cs: Implements the authentication provider interface for applications interacting with Microsoft Graph, using MSAL. MsalPublicClientTokenAcquisition.cs: Manages token acquisition for applications that require user interaction. MSAL Public Client Token Acquisition MsalPublicClientTokenAcquisition manages authentication tokens for applications requiring user interaction. The class supports desktop and mobile applications. The sequence diagram below illustrates the token acquisition process: sequenceDiagram participant A as Application participant B as MsalPublicClientTokenAcquisition participant C as Microsoft Identity Platform A->>B: Request Token B->>C: Authenticate C-->>B: Return Token B-->>A: Provide Token"
  },
  "articles/terminal/concepts/checkers.html": {
    "href": "articles/terminal/concepts/checkers.html",
    "title": "",
    "summary": ""
  },
  "articles/terminal/concepts/commands.html": {
    "href": "articles/terminal/concepts/commands.html",
    "title": "",
    "summary": "Command A command in the OneImlx.Terminal framework represents a specific action or set of actions performed by your application. Immutable for consistency and stability, commands can range from simple method invocations to complex operations across networks. They are central to any operation within your application or service. Command Descriptor The command descriptor defines a command's identity, including its arguments and options. It can be a root, group, sub-command, or a native command. This structure helps developers organize commands in a clear and intuitive way. Root Command A root command is the top terminal command. It can represent your organization, a product, or a service. For instance, GitHub CLI gh is an example of an organization root command. Microsoft however, uses dotnet as a driver application for the .NET CLI. Grouped Command A grouped command provides a context for a set of related sub-commands. For instance, Github CLI gh auth, auth is an example of a grouped command to authenticate gh and git with GitHub. Sub Command A subcommand is an individual executable command that performs a specific action. For instance, Github CLI gh auth login, login is an example of a subcommand that authenticates with GitHub host. dotnet build, build is a sub-command that builds a project and all of its dependencies. Native Command A native command is an individual executable command that performs a specific native action and it is not bound by the command hierarchy For instance, run \"mkdir hello\", runs the native OS command and creates a directory. clear, clears the terminal screen. Argument Arguments within the raw command string are provided directly as values, following a specific sequence when the command supports multiple arguments. Unlike options, which are defined as key-value pairs, arguments are enumerated plainly without keys. Example: copy \"/path/to/source\" \"/path/to/destination\" In this example for a copy command, the source and destination paths are the arguments provided directly in the required order. Option Options within the raw command string are specified as key-value pairs and are order-independent, providing flexibility in how commands are structured. Each option is identified by its key, and can also be referred to by its alias, if one is defined. Example: copy \"/path/to/source\" \"/path/to/destination\" --recursive -o \"/path/to/log\" Raw The raw command string represents the full command as entered by the user or passed by an application. Example: gh issue list gh issue create --label bug dotnet build --runtime ubuntu.18.04-x64 Parsed Command The parsed command encapsulates the parsed command, and optionally, the command hierarchy. Data Mapper The framework provides a data type mapping interface for converting configuration options into their correct data types, crucial for executing commands. The default DataTypeMapper<TValue> supports common data types such as integers, strings, and dates. Developers can also create custom mappers to handle specific or complex data types, enhancing the framework's flexibility and command processing precision. Parsing & Routing stateDiagram direction LR state \"Command Parsing & Routing\" as CommandRouting [*] --> CommandRouting state CommandRouting { direction LR Router --> Parser Parser --> Handler Handler --> Checker Checker --> Runner } CommandRouting --> [*] Command Router The command router orchestrates the workflow of command processing. It routes raw command string through several steps such as parsing the command string to understand its structure, extracting any arguments and options provided, checking for licensing requirements, and validating the integrity of the command. Once these steps are completed, the command router then automatically invokes the corresponding command runner to execute the command. This entire process is handled seamlessly by the command router. Command Parser The command parser in the OneImlx.Terminal framework is the default implementation responsible for interpreting raw command routes. It utilizes an @OneImlx.Terminal.Commands.Parsers.ICommandRouteParser to parse routes asynchronously, generating a @OneImlx.Terminal.Commands.Parsers.CommandParserResult containing the parsed command information. This default behavior ensures reliable and consistent command parsing within the framework. Developers have the option to customize the parsing logic to suit their specific needs, enabling them to extend or modify the parsing process for their terminal applications. Command Handler The command handler manages the validation and execution of commands within a terminal application. It oversees essential tasks such as license verification, command checking, command execution, and event management, ensuring efficient processing of commands. With customizable configurations and built-in mechanisms for command validation and execution, the command handler empowers developers to seamlessly integrate command-driven functionalities into their applications. Command Checker The command checker in the OneImlx.Terminal framework ensures that commands are valid before they're executed. It checks things like whether required arguments and options are provided, ensuring commands follow the defined rules. This helps make command processing more reliable and error-free. The default CommandChecker provided by the framework handles basic checks such as verifying the presence of required arguments and options, detecting obsolete attributes, and ensuring disabled elements are not used. Developers have the option to implement custom command checkers either for the entire terminal application or for individual commands, allowing for tailored validation logic to suit specific requirements. Command Runner The command runner is where developers implement how commands are executed. It operates asynchronously to handle commands that might take a while to process. The framework routes each parsed command to its specific runner, helping to organize and manage the command execution logic within your application."
  },
  "articles/terminal/concepts/grpc.html": {
    "href": "articles/terminal/concepts/grpc.html",
    "title": "gRPC Router",
    "summary": "gRPC Router The TerminalGrpcRouter enhances .NET applications by integrating gRPC, a modern open source high performance Remote Procedure Call (RPC) framework, that enables client and server applications to communicate transparently, and simplifies the building of connected systems. Introduction to gRPC in .NET gRPC is a language-agnostic, high-performance RPC framework, which leverages HTTP/2 for transport, Protocol Buffers as the interface description language, and provides features like authentication, load-balancing, and bidirectional streaming. Why TerminalGrpcRouter? While gRPC inherently simplifies network communication through its protocol, setting up and managing gRPC services in .NET applications requires boilerplate code and setup. The TerminalGrpcRouter aims to abstract these complexities, providing: Simplified Service Definition and Routing: Streamlines the process of defining gRPC services and methods, allowing developers to focus on implementing business logic. Integrated Server Management: Automates the configuration and lifecycle management of the gRPC server, reducing manual setup and configuration efforts. Enhanced Scalability and Performance: Utilizes gRPC's underlying HTTP/2 protocol for improved performance and supports the development of scalable microservices architectures. Unified Error Handling: Offers a centralized approach to manage exceptions and errors that occur during RPC execution, ensuring consistent error responses to clients. Key Concepts gRPC Service Hosting Leverages ASP.NET Core's built-in support for gRPC, enabling seamless hosting of gRPC services within the familiar .NET ecosystem, including support for Kestrel and IIS. Bidirectional Streaming Supports gRPC's streaming capabilities, including server streaming, client streaming, and bidirectional streaming, allowing for the development of highly interactive services. Middleware Integration Integrates with ASP.NET Core middleware, providing the ability to add cross-cutting functionality such as logging, authentication, and monitoring to gRPC services. Cross-Language Compatibility Facilitates the creation of services that can be consumed by clients written in different programming languages, promoting interoperability in diverse technology environments. Use Cases Microservices Architecture: Ideal for building microservices that communicate over lightweight, efficient RPC, supporting polyglot programming environments. Real-Time Data Services: Suitable for services requiring real-time data exchange, such as live updates or streaming data feeds, leveraging gRPC's streaming capabilities. High-Performance APIs: Optimizes API performance for scenarios demanding low-latency and high-throughput communication, such as gaming backends or financial trading platforms. Getting Started To utilize the TerminalGrpcRouter, define your gRPC services using Protocol Buffers, implement service methods with your business logic, and configure the router to manage service routing and server lifecycle. The router simplifies the exposure of these services over the network, abstracting the intricacies of server setup and request handling. Conclusion By abstracting the complexities of gRPC integration, the TerminalGrpcRouter empowers developers to leverage the full capabilities of gRPC in their .NET"
  },
  "articles/terminal/concepts/http.html": {
    "href": "articles/terminal/concepts/http.html",
    "title": "HTTP Router",
    "summary": "HTTP Router The TerminalHttpRouter is designed to facilitate HTTP-based communication within .NET applications, offering a simplified abstraction for handling HTTP requests and responses. This router abstracts the complexities of HTTP server setup and request routing, enabling developers to focus on business logic and application functionality. Why TerminalHttpRouter? HTTP is the backbone of web and network communication, enabling structured request-response messaging. While powerful, setting up and managing HTTP communications can be complex, involving detailed request parsing, connection management, and response formatting. The TerminalHttpRouter simplifies this by providing: Streamlined HTTP Server Management: Automates the configuration and management of the HTTP server, allowing immediate handling of HTTP requests with minimal setup. Request Routing: Empowers developers to define routing logic for incoming HTTP requests, directing them to appropriate handlers based on URL paths, query parameters, or other request attributes. Asynchronous Processing: Integrates with .NET's asynchronous programming model to handle requests efficiently, improving scalability and performance for high-traffic applications. Middleware Integration: Supports the inclusion of middleware components to handle cross-cutting concerns such as authentication, logging, and error handling, enhancing modularity and reusability. Key Concepts HTTP Request Handling The router provides a high-level interface for processing incoming HTTP requests, encapsulating the parsing of request data and the generation of HTTP responses. Application Routing Logic Developers can easily configure application-specific routing logic, defining how different paths or types of requests are processed, simplifying the development of RESTful APIs or web services. Scalable and Responsive Designed to handle a high volume of concurrent HTTP requests, ensuring that applications remain responsive and scalable, capable of growing with user demand. Extensible Architecture The architecture of the TerminalHttpRouter allows for easy extension with custom functionality, whether by integrating existing middleware or developing application-specific processing logic. Use Cases Web APIs: Ideal for building RESTful APIs that serve as the backend for web applications, mobile apps, or other services requiring HTTP endpoints. Microservices: Facilitates the development of microservices architectures, with each microservice exposing its functionality over HTTP. Application Backends: Serves as the communication layer for application backends, handling requests from web clients, external systems, or other networked services. Getting Started Integrating the TerminalHttpRouter into your .NET application involves defining the router's configuration, such as port numbers and SSL certificates if needed, and implementing request handlers or controllers that contain the business logic for processing various types of HTTP requests. Conclusion By abstracting the complexities of HTTP communication and providing a structured approach to request handling and response generation, the TerminalHttpRouter enables developers to rapidly develop and deploy HTTP-based services and applications, with an emphasis on clean architecture, maintainability, and scalability."
  },
  "articles/terminal/concepts/integration.html": {
    "href": "articles/terminal/concepts/integration.html",
    "title": "Integration",
    "summary": "Integration The OneImlx.Terminal framework is designed to support the integration of command sources that can be either local or remote, enabling dynamic loading of commands at runtime. This facilitates the update and expansion of terminal capabilities without restarting the application, providing operational flexibility and adaptability. graph LR; source1(Local Command Source) -- Commands --> server(Terminal Server) source2(Remote Command Source) -- Commands --> server sourceN(Custom Command Source) -- Commands --> server server --> loader(Published Assembly Loader) loader --> checker(Command Source Checker) checker --> terminal(Terminal Router) terminal --> runner1(Command Runner 1) terminal --> runner2(Command Runner 2) terminal --> runnerN(Command Runner N) %% Adding a note to the Terminal Server oneimlxnote[OneImlx.Terminal Framework] --> server classDef source fill:#f9f,stroke:#333,stroke-width:2px; classDef server fill:#bbf,stroke:#333,stroke-width:4px; classDef utility fill:#fbb,stroke:#333,stroke-width:2px; classDef runner fill:#dfd,stroke:#333,stroke-width:2px; classDef note fill:#ffffcc,stroke:#333,stroke-width:1px,stroke-dasharray: 5, 5; class source1,source2,sourceN source; class server server; class loader,checker,terminal utility; class runner1,runner2,runnerN runner; class oneimlxnote note; Terminal Command Source The @OneImlx.Terminal.Integration.ITerminalCommandSource`1 is a local or remote provider of terminal commands. The framework includes an assembly loader command source by default, which dynamically loads assemblies containing command runners. This integration allows seamless addition of both first-party and third-party command sources, significantly enhancing the terminal's responsiveness to new operational demands. Terminal Command Source Checker The @OneImlx.Terminal.Integration.ITerminalCommandSourceChecker`1 checks the integrity and authenticity of the command source before loading. Developers must implement robust checking mechanisms to mitigate risks such as code injection or execution of untrusted code. Published Command Source The default @OneImlx.Terminal.Integration.PublishedCommandSource loads terminal commands from assemblies located in published directories. This method handles both local and network-based locations. This setup allows updates or extensions to terminal commands without altering the core application. Note: Only trusted sources should provide dynamically loaded assemblies. Published Assembly Loader The defualt @OneImlx.Terminal.Integration.PublishedAssemblyLoader simplifies the process of loading command source assemblies from specific contexts. It ensures each assembly is loaded only once, preventing duplication and reducing potential conflicts between different versions of the same assembly or its dependencies. However, this basic implementation does not address complex scenarios such as managing version conflicts or dependencies across different dependency trees. For applications with more sophisticated needs in conflict resolution and dependency management, developers are encouraged to design a custom loader that better fits their specific requirements."
  },
  "articles/terminal/concepts/intro.html": {
    "href": "articles/terminal/concepts/intro.html",
    "title": "Concepts",
    "summary": "Concepts This document introduces all the technical concepts within the OneImlx.Terminal terminal framework. It covers fundamental components and their roles in command parsing, routing and execution. stateDiagram classDef Movement font-style:italic; classDef Event fill:#f9f9f9,stroke:#333,stroke-width:1px,font-style:italic,fill:#e6e6e6 Terminal : Terminal Application HostedService : Terminal Hosted Service TerminalRouter : Terminal Router CommandRouter : Command Router PreRouteEvent : Pre-Route CommandParser : Command Parser RouteParser : Parse Route CommandHandler : Command Handler CheckLicense : Check License Limits CommandChecker : Command Checker PreCheckEvent : Pre-Check CheckCommand : Check Command PostCheckEvent : Post-Check CommandRunner : Command Runner PreRunEvent : Pre-Run RunCommand : Run Command ProcessResult : Process Run Result PostRunEvent : Post-Run PostRouteEvent : Post-Route Cancelled : Terminal Router Cancelled ? [*] --> Terminal Terminal --> HostedService HostedService --> TerminalRouter TerminalRouter --> CommandRouter state CommandRouter { PreRouteEvent --> CommandParser state CommandParser { RouteParser } CommandParser --> CommandHandler state CommandHandler { CheckLicense --> CommandChecker state CommandChecker{ PreCheckEvent --> CheckCommand CheckCommand --> PostCheckEvent } CommandChecker --> CommandRunner state CommandRunner { PreRunEvent --> RunCommand RunCommand --> ProcessResult ProcessResult --> PostRunEvent } } CommandHandler --> PostRouteEvent } CommandRouter --> Cancelled Cancelled --> TerminalRouter : NO Cancelled --> [*] The flow initiates at the Terminal, representing the entry point of the application. Commands are then passed to the HostedService, which handles the hosting of the application, and subsequently to the TerminalRouter. This router is crucial in directing commands to their respective destinations. The CommandRouter then takes over, triggering the Pre-Route Event before parsing the command through CommandParser. Here, the RouteParser breaks down the command route into actionable segments. Within the CommandRouter, the CommandHandler manages the execution logic. It involves steps like CheckLicense for verifying command's compliance with licensing requirements, and CommandChecker, where events like Pre-Check and Post-Check ensure command integrity. Once verified, CommandRunner executes the command, encapsulating stages from Pre-Run to Post-Run, processing the command result. Eventually, the flow reaches Post-Route Event, signifying the end of the command's journey, unless the router is Cancelled, in which case, it loops back to the TerminalRouter or ends the process."
  },
  "articles/terminal/concepts/pulsar.html": {
    "href": "articles/terminal/concepts/pulsar.html",
    "title": "Apache Pulsar Router",
    "summary": "Apache Pulsar Router The TerminalPulsarRouter streamlines the integration of Apache Pulsar with .NET applications, offering a simplified abstraction layer for both publishing and subscribing to messages in a distributed messaging and streaming platform. Understanding Apache Pulsar Apache Pulsar is a cloud-native, distributed messaging and streaming platform designed for high-performance, scalability, and durability. It supports complex routing, replication, and tiered storage, making it an excellent choice for real-time applications and data pipelines. Why TerminalPulsarRouter? Integrating Apache Pulsar with .NET applications involves managing connections, message serialization/deserialization, and error handling, which can become complex. The TerminalPulsarRouter aims to: Simplify Pulsar Client Management: Automates setup and teardown of Pulsar producers and consumers, encapsulating complexity. Enhance Message Handling: Provides a unified approach to message publishing and subscription, including batch processing and asynchronous acknowledgments. Streamline Error Handling and Retries: Implements robust error handling and retry logic, ensuring message delivery and processing resilience. Enable Flexible Serialization: Supports customizable serialization and deserialization to handle complex message types seamlessly. Core Components Message Producers Facilitates the publishing of messages to Pulsar topics with support for various messaging patterns, including fire-and-forget, async publishing, and message batching. Message Consumers Enables subscription to topics with efficient message consumption, supporting exclusive, shared, and failover subscription modes for diverse application needs. Serialization and Deserialization Integrates serialization and deserialization mechanisms, allowing for flexible data representation and ensuring compatibility across different systems and languages. Error Handling and Logging Provides built-in error handling and logging capabilities, enhancing reliability and observability in message-driven applications. Use Cases Real-Time Data Processing: Ideal for applications requiring real-time data ingestion and processing, such as analytics pipelines or monitoring systems. Event-Driven Architectures: Suits event-driven microservices architectures, facilitating loose coupling and scalable communication among services. Distributed Logging: Can be used for distributed logging systems, aggregating logs from various sources for centralized processing and analysis. IoT Data Management: Efficiently manages IoT device messages, supporting high-throughput data collection and real-time decision-making. Getting Started Implementing the TerminalPulsarRouter involves defining configuration parameters for the Pulsar cluster, specifying serialization for message types, and implementing custom logic for message handling. The router abstracts the details of connecting to Pulsar, managing sessions, and error handling, allowing developers to focus on application logic. Conclusion The TerminalPulsarRouter offers .NET developers a powerful tool to integrate with Apache Pulsar, simplifying message publishing and consumption through an intuitive and flexible API. By abstracting the complexities of Pulsar client management, it enables the development of scalable, reliable, and efficient messaging solutions, driving modern"
  },
  "articles/terminal/concepts/routers.html": {
    "href": "articles/terminal/concepts/routers.html",
    "title": "Terminal Routers",
    "summary": "Terminal Routers The OneImx.Terminal framework uses routers to direct commands from users or services. This article summarizes the terminal routers designed to abstract and simplify the integration of various communication protocols within .NET for OneImx.Terminal applications. Terminal Console Router The framework supports TerminalConsoleRouter that allows end-users to manually enter commands into your terminal application. It ensures that commands entered by the user are routed to the appropriate command runners for execution. Note: In this context, console refers to an abstraction of console routing, meaning the console can be a standard system console, a desktop application, or a web-based console. // Setup the terminal context and run the router indefinitely as a console. TerminalStartContext terminalStartContext = new(TerminalStartMode.Console, terminalTokenSource.Token, commandTokenSource.Token); TerminalConsoleRouterContext consoleRouterContext = new(terminalStartContext); await host.RunTerminalRouterAsync<TerminalConsoleRouter, TerminalConsoleRouterContext>(consoleRouterContext); Console-based routing is particularly useful in environments where manual input and immediate command execution are necessary, offering a direct interface for administrators or users to interact with the system. graph LR; user(User) -- Manual --> server(Terminal Server) server --> router(Terminal Router) router --> crouter(Command Router) crouter --> crunner1(Runner 1) crouter --> crunner2(Runner 2) crouter --> crunnerN(Runner N) %% Adding a note to the Terminal Server oneimlxnote[OneImx.Terminal Framework] --> server classDef user fill:#f9f,stroke:#333,stroke-width:2px; classDef server fill:#bbf,stroke:#333,stroke-width:4px; classDef router fill:#fbb,stroke:#333,stroke-width:2px; classDef service fill:#dfd,stroke:#333,stroke-width:2px; classDef note fill:#ffffcc,stroke:#333,stroke-width:1px,stroke-dasharray: 5, 5; class user user; class server server; class router,crouter router; class crunner1,crunner2,crunnerN service; class oneimlxnote note; Terminal TCP Router The framework supports TerminalTcpRouter that allows terminal applications to function as servers, capable of receiving commands over TCP/IP from multiple clients concurrently. It ensures that commands are efficiently routed to the appropriate terminal runners, enabling effective command processing and response handling back to clients.\" // Setup the terminal context and run the router as a TCP server indefinitely TerminalStartContext terminalStartContext = new(TerminalStartMode.Tcp, terminalTokenSource.Token, commandTokenSource.Token); TerminalConsoleRouterContext consoleRouterContext = new(terminalStartContext); await host.RunTerminalRouterAsync<TerminalTcpRouter, TerminalTcpRouterContext>(consoleRouterContext); The standard .NET TCP/IP classes provide the infrastructure for reliable delivery of streams of data between applications. This makes it suitable for applications that require robust communication capabilities, such as those involving hardware interfaces, client-server or service-service architectures. graph LR; client1(Client 1) -- TCP/IP --> server(Terminal Server) client2(Client 2) -- TCP/IP --> server client3(Client 3) -- TCP/IP --> server client4(Client N) -- TCP/IP --> server server --> router(Terminal Router) router --> crouter(Command Router) crouter --> crunner1(Runner 1) crouter --> crunner2(Runner 2) crouter --> crunnerN(Runner N) %% Adding a note to the Terminal Server oneimlxnote[OneImx.Terminal Framework] --> server classDef client fill:#f9f,stroke:#333,stroke-width:2px; classDef server fill:#bbf,stroke:#333,stroke-width:4px; classDef router fill:#fbb,stroke:#333,stroke-width:2px; classDef service fill:#dfd,stroke:#333,stroke-width:2px; classDef note fill:#ffffcc,stroke:#333,stroke-width:1px,stroke-dasharray: 5, 5; class client1,client2,client3,client4 client; class server server; class router,crouter router; class crunner1,crunner2,crunnerN service; class oneimlxnote note; Terminal UDP Router The framework supports TerminalUdpRouter that allows terminal applications to function as servers, capable of receiving commands over UDP from multiple clients concurrently. It ensures that commands are efficiently routed to the appropriate terminal runners. // Setup the terminal context and run the router as a UDP server indefinitely TerminalStartContext terminalStartContext = new(TerminalStartMode.Udp, terminalTokenSource.Token, commandTokenSource.Token); TerminalConsoleRouterContext consoleRouterContext = new(terminalStartContext); await host.RunTerminalRouterAsync<TerminalUdpRouter, TerminalUdpRouterContext>(consoleRouterContext); The standard .NET UDP classes provide the infrastructure for datagram-based communications that do not require a connection before data is sent. This makes it suitable for applications that require lightweight, low-latency communication, such as real-time data feeds or multimedia streaming. graph LR; client1(Client 1) -- UDP --> server(Terminal Server) client2(Client 2) -- UDP --> server client3(Client 3) -- UDP --> server client4(Client N) -- UDP --> server server --> router(Terminal Router) router --> crouter(Command Router) crouter --> crunner1(Runner 1) crouter --> crunner2(Runner 2) crouter --> crunnerN(Runner N) %% Adding a note to the Terminal Server oneimlxnote[OneImx.Terminal Framework] --> server classDef client fill:#f9f,stroke:#333,stroke-width:2px; classDef server fill:#bbf,stroke:#333,stroke-width:4px; classDef router fill:#fbb,stroke:#333,stroke-width:2px; classDef service fill:#dfd,stroke:#333,stroke-width:2px; classDef note fill:#ffffcc,stroke:#333,stroke-width:1px,stroke-dasharray: 5, 5; class client1,client2,client3,client4 client; class server server; class router,crouter router; class crunner1,crunner2,crunnerN service; class oneimlxnote note; Terminal Custom Router The OneImx.Terminal framework also supports custom routers via TerminalCustomRouter, allowing for specialized routing logic that may not be covered by standard TCP, UDP, or console routers. This flexibility supports unique application-specific routing needs that require customized behavior beyond standard protocol handling. // Setup the terminal context and run a custom router based on specific requirements TerminalStartContext terminalStartContext = new(TerminalStartMode.Custom, terminalTokenSource.Token, commandTokenSource.Token); TerminalCustomRouterContext customRouterContext = new(terminalStartContext); await host.RunTerminalRouterAsync<MyTerminalCustomRouter, MyTerminalCustomRouterContext>(customRouterContext); Mixed Mode Terminal Router The framework support a mixed mode terminal router that allows developers to create terminals with multiple operational modes. Using startup arguments, terminals can be configured to operate in console mode for user interactions, as a TCP/UDP server for handling network commands, or a custom router tailored to specific needs. Developers can pass the desired operational mode using startup arguments during the application launch. The Main method of the terminal application then processes these arguments to initiate the appropriate mode. For instance, a terminal application can be configured to start in console mode directly by a user to execute commands manually. Alternatively, when started in TCP or UDP mode, it enables the application to accept commands remotely from other services or networked clients, effectively serving as a backend server. Important: Once the terminal router is configured at startup, it cannot be changed during runtime. graph TD; A[Start Terminal] --> B{Check Mode} B -->|Console| C[Console Router] B -->|TCP| D[TCP Router] B -->|UDP| E[UDP Router] B -->|Custom| F[Custom Router] classDef default fill:#f9f,stroke:#333,stroke-width:2px; classDef user fill:#ffc,stroke:#333,stroke-width:2px; classDef server fill:#bbf,stroke:#333,stroke-width:4px; classDef router fill:#fbb,stroke:#333,stroke-width:2px; classDef service fill:#dfd,stroke:#333,stroke-width:2px; class A user; class B server; class C,D,E,F router; Selecting a Router Choosing the right router depends on your application's specific communication needs, including factors such as reliability, speed, bidirectional communication, and message brokering capabilities. Each router in the OneImx.Terminal framework abstracts the underlying protocol complexities, providing a simplified interface for developers to integrate network communication features seamlessly into their applications."
  },
  "articles/terminal/concepts/tcp.html": {
    "href": "articles/terminal/concepts/tcp.html",
    "title": "TCP/IP Router",
    "summary": "TCP/IP Router The TerminalTcpRouter provides a streamlined approach to building TCP/IP server applications in .NET. This component abstracts the complexities of network programming, allowing developers to focus on application logic rather than the nuances of network communication. Why Use TerminalTcpRouter? TCP/IP communications are foundational for networked applications but can be complex to implement directly using sockets and low-level protocols. The TerminalTcpRouter simplifies this by offering: Abstraction over TCP/IP Sockets: Encapsulates the details of socket management, connection handling, and data transmission. Built-In Concurrency and Scalability: Automatically manages multiple client connections efficiently, leveraging .NET's asynchronous programming model. Integration with .NET Ecosystem: Seamlessly works within the .NET ecosystem, allowing for easy integration with other .NET services and applications. Key Concepts TCP Server Creation The router enables the creation of a TCP server that listens on a specified port for incoming connections. It abstracts the setup, binding, and listening phases, reducing the setup to a few configuration parameters. Connection Management Manages client connections, including accepting new connections, reading data, and sending responses. It handles these tasks asynchronously, optimizing resource use and supporting high volumes of concurrent connections. Command Processing At its core, the router is designed to process commands or requests sent over TCP connections. Developers can define custom logic to interpret and respond to these commands, facilitating a wide range of TCP-based applications. Graceful Shutdown Supports clean and orderly shutdown of the server, ensuring that all active connections are properly closed and resources are released, minimizing the risk of data loss or corruption. Use Cases Microservices Architecture: Ideal for microservices that communicate over TCP, providing a reliable and scalable communication channel. Real-Time Data Streaming: Can be used to build applications that require real-time data streaming or processing, such as financial tickers or live monitoring systems. IoT Device Communication: Suitable for backend systems that need to manage connections with multiple IoT devices, allowing for efficient data collection and device control. Getting Started To start using the TerminalTcpRouter, define your TCP server's configuration, including the port to listen on and any specific command processing logic. Initiate the router with these configurations and start listening for incoming connections. The router takes care of the rest, from managing client connections to executing your custom command processing logic. Conclusion The TerminalTcpRouter is a powerful tool for .NET developers, simplifying the creation and management of TCP server applications. By abstracting the complexities of direct network programming, it allows developers to focus on what matters most: building the logic and features of their applications."
  },
  "articles/terminal/concepts/terminal.html": {
    "href": "articles/terminal/concepts/terminal.html",
    "title": "",
    "summary": "Terminal In OneImlx.Terminal framework, a terminal is a Unicode text-based construct designed for executing commands, automating workflows, and processing scripts. Each terminal session is uniquely identified, allowing for clear differentiation and management of multiple instances. A terminal is not just a console; it's a logical construct designed to execute commands and automate tasks. It can be implemented as a console, server, browser-based interface, or any other UX format, making it adaptable for various development environments. Hosting The OneImlx.Terminal framework uses extension methods like <AddTerminal*> or <Add*> for easy setup and terminal customization. It deploys dependency injection at its core to setup and run the terminal host. Developers can utilize the TerminalHostedService to configure services, customize terminal behavior, and ensure smooth execution throughout the terminal's lifecycle. For details refer services. Configuration The OneImlx.Terminal supports flexible configuration via Dependency Injection and the options pattern, enabling customization of terminal behaviors and settings through code, or configuration files. For comprehensive setup instructions, see the configuration documentation. Router Terminal router orchestrates the execution within the application context. It starts the host and runs indefinitely until the application stops or a cancellation token is received. Developers can implement the ITerminalRouting<TContext> interface and define the RunAsync method to establish the custom routing logic. The framework provides the following ready-to-use router implementations: TerminalConsoleRouter: Suitable for standalone terminal or CLI applications. TerminalTcpRouter: Designed for server terminals managing commands from multiple clients concurrently over TCP/IP. TerminalUdpRouter: Designed for server terminals managing commands from multiple clients concurrently over UDP. TerminalCustomRouter: Allows for custom router strategies. Note: Future versions of the framework will introduce gRPC, HTTP and Apache Pulsar terminal routers. Driver In native console environments, a terminal may act as a driver, allowing for direct command execution, similar to dotnet.exe in the .NET CLI. Consider executing the command dotnet build test.csproj --configuration Release directly from the native command prompt: Identify Executable and Root Command: The framework recognizes dotnet.exe as the driver and dotnet as the root command. Pass Command Line Arguments: The entire string build test.csproj --configuration Release is passed as command line arguments. Parse Arguments and Options: The framework parses these arguments and options. Execute Command: Ultimately, the build command is executed with the specified project file and configuration. To enable this functionality, configure the DriverOptions in your terminal settings. Utilize the Enabled property to toggle the driver functionality on or off. Note: This feature is an enhancement and being tracked by github issue. Events Events play an important role in extending and customizing the behavior of the terminal to meet specific application requirements. Events are hooks that allow developers to inject custom logic and asynchronous operations at various stages of command routing. BeforeCommandRouteAsync: Called before the command routing process begins. AfterCommandRouteAsync: Called after the command routing process completes. BeforeCommandRunAsync: Called before a command starts execution. AfterCommandRunAsync: Called after a command finishes execution. BeforeCommandCheckAsync: Called before a command's integrity check. AfterCommandCheckAsync: Called after a command's integrity check completes. Integration The OneImlx.Terminal framework enables developers to seamlessly integrate both first-party and third-party command sources. A command source is a provider of terminal commands. It can be a local or remote source. By default, the framework supports assembly loader command source that dynamically loads DLLs containing command runners. Stores The OneImlx.Terminal framework manages CommandDescriptor instances through stores. The ITerminalCommandStore interface provides methods for adding, finding, and retrieving command descriptors asynchronously. Developers can use the default TerminalInMemoryCommandStore or create custom store implementations to meet specific requirements. Internationalization The OneImlx.Terminal framework supports internationalization with ITerminalTextHandler, offering Unicode and ASCII encoding options. This interface handles text comparisons and encoding, simplifying the development of applications that require multilingual support. See the @OneImlx.Terminal.Runtime.TerminalUnicodeTextHandler and @OneImlx.Terminal.Runtime.TerminalAsciiTextHandler for more details. Exception Handling The OneImlx.Terminal provides exception handling through the ITerminalExceptionHandler. The default implementation @OneImlx.Terminal.Runtime.TerminalExceptionHandler logs the exception based on severity. Developers can implement the interface to create custom exception handlers, enabling tailored error management and logging in their applications. Console Abstraction The OneImlx.Terminal framework provides console abstraction ITerminalConsole. It enables developers to create custom console implementations such as web-based or multi-platform consoles. The framework offers default implementations TerminalSystemConsole for standard .NET System Console, and TerminalNoConsole for non-interactive console."
  },
  "articles/terminal/concepts/udp.html": {
    "href": "articles/terminal/concepts/udp.html",
    "title": "UDP Router",
    "summary": "UDP Router The TerminalUdpRouter streamlines the integration of UDP communication in .NET applications, abstracting the complexities associated with low-level UDP socket management. This router enables efficient handling of datagrams, facilitating both one-to-many and one-to-one communication patterns inherent in UDP. Why Use TerminalUdpRouter? UDP communication is essential for scenarios requiring fast, connectionless transmission of data. However, managing UDP sockets directly can be cumbersome due to the non-guaranteed delivery and the absence of built-in connection management. The TerminalUdpRouter addresses these challenges by providing: Simplified Datagram Management: It abstracts the complexities of sending and receiving UDP datagrams, allowing developers to focus on application-specific logic. Support for High-Volume, Low-Latency Applications: Ideal for applications that benefit from the lightweight, connectionless nature of UDP, such as real-time gaming or video streaming. Integration with .NET Asynchronous Patterns: Leverages .NET's asynchronous programming models to enhance scalability and responsiveness of applications utilizing UDP communication. Key Concepts Datagram Processing Enables the processing of incoming UDP datagrams through a high-level API, simplifying the reception and response logic within applications. Connectionless Communication Facilitates connectionless communication patterns, making it well-suited for broadcasting messages to multiple recipients or for scenarios where an established connection is not required or practical. Lightweight Protocol Support UDP's minimal protocol overhead allows for efficient transmission of small amounts of data, which is particularly beneficial in constrained environments or applications sensitive to latency. Reliability and Extension Points While UDP itself does not guarantee delivery, the TerminalUdpRouter provides mechanisms to integrate custom reliability or acknowledgment schemes if needed by the application. Use Cases Real-Time Services: Supports applications requiring minimal transmission latency, such as multiplayer online games, VoIP, or live video streaming services. Stateless Communication: Ideal for sending telemetry data, logging information, or metrics where receiving every single datagram is not critical. Broadcast and Multicast Applications: Enables services that need to broadcast or multicast messages to multiple clients efficiently, such as service discovery protocols or live event notifications. Getting Started Incorporating the TerminalUdpRouter into your application involves configuring it with the necessary endpoint information and defining how datagrams should be processed. Once set up, the router can begin listening for and processing incoming UDP datagrams according to the application's needs. Conclusion The TerminalUdpRouter offers a powerful abstraction for utilizing UDP in .NET applications, combining the efficiency and speed of UDP with the ease of use provided by high-level abstractions. It opens the door for developers to implement fast and efficient networking capabilities in their applications, with minimal overhead and complexity."
  },
  "articles/terminal/configuration/intro.html": {
    "href": "articles/terminal/configuration/intro.html",
    "title": "Configuration",
    "summary": "Configuration Welcome to the OneImlx.Terminal framework configuration guide. This section is designed to help developers understand and utilize the configuration options available within the framework, enabling the customization and optimization of terminal applications to meet specific requirements. The OneImlx.Terminal framework offers a flexible and extensive configuration system, allowing developers to tailor the behavior of their applications through various settings: Options: Customize your terminal applications with a broad set of configuration options that control behavior, and functionality. Services: Integrate and configure services essential for the operation of terminal applications, such as command processing, authentication, and logging. Limits: Set and manage limits for different aspects of your application, such as command length, execution time, and resource consumption, ensuring optimal performance and reliability. Logging: Configure logging levels, outputs, and formats to effectively monitor and debug applications. The framework's integration with Microsoft ILogger provides a versatile logging solution compatible with various logging frameworks like Serilog. Each configuration category plays a critical role in shaping the behavior and capabilities of your terminal applications. By fine-tuning these settings, you can achieve the desired balance between functionality, performance, and security."
  },
  "articles/terminal/configuration/limits.html": {
    "href": "articles/terminal/configuration/limits.html",
    "title": "Limits",
    "summary": "Limits Configuration Options The following restrictions apply to the configuration options while parsing the command strings. The command separator cannot be null or empty string The command separator and option prefix cannot be same The command separator and option alias prefix cannot be same The option separator cannot be null or empty string The option prefix cannot be null or whitespace The option prefix cannot be more than 3 Unicode characters The option alias prefix cannot be null or whitespace The option alias prefix cannot be more than 3 Unicode characters The option separator and option prefix cannot be same The option separator and option alias prefix cannot be same The option alias prefix cannot start with option prefix The string with_in token cannot be whitespace The string with_in token and separator cannot be same The string with_in token and option prefix cannot be same The string with_in token and option separator cannot be same Licensing The hosted service will print the following mandatory messsage in the terminal for demo licenses. Education The demo license is free for educational purposes, but non-educational use requires a commercial license. RnD The demo license is free for research and development, but production use requires a commercial license. Cross-Platform While the OneImlx.Terminal framework is designed to be cross-platform, it's important to note that specific integration libraries, especially those that are hardware-centric or leverage particular messaging systems, may have optimized support for Linux-based OS. Developers should consider these platform-specific characteristics when integrating third-party libraries or services, ensuring comprehensive compatibility and performance across all targeted platforms."
  },
  "articles/terminal/configuration/logging.html": {
    "href": "articles/terminal/configuration/logging.html",
    "title": "",
    "summary": "Logging The OneImlx.Terminal framework relies on the Microsoft ILogger framework to provide a robust and flexible logging mechanism. This allows developers to leverage the full suite of logging functionalities offered by .NET, ensuring that applications can efficiently log information, errors, and warnings. Developers have the flexibility to use the standard logger provided by .NET, integrate with popular logging solutions like Serilog for enhanced logging capabilities, or even implement custom logging solutions tailored to their application's specific needs. This approach ensures that terminal applications can maintain high levels of transparency, reliability, and control over logging activities, crucial for troubleshooting and maintaining enterprise-grade applications."
  },
  "articles/terminal/configuration/options.html": {
    "href": "articles/terminal/configuration/options.html",
    "title": "Configuration Options",
    "summary": "Configuration Options The OneImlx.Terminal framework utilizes the options pattern, facilitating strongly typed access to groups of related settings. By isolating configuration settings into separate classes based on scenarios, the host CLI or terminal app upholds two fundamental software engineering principles: Interface Segregation Principle (ISP) or Encapsulation: Classes dependent on configuration settings are only reliant on the settings they actually use, promoting clean and maintainable code. Separation of Concerns: Settings for different components of the application are isolated from each other, ensuring that changes in one area do not affect the others. Furthermore, options offer a method for validating configuration data, ensuring that your application runs smoothly with correct and valid configurations. Configurability The framework enhances flexibility through Command Options and Configuration Options, empowering developers to tailor applications to specific requirements. Command Options Command Options are flags or key-value pairs within command strings that modify command behavior. Defined in the command descriptor and processed at runtime, these options allow for the customization of commands. For instance, update profile --username=johndoe --email=johndoe@example.com demonstrates how --username and --email define the profile command. Configuration Options Configuration Options set the application's overall behavior, as defined by the Options Design Pattern in .NET. Typically specified in appsettings.json or via environment variables, these options are loaded at startup. This structure provides a systematic approach to managing application settings, enhancing control over multiple commands or the entire application's behavior. TerminalOptions This TerminalOptions outlines all the configuration options supported by the terminal framework, providing you with the information you need to effectively configure and optimize your application. Option Description Reserved for Future Id A unique identifier for the terminal instance. Authentication Configuration options for authentication. Yes Checker Configuration options for command, argument, and option validation. Driver Configuration options for the terminal's driver. Yes Help Configuration options related to the help system. Licensing Configuration options for licensing. Parser Configuration options for extracting command arguments and options from input. Router Configuration options for the command router. AuthenticationOptions Planned for next major release. CheckerOptions The command, argument, and option checker configuration options. The checker options are not filters. The command execution is blocked if any check fails. AllowObsolete This setting determines the checker's behavior when a command is executed with obsolete arguments or options. Runtime Check: The obsolete check triggers at runtime, specifically when a user or an application runs a command with an obsolete argument or option. Conditional Effect: The setting is inactive if an obsolete argument is supported by the command but not provided in the command string at runtime. StrictValueType This setting determines if the checker verifies the data type of argument or option value. When enabled, the checker attempts to match each value to its designated .NET data type, and if any mismatch occurs, it prevents the command from running. Example Command: pi lic gen --lic-edition community --expiry 365 --nbf \"26-Apr-2022 14:36:11\" --test In the example above, the pi lic gen command includes four options: lic-edition (string) expiry (int) nbf (date and time) test (boolean) With StrictValueType enabled, the checker conducts automatic type validation to ensure: lic-edition is a System.String expiry is a System.Int32 nbf is a valid System.DateTime test is a System.Boolean If any of these validations fail, the command will not execute. Note: Disabling this configuration option results in the checker interpreting all values as strings. DriverOptions Reserved for future use, the DriverOptions provide configuration settings for operating the terminal as a native driver program. Enabled Determines if the terminal functions as a native driver program, allowing execution of commands directly from a native command prompt. This option is a bool. RootId Specifies the root identifier of the terminal driver program. This option is of type string?. Note: These configuration options are reserved for future development and enhancements of the terminal framework. HelpOptions HelpOptions configures the help functionality within a terminal application, allowing customization of how help information is presented and accessible to users. Disabled This property determines whether the global help functionality is active. When set to true, the help functionality is disabled across the application. OptionId OptionId provides a unique identifier for the help option, defaulting to help. It is crucial to ensure that this identifier is unique across all commands and options within the application. OptionDescription This property defines a description for the help option, with a default setting of \"The command help\". This description can be modified to better align with the application's context. OptionAlias OptionAlias sets a shorthand alias for the help option, defaulting to h. It is important to maintain the uniqueness of this alias across all options and commands to ensure clarity for the end-users. LicensingOptions LicensingOptions helps to configure licensing-related settings in your terminal application, ensuring that your usage complies with the licensing terms. For more details on generating license keys and accessing your identifiers, please visit licensing. LicenseFile The path to the file containing the license key. LicensePlan The license plan for the terminal, defaulting to the Demo plan. The value should be one of the options provided by TerminalLicensePlans. Deployment The deployment value indicating whether the terminal is deployed in a secured, offline environment. If set to true, the ILicenseExtractor will bypass the license checking. This option is crucial for hardware-centric or factory environments where software configurations are locked down. Ensure you have a valid active license plan to comply with licensing terms. ParserOptions Configuration options for parsing command and argument strings. // Example options.Parser.OptionAliasPrefix = \"-\"; dotnet build -c Release In the example above, -c is recognized as an option alias. OptionPrefix Defines the prefix for options, with a default of --. Like OptionAliasPrefix, it cannot be null or whitespace. // Example options.Parser.OptionPrefix = \"--\"; dotnet run --configuration Debug In the example above, --configuration is recognized as an option. OptionValueSeparator Sets the separator between an option and its value, defaulting to a space . It must be a single Unicode character but can be whitespace. // Example options.Parser.OptionValueSeparator = \" \"; dotnet run --framework netcoreapp3.1 In this case, the space between --framework and netcoreapp3.1 is the option value separator. ValueDelimiter Specifies a delimiter for enclosing argument or option values, with a default of \". // Example options.Parser.ValueDelimiter = \"\\\"\"; dotnet run --project \"My Project\" The quotes around My Project are the value delimiters.. Separator Determines the separator for the command string, defaulting to a single space . It must be a single Unicode character and can be whitespace. // Example options.Parser.Separator = \" \"; dotnet publish --runtime linux-x64 The spaces between the command and options are the separators. RouterOptions RouterOptions provides a range of settings that determine how command routing is handled within the terminal application. Caret The Caret property allows you to set the terminal caret that is displayed in the console, helping users to identify where they can input their commands. The default caret is >. Timeout This property sets the timeout duration for command routing in milliseconds, with a default value of 25 seconds. Setting this to Timeout.Infinite will result in no timeout. A command route handles everything for a command: parsing it, making sure it's valid, and then running it. MaxClients The MaxClients property defines the maximum number of active remote client connections that the router can accept, with a default value of 5. This is particularly useful for managing resource usage and ensuring optimal performance. MaxLength This property specifies the maximum length of a single message, with a default limit of 1024 characters. It helps in managing the data flow and ensuring that the messages are within an acceptable size range. References Options pattern in .NET Architectural principles"
  },
  "articles/terminal/configuration/services.html": {
    "href": "articles/terminal/configuration/services.html",
    "title": "Services (Dependency Injection)",
    "summary": "Services (Dependency Injection) OneImlx.Terminal supports the dependency injection (DI) software design pattern, a technique for achieving Inversion of Control (IoC) between classes and their dependencies. This framework allows for easy integration with configuration options and logging to create robust, maintainable, and scalable terminal applications. Extension Methods To facilitate the integration of OneImlx.Terminal services into a host application's dependency injection container, the following classes offer extension methods: IServiceCollectionExtensions: Offers extension methods to register and configure OneImlx.Terminal services within the host application's dependency injection container. IHostExtensions: Provides an extension method to run the terminal routing, enabling the execution of commands within the terminal application. ITerminalBuilderExtensions: Enhances the terminal builder with additional configuration and customization options. ICommandBuilderExtensions: Provides extension methods to aid in the configuration and creation of commands in the terminal application. IOptionBuilderExtensions: Offers methods for defining and configuring command options, ensuring their proper integration and validation. TerminalOptions: Represents the configurable options for the OneImlx.Terminal terminal application, allowing for customization of its behavior. Hosted Service You need to register a TerminalHostedService using standard .NET extension method AddHostedService. This will enable you to define and customize terminal startup and lifetime behavior. collection.AddHostedService<TestAppHostedService>(); HTTP Client If you are using an online license then you will need to register the HttpClient service in your application. This service is used to communicate with the our licensing server to validate the license. collection.AddHttpClient(\"demo-http\"); The demo-http is the name of the HTTP client instance. You can use any name you like. INFO: The HTTP client registration is required only if you are using an online license. Integrate Framework Integrating the OneImlx.Terminal framework into a .NET application is straightforward with two standard methods designed for most use cases. These methods facilitate the registration of terminal services within your application's Dependency Injection (DI) service collection. For advanced scenarios, the framework also allows for more granular control by using individual services. AddTerminalDefault The AddTerminalDefault method adds essential terminal functionalities to your application, such as command handling, text processing, and help provider. It registers the foundational terminal services in your project, allowing customization through setup actions. ITerminalBuilder terminalBuilder = collection.AddTerminalDefault<TerminalInMemoryCommandStore, TerminalUnicodeTextHandler, TerminalHelpLoggerProvider>(new TerminalUnicodeTextHandler(), options => { options.Id = TerminalIdentifiers.TestApplicationId; options.Licensing.LicenseFile = \"C:\\\\this\\\\perpetualintelligence\\\\tools\\\\lic\\\\oneimlx-terminal-demo-test.json\"; options.Router.Caret = \"> \"; } ); AddTerminalConsole The AddTerminalConsole method extends AddTerminalDefault by adding console-specific functionalities. This method integrates additional services tailored for console applications, building on the foundational terminal services. ITerminalBuilder terminalBuilder = collection.AddTerminalConsole<TerminalInMemoryCommandStore, TerminalUnicodeTextHandler, TerminalHelpConsoleProvider, TerminalSystemConsole>(new TerminalUnicodeTextHandler(), options => { options.Id = TerminalIdentifiers.TestApplicationId; options.Licensing.LicenseFile = \"C:\\\\this\\\\perpetualintelligence\\\\tools\\\\lic\\\\oneimlx-terminal-demo-test.json\"; options.Router.Caret = \"> \"; } ); Advanced Use Cases For more detailed control and customization, developers can use specific services from the OneImlx.Terminal framework. This option supports creating tailored terminal experiences for unique application needs, offering flexibility for intricate setups. Add Descriptors The ITerminalBuilder extensions offer both explicit and declarative syntaxes for registering command, argument and option descriptors within the service collection. When deciding between explicit and declarative syntax for command registration, consider both usability and performance implications. Explicit syntax is more efficient as it avoids reflection, unlike declarative syntax, which may be more resource-intensive due to its use of reflection. However, for applications with intricate command hierarchies, the straightforward usability of declarative syntax could be appealing despite potential performance costs. Given that command registration is a startup activity, the performance impact primarily affects initial load time, not runtime. Developers should assess these factors based on their application's specific needs and performance requirements. Explicit Syntax The explicit syntax method for command registration in the framework is a direct and controlled approach to integrating command functionalities into your .NET application. This method primarily revolves around the use of hosting builders, which are sophisticated tools provided by the framework to manually define and register command descriptors with the service collection. private static void RegisterCommands(ITerminalBuilder terminalBuilder) { terminalBuilder.DefineCommand<TestChecker, TestRunner>(\"test\", \"Test command\", \"Test Description\", Commands.CommandType.Root, Commands.CommandFlags.None) .DefineArgument(1, \"arg1\", nameof(String), \"The first argument\", Commands.ArgumentFlags.None) .Add() .DefineArgument(2, \"arg2\", nameof(Int32), \"The second argument\", Commands.ArgumentFlags.None) .Add() .DefineOption(\"version\", nameof(String), \"The version option\", Commands.OptionFlags.None, \"v\") .Add() .Add(); } NOTE: In the explicit syntax for command registration, the Add() method is necessary for finalizing and registering commands, arguments or options. It commits an element definition and adds the command descriptor to the service collection. Declarative Syntax Alternatively, descriptors can also be defined directly on command runners using declarative attributes. [CommandDescriptor(\"test\", \"Test App\", \"Test application description.\", Commands.CommandType.Root, Commands.CommandFlags.None)] [OptionDescriptor(\"version\", nameof(String), \"Test version description\", Commands.OptionFlags.None, \"v\")] [CommandChecker(typeof(CommandChecker))] public class TestRunner : CommandRunner<CommandRunnerResult>, IDeclarativeRunner { } The framework automatically discovers and registers these command descriptors through the AddDeclarative... extension methods. // Add all the commands in the assembly using declarative syntax. terminalBuilder.AddDeclarativeAssembly<TestRunner>(); NOTE: For declarative syntax it is necessrary to implement @OneImlx.Terminal.Commands.IDeclarativeRunner interface in the command runner class. Complete Integration Example Below is an example showing the AddTerminalConsole method in action, configuring the terminal framework for a console application with an online demo license. private static void ConfigureOneImlxTerminal(IServiceCollection collection) { // Configure the hosted service collection.AddHostedService<TestAppHostedService>(); // We are using online license so configure HTTP collection.AddHttpClient(\"demo-http\"); // NOTE: // Specify your demo or commercial license file. // Specify your application id. ITerminalBuilder terminalBuilder = collection.AddTerminalConsole<TerminalInMemoryCommandStore, TerminalUnicodeTextHandler, TerminalHelpConsoleProvider, TerminalSystemConsole>(new TerminalUnicodeTextHandler(), options => { options.Id = TerminalIdentifiers.TestApplicationId; options.Licensing.LicenseFile = \"C:\\\\this\\\\perpetualintelligence\\\\tools\\\\lic\\\\oneimlx-terminal-demo-test.json\"; options.Router.Caret = \"> \"; } ); // Add commands using declarative syntax. terminalBuilder.AddDeclarativeAssembly<TestRunner>(); }"
  },
  "articles/terminal/gs/apps.html": {
    "href": "articles/terminal/gs/apps.html",
    "title": "Applications",
    "summary": "Applications To use the OneImlx.Terminal framework, tenants must first create an Application in our system. An Application connects a license with your end terminal app, ensuring that only authorized applications can use the OneImlx.Terminal framework's capabilities. Application -> License -> Your Terminal App -> OneImlx.Terminal features Creating an Application Follow these steps to create an Application: Go to the applications page on our consumer portal. Click the Add Application button. Enter a display name for your application. Submit, and our system will automatically generate a unique ID for your application. Application ID The Application ID uniquely identifies your terminal application in our system and is crucial for generating the license file. It's safe to distribute the Application ID in your terminal code, as it's intended for public use. Licensing Your Application After creating your Application and receiving the Application ID, generate a license file. This license activates your terminal application, allowing access to the OneImlx.Terminal framework features. Managing Applications Our consumer portal enables you to manage your applications easily. Create, update, or delete applications as necessary."
  },
  "articles/terminal/gs/demo.html": {
    "href": "articles/terminal/gs/demo.html",
    "title": "Demo License",
    "summary": "Demo License Use the demo license for quick onboarding, community or educational purposes. Acquiring a Demo License Create an account on our Consumer Portal to get your demo license. Sign In: Go to your account. License Access: Choose Licenses > Add Demo License. License Creation: Enter the required details and select Add License. Download License: Download the license file to your system. Integration: Configure your terminal application with the demo license. Note: Link each license to one or more applications. For creating an application for your terminal, visit Applications and click Add Application. Additional Resources Configuration Options Licensing Options"
  },
  "articles/terminal/gs/intro.html": {
    "href": "articles/terminal/gs/intro.html",
    "title": "Getting Started",
    "summary": "Getting Started This document outlines how to start with the OneImlx.Terminal framework. For Educational and Community Educational institutions and community developers may build and deploy terminal applications using the OneImlx.Terminal framework for free, as long as these are not for commercial or production purposes. The demo license facilitates this by: Offering full feature access at no cost. Allowing immediate use of OneImlx.Terminal without payment. Providing access to sample test applications on GitHub. Note: The demo license is for non-commercial and non-production use. However, educational institutions may use it for internal, non-commercial production deployments. For Commercial or Production Use OneImlx.Terminal provides a range of commercial plans to accommodate individual developers, SMBs, and Enterprises. For detailed information on the various licensing terms and how to select the right one for your needs, refer to our licensing documentation. Acquiring a Commercial License Purchase a Subscription: Via Microsoft Azure. Via Microsoft AppStore. Note: During the purchase process, Microsoft will prompt you to activate your subscription with our consumer portal. Activate Your Subscription: Follow Microsoft's instructions to start activation. Complete activation on our consumer portal. Configure Your Environment: Add an application for your terminal on our consumer portal Add a demo or commercial license. Reference our test apps or create from scratch. Set up terminal configuration options. Create a hosted service for your terminal. Configure commands, arguments, and options. Implement command runners. Build and launch your terminal applications!"
  },
  "articles/terminal/gs/setup.html": {
    "href": "articles/terminal/gs/setup.html",
    "title": "Setup",
    "summary": "Setup Ensure you have your license file ready. Follow these steps to set up your terminal application with the OneImlx.Terminal framework. Test Application Our test application demonstrates the OneImlx.Terminal framework. It's suitable for learning and building terminal applications. Summary Browse test application Clone the apps folder Replace our internal development license with your demo or commercial license. Remove the conditional <ProjectReference> in .csproj and use NuGet <PackageReference>. Build and test the code Details 1. Install NuGet Packages You install the framework through NuGet packages. The core functionality is available via the OneImlx.Terminal package. For scenarios requiring secured command execution, the OneImlx.Terminal.Authentication package extends the framework with authentication capabilities. You may choose either package based on your needs. Apart from that you will need the following NuGet packages: Note: Remove the entire DEV CONFIG: from the the .csproj file and add our NuGet package directly. The <ProjectReference> is for our internal development. <!-- DEV CONFIG: REMOVE THIS SECTION IN YOUR APP AND ONLY ADD NUGET PACKAGE REFERENCE --> <Choose> <When Condition=\"'$(PI_CI_REFERENCE)'=='cross'\"> <ItemGroup> <ProjectReference Include=\"..\\..\\src\\OneImlx.Terminal.Authentication\\OneImlx.Terminal.Authentication.csproj\" /> </ItemGroup> </When> <Otherwise> <ItemGroup> <PackageReference Include=\"OneImlx.Terminal.Authentication\" Version=\"5.10.1-rc.114243041\" /> </ItemGroup> </Otherwise> </Choose> 2. Add Hosted Service The TerminalHostedService is a hosted service that manages terminal lifetime, performs licensing and configuration checks, and enables terminal UX customization. The below image shows the default console view when you run the test application. You can customize the terminal behavior by overriding the methods from TerminalHostedService. using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; using OneImlx.Terminal.Configuration.Options; using OneImlx.Terminal.Hosting; using OneImlx.Terminal.Licensing; using OneImlx.Terminal.Runtime; namespace OneImlx.Terminal.Apps.TestApp { /// <summary> /// The <see cref=\"TerminalHostedService\"/> for the test app. /// </summary> public sealed class TestAppHostedService : TerminalHostedService { /// <summary> /// Initializes a new instance. /// </summary> /// <param name=\"serviceProvider\">The DI service provider.</param> /// <param name=\"options\">The terminal configuration options.</param> /// <param name=\"terminalConsole\">The terminal console.</param> /// <param name=\"logger\">The logger.</param> public TestAppHostedService( IServiceProvider serviceProvider, TerminalOptions options, ITerminalConsole terminalConsole, ILogger<TerminalHostedService> logger) : base(serviceProvider, options, terminalConsole, logger) { } /// <summary> /// Perform custom configuration option checks at startup. /// </summary> /// <param name=\"options\"></param> /// <returns></returns> protected override Task CheckHostApplicationConfigurationAsync(TerminalOptions options) { return Task.CompletedTask; } /// <summary> /// The <see cref=\"IHostApplicationLifetime.ApplicationStarted\"/> handler. /// </summary> protected override void OnStarted() { // These are async calls, but we are blocking here for as the of the test. TerminalConsole.WriteLineAsync(\"Application started on {0}.\", DateTime.UtcNow.ToLocalTime().ToString()).Wait(); } /// <summary> /// The <see cref=\"IHostApplicationLifetime.ApplicationStopped\"/> handler. /// </summary> protected override void OnStopped() { TerminalConsole.WriteLineColorAsync(ConsoleColor.Red, \"Application stopped on {0}.\", DateTime.UtcNow.ToLocalTime().ToString()).Wait(); } /// <summary> /// The <see cref=\"IHostApplicationLifetime.ApplicationStopping\"/> handler. /// </summary> protected override void OnStopping() { TerminalConsole.WriteLineAsync(\"Stopping application...\").Wait(); } /// <summary> /// Print <c>cli</c> terminal header. /// </summary> /// <returns></returns> protected override async Task PrintHostApplicationHeaderAsync() { await TerminalConsole.WriteLineAsync(\"---------------------------------------------------------------------------------------------\"); await TerminalConsole.WriteLineAsync(\"Copyright (c) Test App. All Rights Reserved.\"); await TerminalConsole.WriteLineAsync(\"For license, terms, and data policies, go to:\"); await TerminalConsole.WriteLineAsync(\"https://mytestapp.com\"); await TerminalConsole.WriteLineAsync(\"---------------------------------------------------------------------------------------------\"); await TerminalConsole.WriteLineAsync(\"Starting application...\"); } /// <summary> /// Print host application licensing information. /// </summary> /// <param name=\"license\">The extracted license.</param> /// <returns></returns> protected override Task PrintHostApplicationLicensingAsync(License license) { // Print custom licensing info or remove it completely. return base.PrintHostApplicationLicensingAsync(license); } } } 3. Setup Program.cs The Main method in Program.cs sets up the OneImlx.Terminal framework and initiates the default console router, which then asynchronously processes and executes user-issued commands. It also configures cancellation tokens to terminate specific commands or the entire application as needed. private static async Task Main(string[] args) { // Allow cancellation for the entire terminal or individual commands. CancellationTokenSource terminaTokenSource = new(); CancellationTokenSource commandTokenSource = new(); // Setup and start the host builder. // Note: The host should only start, the terminal framework will run the router separately. IHostBuilder hostBuilder = CreateHostBuilder(args); hostBuilder.ConfigureServices(ConfigureServicesDelegate); hostBuilder.ConfigureLogging(ConfigureLoggingDelegate); IHost host = hostBuilder.Start(); // Setup the terminal context and run the console router indefinitely. TerminalStartContext terminalStartContext = new(TerminalStartMode.Console, terminaTokenSource.Token, commandTokenSource.Token); TerminalConsoleRouterContext consoleRouterContext = new(terminalStartContext); await host.RunTerminalRouterAsync<TerminalConsoleRouter, TerminalConsoleRouterContext>(consoleRouterContext); } Note: You can also configure your terminal as a server that employs TCP or UDP routers to process and execute commands in a service-to-service architecture. 4. Configure Services and Options The OneImlx.Terminal framework leverages the modern Dependency Injection (DI) and Options pattern to streamline setup and customization. Configure Logging ConfigureLoggingDelegate acts as a customizable method for setting up logging. Below is an example showing how to configure Serilog as the logging solution. private static void ConfigureLoggingDelegate(HostBuilderContext context, ILoggingBuilder builder) { // Clear all providers builder.ClearProviders(); // Configure logging of your choice, here we are configuring Serilog var loggerConfig = new LoggerConfiguration(); loggerConfig.MinimumLevel.Error(); loggerConfig.WriteTo.Console(); Log.Logger = loggerConfig.CreateLogger(); builder.AddSerilog(Log.Logger); } Configure Services ConfigureServicesDelegate acts as a customizable method for integrating all necessary services for your terminal application. To specifically configure the OneImlx.Terminal framework, utilize the ConfigureOneImlxTerminal method. private static void ConfigureServicesDelegate(HostBuilderContext context, IServiceCollection services) { // Disable hosting status message services.Configure<ConsoleLifetimeOptions>(options => { options.SuppressStatusMessages = true; }); // Configure OneImlx.Terminal services ConfigureOneImlxTerminal(services); // Configure other services } Configure Framework ConfigureOneImlxTerminal configures the OneImlx.Terminal framework for console mode with a demo license. It registers a hosted service to manage the terminal's lifecycle, initializes HTTP client for demo license, and sets the licensed application identifier, license file path, and command prompt symbol. Note: Please ensure you set your application identifier and the path to your demo license. For more information, see all the supported terminal services, configuration options and terminal routers private static void ConfigureOneImlxTerminal(IServiceCollection collection) { // Configure the hosted service collection.AddHostedService<TestAppHostedService>(); // We are using online license so configure HTTP client collection.AddHttpClient(\"demo-http\"); // Specific your demo or commercial license file. // Note: Replace with your license file. ITerminalBuilder terminalBuilder = collection.AddTerminalConsole<TerminalInMemoryCommandStore, TerminalUnicodeTextHandler, TerminalHelpConsoleProvider, TerminalSystemConsole>(new TerminalUnicodeTextHandler(), options => { options.Id = TerminalIdentifiers.TestApplicationId; options.Licensing.LicenseFile = \"C:\\\\lic\\\\demo.json\"; options.Router.Caret = \"> \"; } ); // Add commands using declarative syntax terminalBuilder.AddDeclarativeAssembly<TestRunner>(); } 5. Add Descriptors and Runners The test application includes a Runners folder that defines all the runners. Each runner defines a command descriptor, arguments, and options or flags. You can use declarative syntax to define the descriptor's attributes directly on each command runner, or you can use explicit extension methods to register the command descriptor and runners. 6. Start Terminal Router Building and launching the test application with the terminal console router completes the setup, a task already accomplished in the Main method. The following image displays executing a test command from the user-entered command string. 7. Stop Terminal Router You have several methods to stop the terminal router, either explicitly or programmatically: Send the standard CTRL+C signal to the hosted service/console. Define an exit command that triggers cancellation. Issue a cancellation token programmatically from within the application."
  },
  "articles/terminal/intro.html": {
    "href": "articles/terminal/intro.html",
    "title": "Terminal Framework",
    "summary": "Terminal Framework OneImlx.Terminal is a cross-platform, adaptable framework designed for developing modern and secured terminal applications. It simplifies terminal infrastructure complexity, enabling developers to focus on building enterprise-grade terminal applications with Unicode support and extensive command hierarchies. Utilize micro services architecture, Dependency Injection (DI), and options pattern to design and configure your terminal apps. Access built-in features or develop custom solutions for terminal UX, runtime, parsing, routing, error handling, command validation, and storage. Choose in-memory command storage or integrate with your custom storage solutions. Create platform and deployment agnostic terminals, servers, and custom applications for on-premise, cloud, hybrid, highly-secured OSAT, or factory environments. Integrate with OAuth and OpenID Connect (OIDC) authentication providers Engage with our team on GitHub for support and feature enhancements. Quickly on-board with our demo license and GitHub samples, no payment required. Easily transform any .NET ecosystem feature into a modern Unicode terminal app. Open Source The terminal framework is open-source hosted on GitHub, encouraging community collaboration and feedback. Our DevOps builds the framework with hosted runners for various OS platforms, supporting platforms compatible with .NET. Access licensed packages via NuGet: Samples Browse our GitHub samples to explore various applications build using the OneImlx.Terminal framework. Standalone terminal application Modern command-line interfaces (CLI) similar to dotnet CLI, GitHub CLI, Stripe CLI, etc. Server-based terminal applications for managing service-to-service communications, enhancing connectivity and functionality between different services IoT Terminal Applications for managing and communicating with IoT devices Integration The OneImlx.Terminal framework separates the terminal's backend logic from the frontend, making it ideal for building terminal applications, servers, and command-line interfaces. Enhanced Integration with .NET Ecosystem OneImlx.Terminal ensures seamless integration with the .NET stack, streamlining the development and deployment. Console Enhance console applications with advanced command routing and execution capabilities by integrating the OneImlx.Terminal framework. Custom UX Utilize ASP.NET Core, Blazor, and Blazor WebAssembly (WASM) with OneImlx.Terminal to craft custom, responsive terminal user interfaces. The framework, acting as a comprehensive terminal parsing and execution engine, allows developers to create dynamic UX for server-side and client-side terminal applications. It handles complex command executions efficiently and adapts to various .NET frameworks, supporting flexible command execution syntax for sophisticated, secure terminal applications. Backend Use the OneImlx.Terminal framework to develop server applications capable of managing complex client-server and service-to-service communications using TCP, UDP, or custom routers. This setup enables robust and scalable communication solutions tailored to your specific infrastructure needs. It also enables developers and product owners to expose complex APIs as simple command strings with arguments and options, facilitating the creation of products as CLI apps, diagnostic tools, and administrative interfaces. On-Premise OneImlx.Terminal excels in on-premise server applications, aligning with internal policies and infrastructure. It offers tools and flexibility for managing and deploying terminal applications in secure, zero-trust, and controlled environments. Other Integrations Develop various frontend terminal applications using technologies like React, Vue.js, Electron, or MAUI, communicating with a .NET-based terminal server for command processing and execution. Web and Cloud Native Create web and cloud native terminal applications using JavaScript frameworks, interacting with a .NET-based terminal server for command execution. Other Languages Build terminal applications in Python, Java, or other languages, integrating with the .NET-based terminal server for robust command execution. Note: OneImlx.Terminal currently supports TCP/IP, UDP, and custom routers. Future plans include adding support for gRPC and HTTP. Deployment Deploy the terminal server and apps as needed: On-Premise: Maintain full control and comply with internal policies. Cloud: Leverage cloud infrastructure. Containerized Environments: Simplify deployment and scaling. Feedback Submit issues or feature requests directly on GitHub. References Microservices Architecture .NET Application Architecture."
  },
  "articles/terminal/licensing/faqs.html": {
    "href": "articles/terminal/licensing/faqs.html",
    "title": "",
    "summary": ""
  },
  "articles/terminal/licensing/featurecomparison.html": {
    "href": "articles/terminal/licensing/featurecomparison.html",
    "title": "Feature Comparison",
    "summary": "Feature Comparison"
  },
  "articles/terminal/licensing/intro.html": {
    "href": "articles/terminal/licensing/intro.html",
    "title": "Licensing",
    "summary": "Licensing Our licensing and pricing model is designed to accommodate everyone - from the community and solo entrepreneurs to small-medium businesses, large enterprises, and service vendors. For bespoke license requirements, please contact us. Commercial Use Commercial use encompasses: Revenue-generating activities or endeavors aimed at deriving benefits. Deployment of applications in live, production, or on-premise environments accessible to end-customers or users. Applications or services declared in full operational status. Licenses To acquire a valid license, an account with our consumer portal is necessary. Demo The Demo edition, available at no cost, is a full-feature license intended for educational, community, and non-commercial purposes. WARN: The OneImlx.Terminal framework requires a commercial license for use in non-educational or production settings. Educational institutions and community developers may deploy the framework in production environments, provided it is solely for educational use. Solo The Solo edition provides a commercial license ideal for individual users or micro-businesses with no more than 10 employees. SMB The SMB edition offers a commercial license tailored for small to medium-sized businesses with up to 200 employees. Enterprise The Enterprise edition delivers a commercial license for large businesses or organizations with over 500 employees. On-Premise The On-Premise edition, designed for enterprises or ISVs (Independent Software Vendors), allows the redistribution of the OneImlx.Terminal framework within standard or custom products. Unlimited The Unlimited edition, designed for enterprises or ISVs (Independent Software Vendors), along unlimited redistribution of the OneImlx.Terminal framework within standard or custom products. Redistribution Based on your purchased license and redistribution limit, you can develop end-user products that integrate the OneImlx.Terminal framework and redistribute the framework to your customers, but only as part of an end-user product. See our redistribution terms for more details. WARN: You are responsible for tracking the redistribution limit for your purchased license. See our pricing page for redistribution limits. License Transfer Licenses for the OneImlx.Terminal framework are non-transferable across organizations and business units. This ensures that each entity utilizing the framework does so under a license agreement directly attributed to them. Independent Software Vendors (ISVs) An ISV who develops end products incorporating the OneImlx.Terminal framework is permitted to redistribute the framework as part of their license agreement and redistribution limit. This facilitates the deployment of solutions enhanced by OneImlx.Terminal directly to end-users. Service Vendors and Organizations In cases where a service vendor assists an organization in building an end product that includes the OneImlx.Terminal framework, both parties the service vendor and the organization, must possess their own separate licenses. This requirement ensures that all entities involved in the development and deployment process are appropriately licensed, aligning with the framework's terms of use."
  },
  "articles/terminal/licensing/licensemgmt.html": {
    "href": "articles/terminal/licensing/licensemgmt.html",
    "title": "License Management",
    "summary": "License Management Manage your OneImlx.Terminal framework licenses to ensure your applications are compliant with our licensing terms. This includes adding new licenses, checking, downloading, and resetting licenses. New License First, register your application in our system. See Applications for setup. INFO: Each tenant account may add up to 10 new licenses. For additional licenses, please contact support. Add Demo License Log in to the consumer portal. From the Licenses menu, click Add Demo License button. Choose your demo license usage, Research Purposes or Educational Purposes. Select the applications you wish to license. Click Add License button to create a new demo license. INFO: Each account can create at most one demo license, valid for use in educational, community, or non-commercial projects. To renew the demo license after its 90-day validity period, you must generate a new license or reset the existing one through the consumer portal. Add Commercial License Log in to the consumer portal. From the Licenses menu, clixk Add Commercial License button. Choose your subscription from the dropdown. Select the applications you wish to license. Choose your commerical license usage, Commercial Business or Commercial Solo. Select if On-Premise Deployment is necessary for your terminal application. Click Add License button to create a new commercial license. INFO: The features of commercial license depend on the chosen subscription plan. For details on each license edition see our licensing documentation. Download License Log in to the consumer portal. Navigate to the Licenses menu, select the license you want to download. Scroll down to the Actions section. Click the Download License button to obtain the license file for your application setup. Check License Log in to the consumer portal. In the Licenses menu, choose the license you need to check. Scroll to the Actions section. Click the Check License button to verify the status and details of your license. Reset License Log in to the consumer portal. From the Licenses menu, select the license you need to reset. In the Actions section, click the Reset License button. INFO: You may need to reset your license if you encounter issues with it or if reconfiguring your application's license setup is necessary. Delete License Log in to the consumer portal. Navigate to the Licenses menu and select the license you wish to delete. Scroll down to the Actions section. Click the Delete License button to permanently remove the selected license from your account. WARN: Use caution with this action. Deleting a license is irreversible and may impact the operation of any applications relying on it. Advanced This section is intended for advanced debugging purposes only. Copy License Key Log in to the consumer portal. Go to the Licenses menu and select the license whose key you want to copy. Scroll to the Actions section. Click the Copy License Key button. This action copies the JWT license key to your clipboard, allowing you to use it for debugging or other advanced purposes. Inspect License Key In the Actions section, click the Inspect License Key button. This action automatically opens jwt.ms in a new browser tab. To inspect your license key, manually paste it into the provided field on jwt.ms. WARN: Use the \"Copy License Key\" and \"Inspect License Key\" features for advanced debugging scenarios. Inspecting the license key allows for a detailed view of the license's encoded claims, aiding in troubleshooting. See also JWT"
  },
  "articles/terminal/licensing/usage.html": {
    "href": "articles/terminal/licensing/usage.html",
    "title": "Usage",
    "summary": "Usage Authorize your terminal or application to use the OneImlx.Terminal framework by configuring the LicensingOptions. To generate a new license, visit add new license. Identifiers Identifiers ensure your terminal or application is configured correctly. Visit our Consumer Portal. Login to your account. Navigate to the Licenses menu. Select the license you wish to use. Copy the Application Id. If you have multiple applications, select the appropriate one. Scroll down to Actions and click the Download License button. Configure the LicensingOptions with your copied application identifier and the downloaded license file. Specify the correct terminal license plan. Refer to TerminalLicensePlans for all available plans. options.Id = <your_application_id>; options.Licensing.LicenseFile = <your_license_file_path_local_or_remote>; options.Licensing.LicensePlan = <your_terminal_license_plan>; Example: The code below shows our test application using our internal demo license. options.Id = TerminalIdentifiers.TestApplicationId; options.Licensing.LicenseFile = \"C:\\\\this\\\\perpetualintelligence\\\\tools\\\\lic\\\\oneimlx-terminal-demo-test.json\"; options.Licensing.LicensePlan = TerminalLicensePlans.Demo; For an offline license, particularly with the On-Premise or Unlimited license editions, the onpremise deployment option is available and may be used. This option is designed to facilitate the use of the OneImlx.Terminal framework in environments where internet connectivity is limited or secure internal deployments are required. Refer to @OneImlx.Terminal.TerminalIdentifiers.OnPremiseDeployment. options.Licensing.Deployment = OneImlx.Terminal.TerminalIdentifiers.OnPremiseDeployment; See also Terminal Options"
  },
  "articles/terminal/repo.html": {
    "href": "articles/terminal/repo.html",
    "title": "perpetualintelligence/terminal",
    "summary": "perpetualintelligence/terminal This repository contains our cross-platform terminal framework. We build the following NuGet packages from this repository. We track the issues and tasks here. We make our best effort to respond to issues in a timely fashion. You can read more about our procedures for classifying and resolving issues in our Issues policy topic. This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. See the Code of Conduct. Change Log For the latest updates and changes, please refer to the Change Log on the GitHub repository."
  },
  "articles/terminal/runtime/intro.html": {
    "href": "articles/terminal/runtime/intro.html",
    "title": "Runtime",
    "summary": "Runtime This document outlines the runtime components of the OneImlx.Terminal framework. Hosting The OneImlx.Terminal framework is hosting agnostic, meaning no hosting limitations at all. Application authors can host and run their CLI apps, terminals, or servers on their self-hosting environment, use a managed-hosting environment, or rely on a third party to provide a hosting environment. You can configure your terminal using Dependency Injection(DI services) and options pattern to provide your self-hosting implementations for stores and host in an environment of your choice, e.g., Windows, Linux, macOS, Docker, Kubernetes, etc. Deployment With OneImlx.Terminal framework, build deployment agnostic secured terminals, test them in local environments and deploy the production apps and services on-premise, cloud (public, private, or government), or hybrid. You can also automate the deployment of your apps and services as portable, self-sufficient containers that can run on the cloud or on-premises."
  },
  "index.html": {
    "href": "index.html",
    "title": "",
    "summary": "Welcome to the documentation for Perpetual Intelligence® L.L.C. managed services, cross-platform frameworks, and developer tools. OneImlx.Terminal: The most flexible cross-platform framework for building modern and secured CLI and terminal apps. OneImlx: \uD83D\uDD1C An adaptable cross-platform access management and licensing framework. Our documentation is divided into two main sections: Articles: Conceptual documentation for all our frameworks, tools, and services. Classes: .NET classes documentation for developing applications on various platforms using C#, F#, and Visual Basic. For issues, suggestions, or feature requests, please visit our GitHub issues page. Visit our terms website for information on our terms of use, licensing, and privacy and data policies."
  }
}